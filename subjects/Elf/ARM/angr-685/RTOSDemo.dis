void prvUnlockQueue(word32 r0, word32 r6, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r6
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 sp
prvUnlockQueue_entry:
// DataOut: cpsr r0 r10 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000058:
	word32 r0_14
	vPortEnterCritical(cpsr, out r0_14)
	word32 r4_18 = (int32) (int8) (word32) Mem0[r0 + 69:byte]
	branch r4_18 <= 0x00000000 l00000082
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000006A:
	branch Mem0[r0 + 36:word32] == 0x00000000 l00000098
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000006E:
	r6 = r0 + 0x00000024
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000080:
	r0_14 = r6
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r6:r0 + 0x00000024 r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000082:
	xTaskRemoveFromEventList(r0_14)
	branch 0x00000000 == 0x00000000 l00000074
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r6:r0 + 0x00000024 r0:<invalid> r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000074:
	word32 r3_89 = (uint32) (byte) (r4_18 - 0x00000001)
	r4_18 = (int32) (int8) r3_89
	branch r3_89 == 0x00000000 l00000098
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r6:r0 + 0x00000024 r0:<invalid> r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000008A:
	vTaskMissedYield()
	word32 r3_83 = (uint32) (byte) (r4_18 - 0x00000001)
	r4_18 = (int32) (int8) r3_83
	branch r3_83 != 0x00000000 l0000007C
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r6:r0 + 0x00000024 r0:<invalid> r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000007C:
	branch Mem0[r0 + 36:word32] == 0x00000000 l00000098
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r2:<invalid> r3:<invalid> r6:r0 + 0x00000024 r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000098:
	Mem24[r0 + 69:byte] = 0xFF
	vPortExitCritical(cpsr)
	word32 r0_26
	vPortEnterCritical(cpsr, out r0_26)
	word32 r4_29 = (int32) (int8) (word32) Mem24[r0 + 68:byte]
	branch r4_29 <= 0x00000000 l000000C8
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r6:r0 + 0x00000024 r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000B0:
	branch Mem24[r0 + 16:word32] == 0x00000000 l000000DE
// DataOut: cpsr r10 r4 r5 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:0x000000FF r2:<invalid> r0:<invalid> r6:r0 + 0x00000024 r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000B4:
	r6 = r0 + 0x00000010
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r6:r0 + 0x00000024 r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000C6:
	r0_26 = r6
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r6:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000C8:
	xTaskRemoveFromEventList(r0_26)
	branch 0x00000000 == 0x00000000 l000000BA
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r6:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000BA:
	word32 r3_61 = (uint32) (byte) (r4_29 - 0x00000001)
	r4_29 = (int32) (int8) r3_61
	branch r3_61 == 0x00000000 l000000DE
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r6:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000D0:
	vTaskMissedYield()
	word32 r3_55 = (uint32) (byte) (r4_29 - 0x00000001)
	r4_29 = (int32) (int8) r3_55
	branch r3_55 != 0x00000000 l000000C2
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r6:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000C2:
	branch Mem24[r0 + 16:word32] == 0x00000000 l000000DE
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r6:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000DE:
	Mem36[r0 + 68:byte] = 0xFF
// DataOut: cpsr r10 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r6:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000E8_thunk_vPortExitCritical:
	vPortExitCritical(cpsr)
	return
// DataOut: cpsr r10 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r3:0x000000FF r6:r6 lr:lr r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

prvUnlockQueue_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r3:0x000000FF r6:r6 lr:lr r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



byte prvCopyDataToQueue(word32 r0, word32 r1, word32 r2, ptr32 & r0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut: Z r0
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
prvCopyDataToQueue_entry:
// DataOut: cpsr r0 r1 r2 r7
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000000EC:
	byte Z_104
	word32 r0_14 = Mem0[r0 + 64:word32]
	*r0Out = r0_14
	word32 r5_116 = Mem0[r0 + 56:word32]
	branch r0_14 != 0x00000000 l00000102
// DataOut: cpsr r0 r1 r2 r4 r5 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000102:
	branch r2 != 0x00000000 l00000128
// DataOut: cpsr r1 r2 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000128:
	memcpy(Mem0[r0 + 12:word32], r1, r0_14)
	word32 r3_94 = Mem0[r0 + 12:word32]
	word32 r1_96 = Mem0[r0:word32]
	Mem100[r0 + 12:word32] = r3_94
	branch r3_94 >=u r1_96 l00000144
// DataOut: cpsr r2 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:r2 r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000013E:
	Mem122[r0 + 12:word32] = Mem100[r0 + 4:word32]
// DataOut: cpsr r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:r2 r2:<invalid> r3:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000144:
	Z_104 = cond(r2 - 0x00000002) (alias)
	branch r2 == 0x00000002 l00000158
// DataOut: cpsr r4 r5 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:r2 r2:<invalid> r3:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000158:
	branch r5_116 != 0x00000000 l0000015C
// DataOut: cpsr r4 r5 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:r2 r2:<invalid> r3:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000015A:
	r5_116 = 0x00000001
// DataOut: cpsr r4 r5 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:r2 r2:<invalid> r3:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000015C:
	word32 r0_117
	*r0Out = 0x00000000
// DataOut: cpsr r0 r4 r5 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:r2 r2:<invalid> r3:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000148:
	Mem111[r0 + 56:word32] = r5_116 + 0x00000001
	word32 r0_110
	*r0Out = 0x00000000
	return cond(r5_116 + 0x00000001)
// DataOut: cpsr r0 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:r2 r2:<invalid> r3:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000108:
	memcpy(Mem0[r0 + 8:word32], r1, r0_14)
	word32 r2_64 = Mem0[r0 + 4:word32]
	word32 r3_65 = Mem0[r0 + 8:word32] + Mem0[r0 + 64:word32]
	Mem68[r0 + 8:word32] = r3_65
	branch r3_65 <u r2_64 l00000150
// DataOut: cpsr r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:r2 r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000150:
	Mem86[r0 + 56:word32] = r5_116 + 0x00000001
	word32 r0_85
	*r0Out = r2
	return cond(r5_116 + 0x00000001)
// DataOut: cpsr r0 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:r2 r2:<invalid> r3:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000011C:
	Mem75[r0 + 8:word32] = Mem68[r0:word32]
	Mem76[r0 + 56:word32] = r5_116 + 0x00000001
	word32 r0_74
	*r0Out = r2
	return cond(r5_116 + 0x00000001)
// DataOut: cpsr r0 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:r2 r2:<invalid> r3:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000F6:
	word32 r6_41 = Mem0[r0:word32]
	branch r6_41 == 0x00000000 l00000160
// DataOut: cpsr r0 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000160:
	word32 r0_52
	*r0Out = xTaskPriorityDisinherit(Mem0[r0 + 4:word32])
	Mem57[r0 + 4:word32] = r6_41
	r5_116 = r5_116 + 0x00000001
	Z_104 = cond(r5_116 + 0x00000001) (alias)
// DataOut: cpsr r0 r4 r5 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000FC:
	r5_116 = r5_116 + 0x00000001
	Z_104 = cond(r5_116 + 0x00000001) (alias)
// DataOut: cpsr r0 r4 r5 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000000FE:
	Mem36[r0 + 56:word32] = r5_116
	return Z_104
// DataOut: cpsr r0 r7
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r0:<invalid> r5:<invalid> r6:<invalid> r1:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

prvCopyDataToQueue_exit:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r4:r4 r0:<invalid> r5:r5 r6:r6 r2:<invalid> r3:<invalid> r1:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void prvCopyDataFromQueue(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 sp
prvCopyDataFromQueue_entry:
// DataOut: cpsr r0 r1 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000016C:
	word32 r2_4 = Mem0[r0 + 64:word32]
	branch r2_4 == 0x00000000 l0000018C
// DataOut: cpsr r0 r1 r2 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000018C:
	return
// DataOut: cpsr r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid>

l00000170:
	word32 r4_20 = Mem0[r0 + 4:word32]
	word32 r1_21 = Mem0[r0 + 12:word32] + r2_4
	Mem24[r0 + 12:word32] = r1_21
	branch r1_21 <u r4_20 l00000182
// DataOut: cpsr r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid>

l00000180_1:
	r1_21 = Mem24[r0:word32]
// DataOut: cpsr r0 r1 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r2:<invalid> r3:r1 r1:<invalid> r4:<invalid> -4(fp):r4

l00000182:
	Mem26[r0 + 12:word32] = r1_21
// DataOut: cpsr r0 r1 r2 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r2:<invalid> r3:r1 r1:<invalid> r4:<invalid> -4(fp):r4

l00000188_thunk_memcpy:
	memcpy(r1, r1_21, r2_4)
	return
// DataOut: cpsr r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:r1 r1:<invalid> r4:r4 r0:r1 -4(fp):r4

prvCopyDataFromQueue_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r1:<invalid> r4:r4 r0:r1 -4(fp):r4



void xQueueGenericSend(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r1 r10 r4 r5 r6 r7 r8 r9 sp
xQueueGenericSend_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000190:
	word32 r5_121 = 0x00000000
	word32 r9_31 = Mem0[0x000002A0:word32]
// DataOut: cpsr r10 r4 r5 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -002C(32)

l000001F8:
	word32 r0_38
	vPortEnterCritical(cpsr, out r0_38)
	branch Mem0[r0 + 56:word32] <u Mem0[r0 + 60:word32] l00000246
// DataOut: cpsr r10 r4 r5 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r6:r2 r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l00000204:
	branch r3 == 0x00000002 l00000246
// DataOut: cpsr r10 r4 r5 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r6:r2 r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l00000246:
	word32 r0_63
	prvCopyDataToQueue(r0, r1, r3, out r0_63)
	branch Mem0[r0 + 36:word32] != 0x00000000 l00000290
// DataOut: cpsr r0 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r6:r2 r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l00000290:
	xTaskRemoveFromEventList(r0 + 0x00000024)
	branch false l00000256
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r6:r2 -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l0000029C:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r6:r2 -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l00000254:
	branch r0_63 == 0x00000000 l00000266
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r6:r2 -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l00000256:
	Mem85[Mem0[0x000002A0:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r6:r2 -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l00000266:
	vPortExitCritical(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> r6:r2 -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000208:
	branch r2 == 0x00000000 l00000272
// DataOut: cpsr r10 r4 r5 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r0:<invalid> r6:r2 r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l00000272:
	vPortExitCritical(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r6:r2 r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l0000020C:
	branch r5_121 != 0x00000000 l000001A8
// DataOut: cpsr r10 r4 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r6:r2 r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l00000210:
	vTaskSetTimeOutState(fp - 40)
// DataOut: cpsr r10 r4 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r6:r2 r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l000001A8:
	vPortExitCritical(cpsr)
	vTaskSuspendAll()
	word32 r0_96
	vPortEnterCritical(cpsr, out r0_96)
	branch (word32) Mem0[r0 + 68:byte] != 0x000000FF l000001C0
// DataOut: cpsr r10 r4 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r6:r2 r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l000001BC_1:
	Mem147[r0 + 68:byte] = 0x00
// DataOut: cpsr r10 r4 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r6:r2 r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l000001C0:
	branch (word32) Mem0[r0 + 69:byte] != 0x000000FF l000001CC
// DataOut: cpsr r10 r4 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r6:r2 r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l000001C8_1:
	Mem146[r0 + 69:byte] = 0x00
// DataOut: cpsr r10 r4 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r6:r2 r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l000001CC:
	vPortExitCritical(cpsr)
	branch xTaskCheckForTimeOut(fp - 40, fp - 44, cpsr) != 0x00000000 l0000027E
// DataOut: cpsr r10 r4 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r6:r2 r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l0000027E:
	prvUnlockQueue(r0, r2, cpsr)
	xTaskResumeAll(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r6:r2 r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

xQueueGenericSend_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r10:r10 r7:r7 r8:r8 r9:r9 r2:<invalid> r3:<invalid> r6:r6 r0:<invalid> r1:<invalid> lr:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000001DC:
	word32 r0_110
	vPortEnterCritical(cpsr, out r0_110)
	branch Mem0[r0 + 56:word32] == Mem0[r0 + 60:word32] l00000218
// DataOut: cpsr r10 r4 r6 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r6:r2 r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l00000218:
	vPortExitCritical(cpsr)
	vTaskPlaceOnEventList(r0 + 0x00000010, r2)
	prvUnlockQueue(r0, r2, cpsr)
	branch xTaskResumeAll(cpsr) != 0x00000000 l000001F6
// DataOut: cpsr r10 r4 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r6:r2 r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l00000234:
	Mem133[r9_31:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr r10 r4 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r6:r2 r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l000001E8:
	vPortExitCritical(cpsr)
	prvUnlockQueue(r0, r2, cpsr)
	xTaskResumeAll(cpsr)
// DataOut: cpsr r10 r4 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r6:r2 r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l000001F6:
	r5_121 = 0x00000001
// DataOut: cpsr r10 r4 r5 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r7:r3 r8:0x00000000 r9:<invalid> r2:<invalid> r3:<invalid> r6:r2 r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)



void xQueuePeekFromISR(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
xQueuePeekFromISR_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000002A4:
	word32 r5_12 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	branch Mem0[r0 + 56:word32] != 0x00000000 l000002C6
// DataOut: cpsr r0 r1 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l000002C6:
	word32 r6_28 = Mem0[r0 + 12:word32]
	prvCopyDataFromQueue(r0, r1)
	Mem30[r0 + 12:word32] = r6_28
	__msr(cpsr, r5_12)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r3:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000002BE:
	__msr(cpsr, r5_12)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r3:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

xQueuePeekFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r3:<invalid> r0:<invalid> r4:r4 r6:r6 r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



word32 xQueueGenericReceive(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r1 r10 r4 r5 r6 r7 r8 r9 sp
xQueueGenericReceive_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000002D8:
	word32 r5_19 = 0x00000000
	word32 r8_31 = Mem0[0x00000424:word32]
// DataOut: cpsr r10 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -002C(32)

l0000030A:
	word32 r0_36
	vPortEnterCritical(cpsr, out r0_36)
	word32 r6_38 = Mem0[r0 + 56:word32]
	branch r6_38 != 0x00000000 l000003B0
// DataOut: cpsr r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l000003B0:
	word32 r5_133 = Mem0[r0 + 12:word32]
	prvCopyDataFromQueue(r0, r1)
	branch r3 != 0x00000000 l000003E8
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r2:<invalid> r0:<invalid> r3:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l000003E8:
	word32 r3_168 = Mem0[r0 + 36:word32]
	Mem169[r0 + 12:word32] = r5_133
	branch r3_168 == 0x00000000 l000003CC
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l000003F0:
	xTaskRemoveFromEventList(r0 + 0x00000024)
	branch 0x00000000 == 0x00000000 l000003CC
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l000003C0:
	word32 r3_157 = Mem0[r0:word32]
	Mem160[r0 + 56:word32] = r6_38 - 0x00000001
	branch r3_157 == 0x00000000 l0000041C
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l0000041C:
	Mem167[r0 + 4:word32] = pvTaskIncrementMutexHeldCount()
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l000003C8:
	branch Mem160[r0 + 16:word32] != 0x00000000 l0000040E
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l0000040E:
	xTaskRemoveFromEventList(r0 + 0x00000010)
	branch false l000003FC
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l000003FC:
	Mem156[Mem0[0x00000424:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l0000041A:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r1:<invalid> r0:0x00000000 r2:<invalid> r3:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l000003CC:
	vPortExitCritical(cpsr)
	return 0x00000001
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000314:
	branch r2 == 0x00000000 l000003A4
// DataOut: cpsr r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r2:<invalid> r0:<invalid> r3:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l0000031A:
	branch r5_19 == 0x00000000 l0000039C
// DataOut: cpsr r10 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:r2 r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l0000039C:
	vTaskSetTimeOutState(fp - 40)
// DataOut: cpsr r10 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:r2 r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l0000031E:
	vPortExitCritical(cpsr)
	vTaskSuspendAll()
	word32 r0_78
	vPortEnterCritical(cpsr, out r0_78)
	branch (word32) Mem0[r0 + 68:byte] != 0x000000FF l00000336
// DataOut: cpsr r10 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l00000332_1:
	Mem129[r0 + 68:byte] = 0x00
// DataOut: cpsr r10 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l00000336:
	branch (word32) Mem0[r0 + 69:byte] != 0x000000FF l00000342
// DataOut: cpsr r10 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l0000033E_1:
	Mem128[r0 + 69:byte] = 0x00
// DataOut: cpsr r10 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l00000342:
	vPortExitCritical(cpsr)
	branch xTaskCheckForTimeOut(fp - 40, fp - 44, cpsr) == 0x00000000 l000002F0
// DataOut: cpsr r10 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l000002F0:
	word32 r0_105
	vPortEnterCritical(cpsr, out r0_105)
	branch Mem0[r0 + 56:word32] == 0x00000000 l0000036A
// DataOut: cpsr r10 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l0000036A:
	vPortExitCritical(cpsr)
	branch Mem0[r0:word32] == 0x00000000 l000003D8
// DataOut: cpsr r10 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l000003D8:
	word32 r0_124
	vPortEnterCritical(cpsr, out r0_124)
	vTaskPriorityInherit(Mem0[r0 + 4:word32])
	vPortExitCritical(cpsr)
// DataOut: cpsr r10 r4 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l00000372:
	vTaskPlaceOnEventList(r0 + 0x00000024, r2)
	prvUnlockQueue(r0, r6_38, cpsr)
	branch xTaskResumeAll(cpsr) != 0x00000000 l00000308
// DataOut: cpsr r10 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l0000038A:
	Mem123[r8_31:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr r10 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l000002FA:
	vPortExitCritical(cpsr)
	prvUnlockQueue(r0, r6_38, cpsr)
	xTaskResumeAll(cpsr)
// DataOut: cpsr r10 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l00000352:
	prvUnlockQueue(r0, r6_38, cpsr)
	xTaskResumeAll(cpsr)
	word32 r0_101
	vPortEnterCritical(cpsr, out r0_101)
	branch Mem0[r0 + 56:word32] == 0x00000000 l000003A4
// DataOut: cpsr r10 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l000003A4:
	vPortExitCritical(cpsr)
	return 0x00000000
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

xQueueGenericReceive_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r10:r10 r9:r9 r7:r7 r8:r8 r6:r6 r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000364:
	vPortExitCritical(cpsr)
// DataOut: cpsr r10 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)

l00000308:
	r5_19 = 0x00000001
// DataOut: cpsr r10 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r5:<invalid> r4:r0 r10:r1 r9:r3 r7:0x00000000 r8:<invalid> r6:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -44(fp):r2 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Local -002C(32)



void uxQueueMessagesWaiting(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r4 sp
uxQueueMessagesWaiting_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000428:
	word32 r0_10
	vPortEnterCritical(cpsr, out r0_10)
	vPortExitCritical(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

uxQueueMessagesWaiting_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r0:<invalid> r2:<invalid> -8(fp):r4 -4(fp):lr



void uxQueueSpacesAvailable(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r3 r4 r5 sp
uxQueueSpacesAvailable_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000043C:
	word32 r0_14
	vPortEnterCritical(cpsr, out r0_14)
	vPortExitCritical(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

uxQueueSpacesAvailable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r0:<invalid> r4:r4 r3:r3 r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void vQueueDelete()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
vQueueDelete_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000454:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000454_thunk_vPortFree:
	vPortFree()
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

vQueueDelete_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void xQueueGenericSendFromISR(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xQueueGenericSendFromISR_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000458:
	word32 r6_16 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	branch Mem0[r0 + 56:word32] <u Mem0[r0 + 60:word32] l00000482
// DataOut: cpsr r0 r1 r2 r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000476:
	branch r3 == 0x00000002 l00000482
// DataOut: cpsr r0 r1 r2 r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000482:
	word32 r4_48 = (int32) (int8) (word32) Mem0[r0 + 69:byte]
	word32 r0_52
	branch prvCopyDataToQueue(r0, r1, r3, out r0_52) l000004A6
// DataOut: cpsr r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000004A6:
	branch Mem0[r0 + 36:word32] == 0x00000000 l0000049E
// DataOut: cpsr r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:r0 r7:r2 r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000004AC:
	xTaskRemoveFromEventList(r0 + 0x00000024)
	branch 0x00000000 == 0x00000000 l0000049E
// DataOut: cpsr r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:r0 r7:r2 r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000004B8:
	branch r2 == 0x00000000 l0000049E
// DataOut: cpsr r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:r0 r7:r2 r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000004BC:
	Mem77[r2:word32] = 0x00000001
// DataOut: cpsr r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:r0 r7:r2 r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000496:
	Mem67[r0 + 69:byte] = (byte) (int32) (int8) (r4_48 + 0x00000001)
// DataOut: cpsr r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:r0 r7:r2 r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000049E:
	__msr(cpsr, r6_16)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:r0 r7:r2 r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000047A:
// DataOut: cpsr r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000047C:
	__msr(cpsr, r6_16)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r7:r2 r2:<invalid> r3:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

xQueueGenericSendFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 r4:r4 r5:r5 r0:<invalid> r3:r3 r7:r7 r2:<invalid> r1:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



void xQueueGiveFromISR(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 sp
xQueueGiveFromISR_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000004C4:
	word32 r4_12 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r2_16 = Mem0[r0 + 56:word32]
	branch r2_16 >=u Mem0[r0 + 60:word32] l00000500
// DataOut: cpsr r0 r1 r2 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000500:
	__msr(cpsr, r4_12)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l000004E2:
	word32 r3_32 = (int32) (int8) (word32) Mem0[r0 + 69:byte]
	Mem33[r0 + 56:word32] = r2_16 + 0x00000001
	branch r2_16 == 0x00000001 l00000508
// DataOut: cpsr r0 r1 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00000508:
	branch Mem33[r0 + 36:word32] == 0x00000000 l000004F8
// DataOut: cpsr r0 r1 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000050E:
	xTaskRemoveFromEventList(r0 + 0x00000024)
	branch 0x00000000 == 0x00000000 l000004F8
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000051A:
	branch r1 == 0x00000000 l000004F8
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r5:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000051E:
	Mem63[r1:word32] = 0x00000001
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r5:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l000004F0:
	Mem50[r0 + 69:byte] = (byte) (int32) (int8) (r3_32 + 0x00000001)
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l000004F8:
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r5:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l000004FA:
	__msr(cpsr, r4_12)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> r0:0x00000001 r5:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

xQueueGiveFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:r3 r2:<invalid> r0:<invalid> r5:r5 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void xQueueReceiveFromISR(word32 r0, word32 r1, word32 r2, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
xQueueReceiveFromISR_entry:
// DataOut: cpsr r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000524:
	word32 r6_16 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r4_20 = Mem0[r0 + 56:word32]
	branch r4_20 != 0x00000000 l0000054A
// DataOut: cpsr r0 r1 r2 r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000054A:
	word32 r5_49 = (int32) (int8) (word32) Mem0[r0 + 68:byte]
	prvCopyDataFromQueue(r0, r1)
	Mem55[r0 + 56:word32] = r4_20 - 0x00000001
	branch r4_20 == 0x00000001 l00000572
// DataOut: cpsr r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000572:
	branch Mem55[r0 + 16:word32] == 0x00000000 l00000568
// DataOut: cpsr r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r7:r0 r5:<invalid> r8:r2 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000578:
	xTaskRemoveFromEventList(r0 + 0x00000010)
	branch 0x00000000 == 0x00000000 l00000568
// DataOut: cpsr r6 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r7:r0 r5:<invalid> r8:r2 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000584:
	branch r2 == 0x00000000 l00000568
// DataOut: cpsr r6 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r7:r0 r5:<invalid> r8:r2 r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000058A:
	Mem79[r2:word32] = 0x00000001
// DataOut: cpsr r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r7:r0 r5:<invalid> r8:r2 r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000560:
	Mem69[r0 + 68:byte] = (byte) (int32) (int8) (r5_49 + 0x00000001)
// DataOut: cpsr r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r7:r0 r5:<invalid> r8:r2 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000568:
	__msr(cpsr, r6_16)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r7:r0 r5:<invalid> r8:r2 r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000540:
// DataOut: cpsr r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000542:
	__msr(cpsr, r6_16)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:<invalid> r4:<invalid> r0:<invalid> r7:r0 r5:<invalid> r8:r2 r3:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

xQueueReceiveFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 r4:r4 r0:<invalid> r5:r5 r7:r7 r8:r8 r3:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void xQueueIsQueueEmptyFromISR(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0
// Preserved: sp
xQueueIsQueueEmptyFromISR_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000594:
	__clz(Mem0[r0 + 56:word32])
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

xQueueIsQueueEmptyFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void xQueueIsQueueFullFromISR(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
xQueueIsQueueFullFromISR_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l000005A0:
	__clz(Mem0[r0 + 60:word32] - Mem0[r0 + 56:word32])
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

xQueueIsQueueFullFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void uxQueueMessagesWaitingFromISR(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
uxQueueMessagesWaitingFromISR_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l000005B0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

uxQueueMessagesWaitingFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void xQueueGetMutexHolder(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: r4 sp
xQueueGetMutexHolder_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000005B4:
	word32 r0_10
	vPortEnterCritical(cpsr, out r0_10)
	branch Mem0[r0:word32] != 0x00000000 l000005CA
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l000005CA:
	vPortExitCritical(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r3:<invalid> r2:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr

l000005C0:
	vPortExitCritical(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r3:<invalid> r2:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr

xQueueGetMutexHolder_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r0:<invalid> r2:<invalid> -8(fp):r4 -4(fp):lr



void xQueueTakeMutexRecursive(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
xQueueTakeMutexRecursive_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000005D4:
	branch Mem0[r0 + 4:word32] == xTaskGetCurrentTaskHandle() l000005FA
// DataOut: cpsr r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l000005FA:
	Mem49[r0 + 12:word32] = Mem0[r0 + 12:word32] + 0x00000001
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r4:r0 r6:r1 r3:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000005E4:
	branch xQueueGenericReceive(r0, 0x00000000, r1, 0x00000000, cpsr) == 0x00000000 l000005F8
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r4:r0 r6:r1 r3:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000005F2:
	Mem44[r0 + 12:word32] = Mem0[r0 + 12:word32] + 0x00000001
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r4:r0 r6:r1 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000005F8:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r4:r0 r6:r1 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

xQueueTakeMutexRecursive_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r6:r6 r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void xQueueGiveMutexRecursive(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: r3 r4 r5 sp
xQueueGiveMutexRecursive_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000604:
	branch Mem0[r0 + 4:word32] == xTaskGetCurrentTaskHandle() l00000616
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000616:
	word32 r3_33 = Mem0[r0 + 12:word32]
	Mem36[r0 + 12:word32] = r3_33 - 0x00000001
	branch r3_33 == 0x00000001 l00000622
// DataOut: cpsr r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r4:r0 r3:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00000622:
	xQueueGenericSend(r0, r3_33 - 0x00000001, r3_33 - 0x00000001, r3_33 - 0x00000001, cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r4:r0 r3:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000061E:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r4:r0 r3:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00000612:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:<invalid> r4:r0 r3:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

xQueueGiveMutexRecursive_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> r1:<invalid> lr:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void xQueueGenericReset(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
xQueueGenericReset_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000630:
	word32 r0_17
	vPortEnterCritical(cpsr, out r0_17)
	word32 r3_21 = Mem0[r0 + 64:word32]
	word32 r2_24 = Mem0[r0 + 60:word32] * r3_21
	word32 r0_23 = Mem0[r0:word32]
	Mem29[r0 + 56:word32] = 0x00000000
	Mem30[r0 + 4:word32] = r2_24 + r0_23
	Mem31[r0 + 68:byte] = 0xFF
	Mem32[r0 + 12:word32] = r2_24 - r3_21 + r0_23
	Mem33[r0 + 8:word32] = r0_23
	Mem34[r0 + 69:byte] = 0xFF
	branch r1 != 0x00000000 l00000690
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000690:
	vListInitialise(r0 + 0x00000010)
	vListInitialise(r0 + 0x00000024)
	vPortExitCritical(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r5:0x000000FF r1:0x00000000 r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000660:
	branch Mem34[r0 + 16:word32] != 0x00000000 l0000066C
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r5:0x000000FF r1:0x00000000 r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000066C:
	xTaskRemoveFromEventList(r0 + 0x00000010)
	branch 0x00000000 == 0x00000000 l00000664
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r5:0x000000FF r1:0x00000000 r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000678:
	Mem57[Mem34[0x000006A8:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	vPortExitCritical(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r5:0x000000FF r1:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000664:
	vPortExitCritical(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r5:0x000000FF r1:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

xQueueGenericReset_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r6:r6 r5:r5 r1:<invalid> r3:<invalid> r2:<invalid> r0:0x00000001 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



word32 xQueueGenericCreate(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
xQueueGenericCreate_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000006AC:
	word32 r0_19 = pvPortMalloc(r0 * r1 + 0x00000048, cpsr)
	branch r0_19 == 0x00000000 l000006D4
// DataOut: cpsr r0 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l000006C0:
	branch r1 == 0x00000000 l000006D8
// DataOut: cpsr r0 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r0 r0:<invalid> r5:r1 r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000006D8:
	Mem36[r0_19:word32] = r0_19
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r0 r0:<invalid> r5:r1 r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000006C2:
	Mem35[r0_19:word32] = r0_19 + 0x00000048
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r0 r0:<invalid> r5:r1 r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000006C8:
	Mem30[r0_19 + 60:word32] = r0
	Mem31[r0_19 + 64:word32] = r1
	xQueueGenericReset(r0_19, 0x00000001, cpsr)
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r0 r0:<invalid> r5:r1 r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000006D4:
	return r0_19
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r0 r0:<invalid> r5:r1 r4:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

xQueueGenericCreate_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 r0:<invalid> r5:r5 r4:r4 r3:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void xQueueCreateMutex(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r4 sp
xQueueCreateMutex_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000006DC:
	word32 r0_12 = xQueueGenericCreate(0x00000001, 0x00000000, cpsr)
	branch r0_12 == 0x00000000 l000006FC
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l000006EC:
	Mem22[r0_12 + 4:word32] = 0x00000000
	Mem23[r0_12:word32] = 0x00000000
	Mem24[r0_12 + 12:word32] = 0x00000000
	xQueueGenericSend(r0_12, 0x00000000, 0x00000000, 0x00000000, cpsr)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r3:<invalid> -8(fp):r4 -4(fp):lr

l000006FC:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r3:<invalid> lr:<invalid> -8(fp):r4 -4(fp):lr

xQueueCreateMutex_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r1:<invalid> r0:<invalid> r4:r4 r3:<invalid> lr:<invalid> -8(fp):r4 -4(fp):lr



void prvInitialiseNewTask(word32 r0, word32 r1, word32 r2, word32 r3, word32 dwArg00, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: fp r10 r3 r4 r5 r6 r7 r8 r9 sp
// Stack args: Stack +0000(32) Stack +0004(32) Stack +0008(32) Stack +000C(32)
prvInitialiseNewTask_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32) Stack +0004(32) Stack +0008(32) Stack +000C(32)

l00000700:
	word32 r3_38 = r1 - 0x00000001 + 1
	word32 r5_40 = Mem0[dwArg08 + 80:word32] + (r2 + 0x3FFFFFFF << 0x00000002) & ~0x00000007
	word32 r0_43 = dwArg08 + 0x00000054
	word32 r2_44 = dwArg00 & ~0x80000000
// DataOut: cpsr fp r0 r1 r10 r2 r3 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Stack +0004(32) Stack +000C(32)

l0000072E:
	Mem51[r0_43:byte] = (byte) (word32) Mem0[r3_38 + 0:byte]
	r3_38 = r3_38 + 1
	r0_43 = r0_43 + 1
	branch (word32) Mem51[r3_38:byte] == 0x00000000 l0000073E
// DataOut: cpsr fp r0 r1 r10 r2 r3 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r4:<invalid> r9:r3 r5:<invalid> r3:<invalid> fp:r2 r2:<invalid> r8:r0 r10:<invalid> r1:r1 + 0x00000002 r0:<invalid> r6:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr
// LocalsOut: Stack +0004(32) Stack +000C(32)

l0000073A:
	branch r3_38 != r1 + 0x00000002 l0000072E
// DataOut: cpsr fp r0 r1 r10 r2 r3 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r4:<invalid> r9:r3 r5:<invalid> r3:<invalid> fp:r2 r2:<invalid> r8:r0 r10:<invalid> r1:r1 + 0x00000002 r0:<invalid> r6:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr
// LocalsOut: Stack +0004(32) Stack +000C(32)

l0000073E:
	branch r2_44 <u 0x00000001 l00000744
// DataOut: cpsr fp r10 r2 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r4:<invalid> r9:r3 r5:<invalid> r3:<invalid> fp:r2 r2:<invalid> r8:r0 r10:<invalid> r1:r1 + 0x00000002 r0:<invalid> r6:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr
// LocalsOut: Stack +0004(32) Stack +000C(32)

l00000742_1:
	r2_44 = 0x00000001
// DataOut: cpsr fp r10 r2 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r4:<invalid> r9:r3 r5:<invalid> r3:<invalid> fp:r2 r2:<invalid> r8:r0 r10:<invalid> r1:r1 + 0x00000002 r0:<invalid> r6:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr
// LocalsOut: Stack +0004(32) Stack +000C(32)

l00000744:
	Mem61[dwArg08 + 76:word32] = r2_44
	Mem62[dwArg08 + 88:word32] = r2_44
	Mem64[dwArg08 + 86:byte] = 0x00
	Mem65[dwArg08 + 92:word32] = 0x00000000
	vListInitialiseItem(dwArg08 + 0x00000024)
	vListInitialiseItem(dwArg08 + 0x00000038)
	Mem68[dwArg08 + 56:word32] = 0x00000002 - r2_44
	word32 r2_69 = Mem68[dwArg08 + 80:word32]
	Mem74[dwArg08 + 48:word32] = dwArg08
	Mem75[dwArg08 + 68:word32] = dwArg08
	vPortStoreTaskMPUSettings(dwArg08 + 0x00000004, dwArg0C, r2_69, r2)
	Mem76[dwArg08 + 96:word32] = 0x00000000
	Mem78[dwArg08 + 100:byte] = 0x00
	Mem85[dwArg08:word32] = pxPortInitialiseStack(r5_40, r0, r3, dwArg00 >> 0x0000001F)
	branch dwArg04 == 0x00000000 l00000792
// DataOut: cpsr r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r4:<invalid> r9:r3 r5:<invalid> r3:<invalid> fp:r2 r2:<invalid> r8:r0 r10:<invalid> r1:r1 + 0x00000002 r0:<invalid> r6:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00000790:
	Mem96[dwArg04:word32] = dwArg08
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r4:<invalid> r9:r3 r5:<invalid> r3:<invalid> fp:r2 r2:<invalid> r8:r0 r10:<invalid> r1:<invalid> r0:<invalid> r6:0x00000000 r7:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00000792:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r4:<invalid> r9:r3 r5:<invalid> r3:<invalid> fp:r2 r2:<invalid> r8:r0 r10:<invalid> r1:<invalid> r0:<invalid> r6:0x00000000 r7:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

prvInitialiseNewTask_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r9:r9 r5:r5 r3:r3 fp:fp r2:<invalid> r8:r8 r10:r10 r1:<invalid> r0:<invalid> r6:r6 r7:r7 -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr



void prvAddNewTaskToReadyList(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
prvAddNewTaskToReadyList_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000798:
	word32 r0_29
	word32 r4_16 = Mem0[0x00000854:word32]
	word32 r0_20
	vPortEnterCritical(cpsr, out r0_20)
	Mem24[r4_16:word32] = Mem0[r4_16:word32] + 0x00000001
	branch Mem24[r4_16 + 4:word32] == 0x00000000 l00000812
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000812:
	Mem79[r4_16 + 4:word32] = r0
	branch Mem79[r4_16:word32] != 0x00000001 l000007B4
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000081A:
	vListInitialise(r4_16 + 0x00000008)
	vListInitialise(r4_16 + 0x0000001C)
	vListInitialise(r4_16 + 0x00000030)
	vListInitialise(r4_16 + 0x00000044)
	vListInitialise(r4_16 + 0x00000058)
	Mem91[r4_16 + 108:word32] = r4_16 + 0x00000030
	r0_29 = Mem91[r0 + 76:word32]
	Mem93[r4_16 + 112:word32] = r4_16 + 0x00000044
// DataOut: cpsr r0 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000007B0:
	branch Mem24[r4_16 + 116:word32] == 0x00000000 l00000800
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000800:
	r0_29 = Mem24[r0 + 76:word32]
	branch Mem24[Mem24[r4_16 + 4:word32] + 76:word32] >u r0_29 l00000810
// DataOut: cpsr r0 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000080E_1:
	Mem78[r4_16 + 4:word32] = r0
// DataOut: cpsr r0 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r0:<invalid> r6:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000810:
// DataOut: cpsr r0 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r0:<invalid> r6:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000007B4:
	r0_29 = Mem24[r0 + 76:word32]
// DataOut: cpsr r0 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000007BA:
	word32 r2_35 = Mem24[r4_16 + 120:word32]
	Mem43[r4_16 + 124:word32] = 0x00000001 << r0_29 | Mem24[r4_16 + 124:word32]
	Mem44[r4_16 + 120:word32] = r2_35 + 0x00000001
	vListInsertEnd(r4_16 + 0x00000008 + r0_29 * 0x00000014, r0 + 0x00000024)
	vPortExitCritical(cpsr)
	branch Mem44[r4_16 + 116:word32] == 0x00000000 l000007FC
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r0:<invalid> r6:<invalid> r1:0xFFFFFFFF r2:<invalid> r8:<invalid> r7:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000007E2:
	branch Mem44[Mem44[r4_16 + 4:word32] + 76:word32] >=u Mem44[r0 + 76:word32] l000007FC
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r0:<invalid> r6:<invalid> r1:r0 + 0x00000024 r2:<invalid> r8:<invalid> r7:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000007EC:
	Mem64[Mem44[0x00000858:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r0:<invalid> r6:<invalid> r1:r0 + 0x00000024 r2:<invalid> r8:<invalid> r7:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000007FC:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r0 r3:<invalid> r0:<invalid> r6:<invalid> r1:r0 + 0x00000024 r2:<invalid> r8:<invalid> r7:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

prvAddNewTaskToReadyList_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r5:r5 r3:<invalid> r0:<invalid> r6:r6 r1:r0 + 0x00000024 r2:<invalid> r8:r8 r7:r7 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void prvAddCurrentTaskToDelayedList.isra.0(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 sp
prvAddCurrentTaskToDelayedList.isra.0_entry:
// DataOut: cpsr r0 r10 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000085C:
	word32 r4_12 = Mem0[0x000008B0:word32]
	word32 r6_15 = Mem0[r4_12 + 128:word32]
	branch uxListRemove(Mem0[r4_12 + 4:word32] + 0x00000024) != 0x00000000 l00000880
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000870:
	Mem78[r4_12 + 124:word32] = Mem0[r4_12 + 124:word32] & ~((0x00000001 << Mem0[Mem0[r4_12 + 4:word32] + 76:word32]) << 0x00000000)
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:r0 r6:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> r1:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000880:
	word32 r5_26 = r0 + r6_15
	Mem30[Mem0[r4_12 + 4:word32] + 36:word32] = r5_26
	branch r6_15 >u r5_26 l000008A2
// DataOut: cpsr r10 r4 r5 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:r0 r6:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r3:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000008A2:
	word32 r0_57 = Mem30[r4_12 + 112:word32]
	word32 r1_58 = Mem30[r4_12 + 4:word32]
// DataOut: cpsr r0 r1 r10 r7 r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r3:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000008AC_thunk_vListInsert:
	vListInsert(r0_57, r1_58 + 0x00000024)
	return
// DataOut: cpsr r10 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r5:r5 r6:r6 r0:<invalid> r2:<invalid> r1:<invalid> r3:<invalid> lr:lr -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000088A:
	vListInsert(Mem30[r4_12 + 108:word32], Mem30[r4_12 + 4:word32] + 0x00000024)
	branch r5_26 >=u Mem30[r4_12 + 132:word32] l000008A0
// DataOut: cpsr r10 r4 r5 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r3:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000089C_1:
	Mem56[r4_12 + 132:word32] = r5_26
// DataOut: cpsr r10 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r3:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000008A0:
	return
// DataOut: cpsr r10 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r3:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

prvAddCurrentTaskToDelayedList.isra.0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r5:r5 r6:r6 r0:<invalid> r2:<invalid> r1:<invalid> r3:<invalid> lr:lr -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



word32 xTaskCreate(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, word32 dwArg00, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r1 r10 r2 r3 r4 r5 r6 r7 r8 r9 sp
// Stack args: Stack +0000(32) Stack +0004(32)
xTaskCreate_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32) Stack +0004(32)

l000008B4:
	word32 r0_31 = pvPortMalloc(r2 << 2, cpsr)
	branch r0_31 == 0x00000000 l00000904
// DataOut: cpsr r0 r10 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32) Stack +0004(32)

l00000904:
	return 0xFFFFFFFF
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r8:r0 r0:<invalid> r6:r2 r9:r1 r10:r3 r3:<invalid> r2:<invalid> r1:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000008CA:
	word32 r0_59
	word32 r0_50 = pvPortMalloc(0x00000068, cpsr)
	branch r0_50 == 0x00000000 l0000090E
// DataOut: cpsr r0 r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r8:r0 r0:<invalid> r6:r2 r9:r1 r10:r3 r3:<invalid> r2:<invalid> r1:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32) Stack +0000(32) Stack +0004(32)

l0000090E:
	vPortFree()
	r0_59 = 0xFFFFFFFF
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r8:r0 r0:<invalid> r6:r2 r9:r1 r10:r3 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l000008D6:
	Mem70[r0_50 + 80:word32] = r0_31
	Mem73[r0_50 + 101:byte] = 0x00
	prvInitialiseNewTask(r0, r1, r2, r3, dwArg00, dwArg04, r0_50, 0x00000000)
	prvAddNewTaskToReadyList(r0_50, cpsr)
	r0_59 = 0x00000001
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r8:r0 r0:<invalid> r6:r2 r9:r1 r10:r3 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l000008FE:
	return r0_59
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 48 r8:r0 r0:<invalid> r6:r2 r9:r1 r10:r3 r5:<invalid> r4:<invalid> r7:0x00000000 r3:<invalid> r2:<invalid> r1:<invalid> -48(fp):<invalid> -44(fp):<invalid> -40(fp):<invalid> -36(fp):0x00000000 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

xTaskCreate_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 r0:<invalid> r6:r6 r9:r9 r10:r10 r4:r4 r5:r5 r7:r7 r3:<invalid> r2:<invalid> r1:<invalid> -48(fp):<invalid> -44(fp):<invalid> -40(fp):<invalid> -36(fp):0x00000000 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr



void xTaskCreateRestricted(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 sp
xTaskCreateRestricted_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000091C:
	branch Mem0[r0 + 20:word32] == 0x00000000 l0000096A
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000096A:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00000920:
	word32 r0_41 = pvPortMalloc(0x00000068, cpsr)
	branch r0_41 == 0x00000000 l00000964
// DataOut: cpsr r0 r4 r5 r7
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>
// LocalsOut: fp(32)

l00000964:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r3:<invalid> r4:r0 r0:<invalid> r7:r1 r5:<invalid> r2:<invalid> r1:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l00000932:
	word32 r1_59 = Mem0[r0 + 20:word32]
	Mem60[r0_41 + 101:byte] = 0x01
	word32 r3_61 = Mem60[r0 + 12:word32]
	word32 r2_62 = (word32) Mem60[r0 + 16:word16]
	word32 lr_63 = Mem60[r0 + 16:word32]
	Mem64[r0_41 + 80:word32] = r1_59
	prvInitialiseNewTask(Mem64[r0:word32], Mem64[r0 + 4:word32], r2_62, r3_61, lr_63, r1, r0_41, r0 + 24)
	prvAddNewTaskToReadyList(r0_41, cpsr)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r3:<invalid> r4:r0 r0:<invalid> r7:r1 r5:<invalid> r2:<invalid> r1:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l00000960:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r3:<invalid> r4:<invalid> r0:<invalid> r7:r1 r5:<invalid> r6:0x00000001 r1:<invalid> r2:<invalid> lr:<invalid> -40(fp):<invalid> -36(fp):r1 -32(fp):<invalid> -28(fp):<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

xTaskCreateRestricted_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid> r4:r4 r7:r7 r5:r5 r6:r6 r1:<invalid> r2:<invalid> lr:<invalid> -40(fp):<invalid> -36(fp):r1 -32(fp):<invalid> -28(fp):<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



void vTaskAllocateMPURegions(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
vTaskAllocateMPURegions_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000970:
	branch r0 == 0x00000000 l0000097C
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000097C:
	word32 r0_14 = Mem0[Mem0[0x0000098C:word32] + 4:word32]
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000986_thunk_vPortStoreTaskMPUSettings:
	vPortStoreTaskMPUSettings(r0_14 + 0x00000004, r1, 0x00000000, 0x00000000)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000000 r0:<invalid> r2:0x00000000

l00000972:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000978_thunk_vPortStoreTaskMPUSettings:
	vPortStoreTaskMPUSettings(r0 + 0x00000004, r1, 0x00000000, 0x00000000)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000000 r0:r0 + 0x00000004 r2:0x00000000

vTaskAllocateMPURegions_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid>



void vTaskStartScheduler(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 sp
vTaskStartScheduler_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000990:
	word32 r4_9 = Mem0[0x000009E0:word32]
	word32 r0_19 = xTaskCreate(Mem0[0x000009E8:word32], Mem0[0x000009E4:word32], 0x0000003B, 0x00000000, cpsr, 0x80000000, r4_9 + 0x00000088)
	branch r0_19 == 0x00000001 l000009B6
// DataOut: cpsr r0 r4
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000009B6:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	Mem33[r4_9 + 132:word32] = 0xFFFFFFFF
	Mem34[r4_9 + 116:word32] = r0_19
	Mem35[r4_9 + 128:word32] = 0x00000000
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -16(fp):0x80000000 -12(fp):<invalid> -8(fp):r4 -4(fp):lr

l000009DC_thunk_xPortStartScheduler:
	xPortStartScheduler(cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000000 r4:r4 r2:0xFFFFFFFF r1:<invalid> r0:<invalid> lr:lr -16(fp):0x80000000 -12(fp):<invalid> -8(fp):r4 -4(fp):lr

l000009B2:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -16(fp):0x80000000 -12(fp):<invalid> -8(fp):r4 -4(fp):lr

vTaskStartScheduler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r2:<invalid> r1:<invalid> r0:<invalid> lr:lr -16(fp):0x80000000 -12(fp):<invalid> -8(fp):r4 -4(fp):lr



void vTaskEndScheduler(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
vTaskEndScheduler_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l000009EC:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	Mem7[Mem0[0x00000A08:word32] + 116:word32] = 0x00000000
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A02_thunk_vPortEndScheduler:
	vPortEndScheduler()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:0x00000000

vTaskEndScheduler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:0x00000000



bool vTaskSuspendAll()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: C
// Trashed: NZCV r2 r3
// Preserved: sp
vTaskSuspendAll_entry:
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A0C:
	word32 r2_3 = Mem0[0x00000A1C:word32]
	word32 r3_4 = Mem0[r2_3 + 140:word32]
	Mem8[r2_3 + 140:word32] = r3_4 + 0x00000001
	return (bool) cond(r3_4 + 0x00000001)
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): C
// SymbolicIn: sp:fp

vTaskSuspendAll_exit:
// DataOut:
// DataOut (flags): C
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>



void xTaskGetTickCount()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
xTaskGetTickCount_entry:
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A20:
	return
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp

xTaskGetTickCount_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void xTaskGetTickCountFromISR()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
xTaskGetTickCountFromISR_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A2C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

xTaskGetTickCountFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void uxTaskGetNumberOfTasks()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
uxTaskGetNumberOfTasks_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A38:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

uxTaskGetNumberOfTasks_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void pcTaskGetName(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: sp
pcTaskGetName_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A44:
	branch r0 == 0x00000000 l00000A4A
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A4A:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A46:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

pcTaskGetName_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r3:<invalid>



void xTaskGenericNotify(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xTaskGenericNotify_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000A58:
	word32 r0_23
	vPortEnterCritical(cpsr, out r0_23)
	branch r3 == 0x00000000 l00000A6C
// DataOut: cpsr r0 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000A68:
	Mem139[r3:word32] = Mem0[r0 + 96:word32]
// DataOut: cpsr r0 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:r3 r6:r0 r7:r1 r5:r2 r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000A6C:
	word32 r4_27 = (word32) Mem0[r0 + 100:byte]
	Mem29[r0 + 100:byte] = 0x02
	word32 r4_130 = (uint32) (byte) r4_27
	branch r2 >u 0x00000004 || r2 <u 0x00000001 l00000A8C
// DataOut: cpsr r0 r2 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:r3 r6:r0 r7:r1 r5:r2 r3:<invalid> r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000A7E:
	switch (r2 - 0x00000001) { l00000AF2 l00000A96 l00000A86 l00000A82 }
// DataOut: cpsr r0 r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r1 r5:r2 r3:0x00000002 r2:r2 - 0x00000001 r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000A82:
	r4_130 = r0_23 << 8
// DataOut: cpsr r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r1 r5:r2 r3:0x00000002 r2:r2 - 0x00000001 r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000A86:
	branch r4_130 == 0x00000002 l00000AFE
// DataOut: cpsr r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r1 r5:r2 r3:0x00000002 r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000AFE:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r1 r5:r2 r3:0x00000002 r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000A8A:
	Mem133[r0 + 96:word32] = r1
// DataOut: cpsr r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r1 r5:r2 r3:0x00000002 r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000A8C:
	branch r4_130 == 0x00000001 l00000AA6
// DataOut: cpsr r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r1 r5:r2 r3:0x00000002 r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000AA6:
	word32 r5_106 = Mem29[0x00000B04:word32]
	uxListRemove(r0 + 0x00000024)
	word32 r0_109 = Mem29[r0 + 76:word32]
	Mem117[r5_106 + 124:word32] = r4_130 << r0_109 | Mem29[r5_106 + 124:word32] << 0x00000000
	vListInsertEnd(r5_106 + 0x00000008 + r0_109 * 0x00000014, r0 + 0x00000024)
	branch Mem117[r0 + 76:word32] <=u Mem117[Mem117[r5_106 + 4:word32] + 76:word32] l00000A90
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r1 r5:r2 r3:0x00000002 r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000ADE:
	Mem125[Mem117[0x00000B08:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	vPortExitCritical(cpsr)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:r0 + 0x00000024 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:r0 + 0x00000024 lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000A90:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:<invalid> r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:r0 + 0x00000024 lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000A92:
	vPortExitCritical(cpsr)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:<invalid> r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:r0 + 0x00000024 lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000A96:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:<invalid> r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:r0 + 0x00000024 lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00000AF2:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r6:r0 r7:<invalid> r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:r0 + 0x00000024 lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

xTaskGenericNotify_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r6:r6 r7:r7 r5:r5 r3:r3 r2:<invalid> r0:<invalid> r1:r0 + 0x00000024 lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



void xTaskGenericNotifyFromISR(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
// Stack args: Stack +0000(32)
xTaskGenericNotifyFromISR_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00000B0C:
	word32 r5_16 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	branch r3 == 0x00000000 l00000B2A
// DataOut: cpsr r0 r1 r2 r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Stack +0000(32)

l00000B26:
	Mem146[r3:word32] = Mem0[r0 + 96:word32]
// DataOut: cpsr r0 r1 r2 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:0x000000BF -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B2A:
	word32 r4_22 = (word32) Mem0[r0 + 100:byte]
	Mem25[r0 + 100:byte] = 0x02
	word32 r4_137 = (uint32) (byte) r4_22
	branch r2 >u 0x00000004 || r2 <u 0x00000001 l00000B4A
// DataOut: cpsr r0 r1 r2 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B3C:
	switch (r2 - 0x00000001) { l00000B90 l00000B54 l00000B44 l00000B40 }
// DataOut: cpsr r0 r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:0x00000002 r2:r2 - 0x00000001 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B40:
	r4_137 = r0 << 8
// DataOut: cpsr r0 r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:0x00000002 r2:r2 - 0x00000001 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B44:
	branch r4_137 == 0x00000002 l00000BC4
// DataOut: cpsr r0 r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:0x00000002 r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000BC4:
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:0x00000002 r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000B48:
	Mem140[r0 + 96:word32] = r1
// DataOut: cpsr r0 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:0x00000002 r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B4A:
	branch r4_137 == 0x00000001 l00000B64
// DataOut: cpsr r0 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:0x00000002 r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B64:
	word32 r6_101 = Mem25[0x00000BD0:word32]
	branch Mem25[r6_101 + 140:word32] == 0x00000000 l00000B9C
// DataOut: cpsr r0 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:0x00000002 r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B9C:
	uxListRemove(r0 + 0x00000024)
	word32 r0_124 = Mem25[r0 + 76:word32]
	Mem133[r6_101 + 124:word32] = r4_137 << r0_124 | Mem25[r6_101 + 124:word32]
	vListInsertEnd(r6_101 + 0x00000008 + r0_124 * 0x00000014, r0 + 0x00000024)
// DataOut: cpsr r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:r0 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B6E:
	vListInsertEnd(r6_101 + 0x00000058, r0 + 0x00000038)
// DataOut: cpsr r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:r0 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B7A:
	branch Mem25[r0 + 76:word32] <=u Mem25[Mem25[r6_101 + 4:word32] + 76:word32] l00000B4E
// DataOut: cpsr r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:r0 r1:<invalid> r0:<invalid> r8:r0 + 0x00000024 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00000B84:
	branch dwArg00 == 0x00000000 l00000BC8
// DataOut: cpsr r3 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:r0 r1:<invalid> r0:<invalid> r8:r0 + 0x00000024 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000BC8:
	Mem118[r6_101 + 144:word32] = 0x00000001
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:r0 r1:<invalid> r0:0x00000001 r8:r0 + 0x00000024 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000B8A:
	Mem117[dwArg00:word32] = 0x00000001
	__msr(cpsr, r5_16)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:r0 r1:<invalid> r0:0x00000001 r8:r0 + 0x00000024 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000B4E:
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:r0 r1:<invalid> r0:<invalid> r8:r0 + 0x00000024 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000B50:
	__msr(cpsr, r5_16)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r6:<invalid> r7:r0 r1:<invalid> r8:r0 + 0x00000024 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000B54:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r6:<invalid> r7:r0 r1:<invalid> r8:r0 + 0x00000024 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000B90:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r6:<invalid> r7:r0 r1:<invalid> r0:0x00000001 r8:r0 + 0x00000024 -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

xTaskGenericNotifyFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r3:<invalid> r2:<invalid> r6:r6 r7:r7 r8:r8 r0:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void xTaskNotifyWait(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
xTaskNotifyWait_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000BD4:
	word32 r4_16 = Mem0[0x00000C58:word32]
	word32 r0_26
	vPortEnterCritical(cpsr, out r0_26)
	branch (word32) Mem0[Mem0[r4_16 + 4:word32] + 100:byte] == 0x00000002 l00000C04
// DataOut: cpsr r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000BF0:
	word32 r1_65 = Mem0[r4_16 + 4:word32]
	Mem68[r1_65 + 96:word32] = Mem0[r1_65 + 96:word32] & ~(r0 << 0x00000000)
	Mem70[Mem68[r4_16 + 4:word32] + 100:byte] = 0x01
	branch r3 != 0x00000000 l00000C3C
// DataOut: cpsr r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r2 r8:r0 r6:r1 r7:r3 r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000C3C:
	prvAddCurrentTaskToDelayedList.isra.0(r3)
	Mem74[Mem70[0x00000C5C:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r2 r8:r0 r6:r1 r7:r3 r2:<invalid> r0:0x00000001 r1:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000C04:
	vPortExitCritical(cpsr)
	word32 r0_36
	vPortEnterCritical(cpsr, out r0_36)
	branch r2 == 0x00000000 l00000C14
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r2 r8:r0 r6:r1 r7:r3 r2:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000C0E:
	Mem63[r2:word32] = Mem0[Mem0[r4_16 + 4:word32] + 96:word32]
// DataOut: cpsr r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r2 r8:r0 r6:r1 r7:r3 r2:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000C14:
	branch (word32) Mem0[Mem0[r4_16 + 4:word32] + 100:byte] == 0x00000001 l00000C54
// DataOut: cpsr r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r2 r8:r0 r6:r1 r7:r3 r2:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000C54:
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r2 r8:r0 r6:r1 r7:r3 r2:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000C1E:
	word32 r3_56 = Mem0[r4_16 + 4:word32]
	Mem59[r3_56 + 96:word32] = Mem0[r3_56 + 96:word32] & ~(r1 << 0x00000000)
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:r2 r8:r0 r6:r1 r7:r3 r2:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000C2A:
	Mem46[Mem0[r4_16 + 4:word32] + 100:byte] = 0x00
	vPortExitCritical(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:<invalid> r8:r0 r6:r1 r7:r3 r2:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

xTaskNotifyWait_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r5:r5 r8:r8 r6:r6 r7:r7 r2:<invalid> r0:<invalid> r1:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void vTaskNotifyGiveFromISR(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 r8 r9 sp
vTaskNotifyGiveFromISR_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000C60:
	word32 r6_20 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r5_25 = (word32) Mem0[r0 + 100:byte]
	Mem26[r0 + 100:byte] = 0x02
	Mem32[r0 + 96:word32] = Mem26[r0 + 96:word32] + 0x00000001
	word32 r5_28 = (uint32) (byte) r5_25
	branch r5_28 == 0x00000001 l00000C96
// DataOut: cpsr r0 r1 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000C96:
	word32 r7_67 = Mem32[0x00000CFC:word32]
	branch Mem32[r7_67 + 140:word32] == 0x00000000 l00000CCC
// DataOut: cpsr r0 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:<invalid> r5:<invalid> -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00000CCC:
	uxListRemove(r0 + 0x00000024)
	word32 r0_99 = Mem32[r0 + 76:word32]
	Mem108[r7_67 + 124:word32] = r5_28 << r0_99 | Mem32[r7_67 + 124:word32]
	vListInsertEnd(r7_67 + 0x00000008 + r0_99 * 0x00000014, r0 + 0x00000024)
// DataOut: cpsr r4 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:<invalid> r5:<invalid> r7:<invalid> r8:r1 r4:r0 -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00000CA2:
	vListInsertEnd(r7_67 + 0x00000058, r0 + 0x00000038)
// DataOut: cpsr r4 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:<invalid> r5:<invalid> r7:<invalid> r8:r1 r4:r0 -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00000CAE:
	branch Mem32[r0 + 76:word32] <=u Mem32[Mem32[r7_67 + 4:word32] + 76:word32] l00000C8E
// DataOut: cpsr r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:<invalid> r5:<invalid> r7:<invalid> r8:r1 r4:r0 r1:<invalid> r0:<invalid> r2:<invalid> r9:r0 + 0x00000024 -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00000CB8:
	branch r1 == 0x00000000 l00000CF4
// DataOut: cpsr r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:<invalid> r5:<invalid> r7:<invalid> r8:r1 r4:r0 r1:<invalid> r0:<invalid> r2:<invalid> r9:r0 + 0x00000024 -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00000CF4:
	Mem93[r7_67 + 144:word32] = 0x00000001
// DataOut: cpsr r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:0x00000001 r5:<invalid> r7:<invalid> r8:r1 r4:r0 r1:<invalid> r0:<invalid> r2:<invalid> r9:r0 + 0x00000024 -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00000CC0:
	Mem84[r1:word32] = 0x00000001
	__msr(cpsr, r6_20)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:0x00000001 r5:<invalid> r7:<invalid> r8:r1 r4:r0 r1:<invalid> r0:<invalid> r2:<invalid> r9:r0 + 0x00000024 -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

l00000C8E:
	__msr(cpsr, r6_20)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r3:<invalid> r5:<invalid> r7:<invalid> r8:r1 r4:r0 r1:<invalid> r0:<invalid> r2:<invalid> r9:r0 + 0x00000024 -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

vTaskNotifyGiveFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 r3:r3 r5:r5 r4:r4 r7:r7 r8:r8 r9:r9 r1:<invalid> r0:<invalid> r2:<invalid> -32(fp):r3 -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr



void ulTaskNotifyTake(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
ulTaskNotifyTake_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000D00:
	word32 r4_12 = Mem0[0x00000D64:word32]
	word32 r0_18
	vPortEnterCritical(cpsr, out r0_18)
	branch Mem0[Mem0[r4_12 + 4:word32] + 96:word32] != 0x00000000 l00000D1C
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000D12:
	Mem46[Mem0[r4_12 + 4:word32] + 100:byte] = 0x01
	branch r1 != 0x00000000 l00000D4A
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r6:r0 r5:r1 r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000D4A:
	prvAddCurrentTaskToDelayedList.isra.0(r1)
	Mem50[Mem46[0x00000D68:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r6:r0 r5:r1 r3:<invalid> r2:0x00000001 r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000D1C:
	vPortExitCritical(cpsr)
	word32 r0_25
	vPortEnterCritical(cpsr, out r0_25)
	word32 r5_28 = Mem0[Mem0[r4_12 + 4:word32] + 96:word32]
	branch r5_28 == 0x00000000 l00000D32
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r6:r0 r5:r1 r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000D2A:
	branch r0 != 0x00000000 l00000D42
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r6:r0 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000D42:
	Mem43[Mem0[r4_12 + 4:word32] + 96:word32] = 0x00000000
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r6:r0 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000D2C:
	Mem40[Mem0[r4_12 + 4:word32] + 96:word32] = r5_28 - 0x00000001
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r6:r0 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00000D32:
	Mem31[Mem0[r4_12 + 4:word32] + 100:byte] = 0x00
	vPortExitCritical(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r6:r0 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

ulTaskNotifyTake_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r6:r6 r5:r5 r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



word32 xTaskIncrementTick()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r10 r4 r5 r6 r7 r8 r9 sp
xTaskIncrementTick_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000D6C:
	word32 r6_122
	word32 r4_20 = Mem0[0x00000E64:word32]
	branch Mem0[r4_20 + 140:word32] != 0x00000000 l00000E38
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000E38:
	Mem157[r4_20 + 152:word32] = Mem0[r4_20 + 152:word32] + 0x00000001
	r6_122 = 0x00000000
// DataOut: cpsr r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000D7A:
	word32 r7_49 = Mem0[r4_20 + 128:word32]
	Mem52[r4_20 + 128:word32] = r7_49 + 0x00000001
	branch r7_49 != 0x00000001 l00000DA8
// DataOut: cpsr r4 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000D86:
	word32 r3_131 = Mem52[r4_20 + 108:word32]
	Mem133[r4_20 + 108:word32] = Mem52[r4_20 + 112:word32]
	Mem134[r4_20 + 112:word32] = r3_131
	Mem137[r4_20 + 148:word32] = Mem134[r4_20 + 148:word32] + 0x00000001
	branch Mem137[Mem137[r4_20 + 108:word32]:word32] != 0x00000000 l00000E46
// DataOut: cpsr r4 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000E46:
	Mem149[r4_20 + 132:word32] = Mem137[Mem137[Mem137[Mem137[r4_20 + 108:word32] + 12:word32] + 12:word32] + 36:word32]
	r6_122 = 0x00000000
	branch r7_49 + 0x00000001 <u Mem149[r4_20 + 132:word32] l00000E14
// DataOut: cpsr r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r2:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000E5C:
// DataOut: cpsr r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r2:<invalid> r6:0x00000000 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000DA0:
	Mem143[r4_20 + 132:word32] = 0xFFFFFFFF
// DataOut: cpsr r4 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r2:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000DA8:
	r6_122 = 0x00000000
	branch r7_49 + 0x00000001 <u Mem52[r4_20 + 132:word32] l00000E14
// DataOut: cpsr r4 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r2:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000DB2:
	r6_122 = 0x00000000
	word32 r8_79 = Mem52[0x00000E68:word32]
// DataOut: cpsr r4 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:0x00000000 r2:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000E04:
	branch Mem52[Mem52[r4_20 + 108:word32]:word32] != 0x00000000 l00000DBC
// DataOut: cpsr r4 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> r9:0x00000001 r8:<invalid> r2:<invalid> r5:<invalid> r10:<invalid> r0:<invalid> r1:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000DBC:
	word32 r5_99 = Mem52[Mem52[Mem52[r4_20 + 108:word32] + 12:word32] + 12:word32]
	word32 r3_100 = Mem52[r5_99 + 36:word32]
	branch r7_49 + 0x00000001 <u r3_100 l00000E5E
// DataOut: cpsr r10 r3 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> r9:0x00000001 r8:<invalid> r2:<invalid> r5:<invalid> r10:<invalid> r0:<invalid> r1:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000E5E:
	Mem124[r4_20 + 132:word32] = r3_100
// DataOut: cpsr r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> r9:0x00000001 r8:<invalid> r5:<invalid> r10:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000DCC:
	uxListRemove(r5_99 + 0x00000024)
	branch Mem52[r5_99 + 72:word32] == 0x00000000 l00000DDE
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> r9:0x00000001 r8:<invalid> r5:<invalid> r10:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000DDA:
	uxListRemove(r5_99 + 0x00000038)
// DataOut: cpsr r10 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> r9:0x00000001 r8:<invalid> r5:<invalid> r10:<invalid> r0:<invalid> r2:<invalid> r1:0x00000000 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000DDE:
	word32 r0_108 = Mem52[r5_99 + 76:word32]
	Mem116[r4_20 + 124:word32] = 0x00000001 << r0_108 | Mem52[r4_20 + 124:word32]
	vListInsertEnd(r8_79 + r0_108 * 0x00000014, r5_99 + 0x00000024)
	branch Mem116[r5_99 + 76:word32] <u Mem116[Mem116[r4_20 + 4:word32] + 76:word32] l00000E04
// DataOut: cpsr r4 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> r9:0x00000001 r8:<invalid> r5:<invalid> r10:<invalid> r0:<invalid> r2:<invalid> r1:0x00000000 -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000E02_1:
	r6_122 = 0x00000001
// DataOut: cpsr r4 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> r9:0x00000001 r8:<invalid> r5:<invalid> r10:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000E0C:
	Mem96[r4_20 + 132:word32] = 0xFFFFFFFF
// DataOut: cpsr r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> r9:0x00000001 r8:<invalid> r2:<invalid> r5:<invalid> r10:<invalid> r0:<invalid> r1:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000E14:
	branch Mem52[r4_20 + Mem52[Mem52[r4_20 + 4:word32] + 76:word32] * 0x00000014 + 8:word32] <u 0x00000002 l00000E28
// DataOut: cpsr r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> r2:<invalid> r9:0x00000001 r8:<invalid> r5:<invalid> r10:<invalid> r0:<invalid> r1:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000E26_1:
	r6_122 = 0x00000001
// DataOut: cpsr r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> r2:<invalid> r9:0x00000001 r8:<invalid> r5:<invalid> r10:<invalid> r0:<invalid> r1:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000E28:
	branch Mem0[r4_20 + 144:word32] == 0x00000000 l00000E32
// DataOut: cpsr r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r6:<invalid> r7:<invalid> r2:<invalid> r9:0x00000001 r8:<invalid> r5:<invalid> r10:<invalid> r0:<invalid> r1:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000E30_1:
	r6_122 = 0x00000001
// DataOut: cpsr r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r6:<invalid> r7:<invalid> r2:<invalid> r9:0x00000001 r8:<invalid> r5:<invalid> r10:<invalid> r0:<invalid> r1:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l00000E32:
	return r6_122
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r4:<invalid> r3:<invalid> r6:<invalid> r7:<invalid> r2:<invalid> r9:0x00000001 r8:<invalid> r5:<invalid> r10:<invalid> r0:<invalid> r1:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

xTaskIncrementTick_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r6:r6 r0:<invalid> r5:r5 r7:r7 r8:r8 r9:r9 r10:r10 r2:<invalid> r1:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr



word32 xTaskResumeAll(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
xTaskResumeAll_entry:
// DataOut: cpsr r10 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000E6C:
	word32 r4_16 = Mem0[0x00000F40:word32]
	word32 r0_18
	vPortEnterCritical(cpsr, out r0_18)
	Mem22[r4_16 + 140:word32] = Mem0[r4_16 + 140:word32] - 0x00000001
	word32 r5_113 = Mem22[r4_16 + 140:word32]
	branch r5_113 != 0x00000000 l00000F26
// DataOut: cpsr r10 r4 r5 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000E88:
	branch Mem22[r4_16:word32] == 0x00000000 l00000F26
// DataOut: cpsr r10 r4 r5 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000E8E:
// DataOut: cpsr r10 r4 r5 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000ED4:
	branch Mem22[r4_16 + 88:word32] != 0x00000000 l00000E96
// DataOut: cpsr r10 r4 r5 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r6:0x00000001 r7:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000E96:
	r5_113 = Mem22[Mem22[r4_16 + 100:word32] + 12:word32]
	uxListRemove(r5_113 + 0x00000038)
	uxListRemove(r5_113 + 0x00000024)
	word32 r0_119 = Mem22[r5_113 + 76:word32]
	Mem127[r4_16 + 124:word32] = 0x00000001 << r0_119 | Mem22[r4_16 + 124:word32]
	vListInsertEnd(r4_16 + 0x00000008 + r0_119 * 0x00000014, r5_113 + 0x00000024)
	branch Mem127[r5_113 + 76:word32] <u Mem127[Mem127[r4_16 + 4:word32] + 76:word32] l00000ED4
// DataOut: cpsr r10 r4 r5 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r6:0x00000001 r7:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000ED0_1:
	Mem133[r4_16 + 144:word32] = 0x00000001
// DataOut: cpsr r10 r4 r5 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r6:0x00000001 r7:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000EDA:
	branch r5_113 == 0x00000000 l00000EEA
// DataOut: cpsr r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r6:0x00000001 r7:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000EDC:
	branch Mem22[Mem22[r4_16 + 108:word32]:word32] != 0x00000000 l00000F32
// DataOut: cpsr r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r6:0x00000001 r7:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000F32:
	Mem111[r4_16 + 132:word32] = Mem22[Mem22[Mem22[Mem22[r4_16 + 108:word32] + 12:word32] + 12:word32] + 36:word32]
// DataOut: cpsr r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r6:0x00000001 r7:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000EE2:
	Mem106[r4_16 + 132:word32] = 0xFFFFFFFF
// DataOut: cpsr r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r6:0x00000001 r7:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000EEA:
	word32 r5_74 = Mem22[r4_16 + 152:word32]
	branch r5_74 == 0x00000000 l00000F04
// DataOut: cpsr r10 r4 r5 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r6:0x00000001 r7:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000EF0:
// DataOut: cpsr r10 r4 r5 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r6:0x00000001 r7:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000EF2:
	branch xTaskIncrementTick() == 0x00000000 l00000EFC
// DataOut: cpsr r10 r4 r5 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r6:0x00000001 r7:<invalid> r0:<invalid> r2:<invalid> r8:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000EF8:
	Mem102[r4_16 + 144:word32] = 0x00000001
// DataOut: cpsr r10 r4 r5 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r6:0x00000001 r7:<invalid> r0:<invalid> r2:<invalid> r8:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000EFC:
	r5_74 = r5_74 - 0x00000001
	branch r5_74 != 0x00000000 l00000EF2
// DataOut: cpsr r10 r4 r5 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r6:0x00000001 r7:<invalid> r0:<invalid> r2:<invalid> r8:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000F00:
	Mem101[r4_16 + 152:word32] = r5_74
// DataOut: cpsr r10 r4 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r6:0x00000001 r7:<invalid> r0:<invalid> r2:<invalid> r8:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000F04:
	branch Mem22[r4_16 + 144:word32] == 0x00000000 l00000F26
// DataOut: cpsr r10 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r6:0x00000001 r7:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000F26:
	vPortExitCritical(cpsr)
	return 0x00000000
// DataOut: cpsr r0 r10 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> r6:0x00000001 r7:<invalid> r8:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00000F0A:
	Mem83[Mem22[0x00000F44:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	vPortExitCritical(cpsr)
	return 0x00000001
// DataOut: cpsr r0 r10 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r5:<invalid> r6:0x00000001 r7:<invalid> r8:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

xTaskResumeAll_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r5:r5 r0:<invalid> r6:r6 r7:r7 r8:r8 r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void vTaskDelay(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 sp
vTaskDelay_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000F48:
	branch r0 != 0x00000000 l00000F5E
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000F5E:
	word32 r2_25 = Mem0[0x00000F7C:word32]
	Mem29[r2_25 + 140:word32] = Mem0[r2_25 + 140:word32] + 0x00000001
	prvAddCurrentTaskToDelayedList.isra.0(r0)
	branch xTaskResumeAll(cpsr) == 0x00000000 l00000F4C
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 -8(fp):r3 -4(fp):lr

l00000F76:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> -8(fp):r3 -4(fp):lr

l00000F4C:
	Mem22[Mem0[0x00000F78:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> -8(fp):r3 -4(fp):lr

vTaskDelay_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:r3 r0:<invalid> r1:<invalid> -8(fp):r3 -4(fp):lr



void vTaskDelayUntil(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 sp
vTaskDelayUntil_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000F80:
	word32 r2_3 = Mem0[0x00000FD4:word32]
	word32 r3_11 = Mem0[r0:word32]
	Mem13[r2_3 + 140:word32] = Mem0[r2_3 + 140:word32] + 0x00000001
	word32 r2_14 = Mem13[r2_3 + 128:word32]
	word32 r1_16 = r1 + r3_11
	branch r2_14 >=u r3_11 l00000FB8
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000FB8:
	branch r3_11 >u r1_16 l00000FC0
// DataOut: cpsr r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l00000F9A:
	branch r3_11 >u r1_16 l00000FBC
// DataOut: cpsr r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l00000FBC:
	branch r2_14 >=u r1_16 l00000F9E
// DataOut: cpsr r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l00000FC0:
	Mem54[r0:word32] = r1_16
	prvAddCurrentTaskToDelayedList.isra.0(r1_16 - r2_14)
	branch xTaskResumeAll(cpsr) == 0x00000000 l00000FA6
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l00000F9E:
	Mem48[r0:word32] = r1_16
	branch xTaskResumeAll(cpsr) != 0x00000000 l00000FD0
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l00000FD0:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr

l00000FA6:
	Mem35[Mem13[0x00000FD8:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr

vTaskDelayUntil_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r4:r4 r3:<invalid> r1:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr



void vTaskPlaceOnEventList(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 sp
vTaskPlaceOnEventList_entry:
// DataOut: cpsr r0 r1 r10 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000FDC:
	vListInsert(r0, Mem0[Mem0[0x00000FF4:word32] + 4:word32] + 0x00000038)
// DataOut: cpsr r0 r10 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00000FF0_thunk_prvAddCurrentTaskToDelayedList.isra.0:
	prvAddCurrentTaskToDelayedList.isra.0(r1)
	return
// DataOut: cpsr r10 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r1:<invalid> r0:r1 lr:lr r2:<invalid> -8(fp):r4 -4(fp):lr

vTaskPlaceOnEventList_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r1:<invalid> r0:<invalid> lr:lr r2:<invalid> -8(fp):r4 -4(fp):lr



void vTaskPlaceOnUnorderedEventList(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r3 r4 r5 sp
vTaskPlaceOnUnorderedEventList_entry:
// DataOut: cpsr r0 r1 r2 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00000FF8:
	word32 r3_14 = Mem0[0x00001018:word32]
	word32 r3_18 = Mem0[r3_14 + 4:word32]
	Mem19[Mem0[r3_14 + 4:word32] + 56:word32] = r1 | 0x80000000
	vListInsertEnd(r0, r3_18 + 0x00000038)
// DataOut: cpsr r0 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001016_thunk_prvAddCurrentTaskToDelayedList.isra.0:
	prvAddCurrentTaskToDelayedList.isra.0(r2)
	return
// DataOut: cpsr r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:r3 r1:<invalid> r5:r5 r0:r2 lr:lr r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

vTaskPlaceOnUnorderedEventList_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r1:<invalid> r5:r5 r0:<invalid> lr:lr r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void xTaskRemoveFromEventList(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xTaskRemoveFromEventList_entry:
// DataOut: cpsr r0 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000101C:
	word32 r0_26
	word32 r4_18 = Mem0[0x0000107C:word32]
	word32 r5_19 = Mem0[Mem0[r0 + 12:word32] + 12:word32]
	uxListRemove(r5_19 + 0x00000038)
	branch Mem0[r4_18 + 140:word32] != 0x00000000 l00001070
// DataOut: cpsr r10 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001070:
	vListInsertEnd(r4_18 + 0x00000058, r5_19 + 0x00000038)
	r0_26 = r4_18 + 0x00000058
// DataOut: cpsr r0 r10 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r2:<invalid> r1:0x00000000 -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001034:
	uxListRemove(r5_19 + 0x00000024)
	word32 r0_48 = Mem0[r5_19 + 76:word32]
	Mem57[r4_18 + 124:word32] = 0x00000001 << r0_48 | Mem0[r4_18 + 124:word32]
	r0_26 = r4_18 + 0x00000008 + r0_48 * 0x00000014
	vListInsertEnd(r0_26, r5_19 + 0x00000024)
// DataOut: cpsr r0 r10 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r2:<invalid> r1:0x00000000 -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000105C:
	branch Mem0[r5_19 + 76:word32] <=u Mem0[Mem0[r4_18 + 4:word32] + 76:word32] l00001068
// DataOut: cpsr r0 r10 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r7:<invalid> r2:<invalid> r1:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001066_1:
	r0_26 = 0x00000001
// DataOut: cpsr r0 r10 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r7:<invalid> r2:<invalid> r1:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001068:
	Mem35[r4_18 + 144:word32] = r0_26
	return
// DataOut: cpsr r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r7:<invalid> r2:<invalid> r1:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

xTaskRemoveFromEventList_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 r4:r4 r5:r5 r6:r6 r0:0x00000000 r7:r7 r2:<invalid> r1:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



void xTaskRemoveFromUnorderedEventList(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xTaskRemoveFromUnorderedEventList_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001080:
	word32 r6_18 = Mem0[r0 + 12:word32]
	Mem21[r0:word32] = r1 | 0x80000000
	uxListRemove(r0)
	word32 r4_24 = Mem21[0x000010D4:word32]
	uxListRemove(r6_18 + 0x00000024)
	word32 r3_27 = Mem21[r6_18 + 76:word32]
	Mem35[r4_24 + 124:word32] = 0x00000001 << r3_27 | Mem21[r4_24 + 124:word32] << 0x00000000
	vListInsertEnd(r4_24 + 0x00000008 + r3_27 * 0x00000014, r6_18 + 0x00000024)
	branch Mem35[r6_18 + 76:word32] <=u Mem35[Mem35[r4_24 + 4:word32] + 76:word32] l000010CA
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l000010C8_1:
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:0x00000001 r6:<invalid> r1:<invalid> r7:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> lr:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000010CA:
	Mem41[r4_24 + 144:word32] = 0x00000001
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:0x00000001 r6:<invalid> r1:<invalid> r7:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> lr:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

xTaskRemoveFromUnorderedEventList_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r1:<invalid> r7:r7 r4:r4 r0:0x00000000 r3:r3 lr:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



void vTaskSwitchContext()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
vTaskSwitchContext_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l000010D8:
	word32 r2_3 = Mem0[0x0000111C:word32]
	word32 r3_4 = Mem0[r2_3 + 140:word32]
	branch r3_4 != 0x00000000 l00001112
// DataOut: cpsr r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001112:
	Mem33[r2_3 + 144:word32] = 0x00000001
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

l000010E0:
	word32 r1_27
	Mem11[r2_3 + 144:word32] = r3_4
	word32 r0_18 = r2_3 + (0x0000001F - (uint32) ((byte) __clz(Mem11[r2_3 + 124:word32]))) * 0x00000014
	word32 r1_22 = Mem11[Mem11[r0_18 + 12:word32] + 4:word32]
	Mem26[r0_18 + 12:word32] = r1_22
	r1_27 = r1_22
	branch r1_22 != r0_18 + 0x00000010 l00001108
// DataOut: cpsr r0 r1 r2
// DataOut (flags): Z
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

l00001106_1:
	r1_27 = Mem26[r1_22 + 4:word32]
// DataOut: cpsr r0 r1 r2
// DataOut (flags): Z
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid>

l00001108:
	word32 r3_28 = Mem26[r1_27 + 12:word32]
	branch r1_22 != r0_18 + 0x00000010 l0000110E
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid>

l0000110C_1:
	Mem30[r0_18 + 12:word32] = r1_27
// DataOut: cpsr r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid>

l0000110E:
	Mem29[r2_3 + 4:word32] = r3_28
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid>

vTaskSwitchContext_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid>



word32 uxTaskResetEventItemValue()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r0
// Trashed: r0 r1 r2 r3
// Preserved: sp
uxTaskResetEventItemValue_entry:
// DataOut: cpsr r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001120:
	word32 r3_3 = Mem0[0x00001134:word32]
	word32 r0_7 = Mem0[Mem0[r3_3 + 4:word32] + 56:word32]
	Mem10[Mem0[r3_3 + 4:word32] + 56:word32] = 0x00000002 - Mem0[Mem0[r3_3 + 4:word32] + 76:word32]
	return r0_7
// DataOut: cpsr r0 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp

uxTaskResetEventItemValue_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid> r2:<invalid> r0:<invalid>



word32 xTaskGetCurrentTaskHandle()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r0
// Trashed: r0 r3
// Preserved: sp
xTaskGetCurrentTaskHandle_entry:
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001138:
	return Mem0[Mem0[0x00001140:word32] + 4:word32]
// DataOut: cpsr r0 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

xTaskGetCurrentTaskHandle_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void vTaskSetTimeOutState(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
vTaskSetTimeOutState_entry:
// DataOut: cpsr r0 r10 r4 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001144:
	word32 r3_3 = Mem0[0x00001154:word32]
	word32 r3_5 = Mem0[r3_3 + 128:word32]
	Mem6[r0:word32] = Mem0[r3_3 + 148:word32]
	Mem8[r0 + 4:word32] = r3_5
	return
// DataOut: cpsr r10 r4 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

vTaskSetTimeOutState_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>



word32 xTaskCheckForTimeOut(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
xTaskCheckForTimeOut_entry:
// DataOut: cpsr r0 r1 r10 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001158:
	word32 r0_16
	vPortEnterCritical(cpsr, out r0_16)
	word32 r3_19 = Mem0[0x000011A8:word32]
	word32 r5_21 = Mem0[r3_19 + 128:word32]
	word32 r0_23 = Mem0[r0 + 4:word32]
	branch Mem0[r0:word32] == Mem0[r3_19 + 148:word32] l00001178
// DataOut: cpsr r0 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001174:
	branch r5_21 >=u r0_23 l0000119C
// DataOut: cpsr r0 r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r3:<invalid> r1:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00001178:
	word32 r2_48 = Mem0[r1:word32]
	branch r5_21 - r0_23 >=u r2_48 l0000119C
// DataOut: cpsr r0 r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r3:<invalid> r1:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000119C:
	vPortExitCritical(cpsr)
	return 0x00000001
// DataOut: cpsr r0 r10 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r3:<invalid> r1:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00001180:
	word32 r1_54 = Mem0[r3_19 + 148:word32]
	word32 r3_55 = Mem0[r3_19 + 128:word32]
	Mem58[r1:word32] = r2_48 - r5_21 + r0_23
	Mem59[r0:word32] = r1_54
	Mem60[r0 + 4:word32] = r3_55
	vPortExitCritical(cpsr)
	return 0x00000000
// DataOut: cpsr r0 r10 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r6:r1 r3:<invalid> r1:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

xTaskCheckForTimeOut_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r6:r6 r3:<invalid> r1:<invalid> r5:r5 r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void vTaskMissedYield()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
vTaskMissedYield_entry:
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000011AC:
	Mem5[Mem0[0x000011B8:word32] + 144:word32] = 0x00000001
	return
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

vTaskMissedYield_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:0x00000001 r3:<invalid>



void vTaskPriorityInherit(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r3 r4 r5 r6 r7 sp
vTaskPriorityInherit_entry:
// DataOut: cpsr r0 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000011BC:
	branch r0 == 0x00000000 l00001246
// DataOut: cpsr r0 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001246:
	return
// DataOut: cpsr r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000011C0:
	word32 r4_40 = Mem0[0x00001248:word32]
	word32 r3_41 = Mem0[r0 + 76:word32]
	branch r3_41 >=u Mem0[Mem0[r4_40 + 4:word32] + 76:word32] l000011F4
// DataOut: cpsr r0 r10 r3 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000011CE:
	branch Mem0[r0 + 56:word32] < 0x00000000 l000011DE
// DataOut: cpsr r0 r10 r3 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000011D4:
	Mem106[r0 + 56:word32] = 0x00000002 - Mem0[Mem0[r4_40 + 4:word32] + 76:word32]
// DataOut: cpsr r0 r10 r3 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000011DE:
	word32 r5_62 = Mem0[0x0000124C:word32]
	branch Mem0[r0 + 52:word32] == r5_62 + r3_41 * 0x00000014 l000011F6
// DataOut: cpsr r0 r10 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000011F6:
	branch uxListRemove(r0 + 0x00000024) != 0x00000000 l00001220
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> r5:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001204:
	word32 r2_94 = Mem0[r0 + 76:word32]
	branch Mem0[r4_40 + r2_94 * 0x00000014 + 8:word32] != 0x00000000 l00001220
// DataOut: cpsr r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> r5:<invalid> r7:r0 + 0x00000024 r6:r0 r0:<invalid> r1:0x00000000 -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001212:
	Mem102[r4_40 + 124:word32] = Mem0[r4_40 + 124:word32] & ~((0x00000001 << r2_94) << 0x00000000)
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> r5:<invalid> r7:r0 + 0x00000024 r6:r0 r0:<invalid> r1:0x00000000 -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001220:
	word32 r2_78 = Mem0[Mem0[r4_40 + 4:word32] + 76:word32]
	word32 r3_82 = 0x00000001 << r2_78 | Mem0[r4_40 + 124:word32] << 0x00000000
	Mem84[r0 + 76:word32] = r2_78
	Mem86[r4_40 + 124:word32] = r3_82
	word32 r0_85 = r5_62 + r2_78 * 0x00000014
// DataOut: cpsr r0 r1 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> r5:<invalid> r7:r0 + 0x00000024 r6:r0 r0:<invalid> r1:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001242_thunk_vListInsertEnd:
	vListInsertEnd(r0_85, r0 + 0x00000024)
	return
// DataOut: cpsr r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:r3 r2:<invalid> r5:r5 r7:r7 r6:r6 r0:<invalid> r1:r0 + 0x00000024 lr:lr -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000011EE:
	Mem70[r0 + 76:word32] = Mem0[Mem0[r4_40 + 4:word32] + 76:word32]
// DataOut: cpsr r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> r5:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000011F4:
	return
// DataOut: cpsr r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r3:<invalid> r2:<invalid> r5:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

vTaskPriorityInherit_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r2:<invalid> r5:r5 r6:r6 r7:r7 r0:<invalid> r1:r0 + 0x00000024 lr:lr -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



word32 xTaskPriorityDisinherit(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut: r0
// Trashed: NZCV lr r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xTaskPriorityDisinherit_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001250:
	branch r0 == 0x00000000 l000012C8
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000012C8:
	return 0x00000000
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001254:
	word32 r1_37 = Mem0[r0 + 76:word32]
	word32 r3_38 = Mem0[r0 + 92:word32]
	word32 r2_39 = Mem0[r0 + 88:word32]
	Mem43[r0 + 92:word32] = r3_38 - 0x00000001
	branch r1_37 == r2_39 l00001266
// DataOut: cpsr r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001264:
	branch r3_38 == 0x00000001 l0000126A
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r1:<invalid> r3:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000126A:
	word32 r2_55
	branch uxListRemove(r0 + 0x00000024) != 0x00000000 l00001298
// DataOut: cpsr r4 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r1:<invalid> r3:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001298:
	r2_55 = Mem43[0x000012CC:word32]
// DataOut: cpsr r2 r4 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r1:0x00000000 r3:<invalid> r2:<invalid> r7:r0 + 0x00000024 r4:r0 r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001278:
	word32 r1_76 = Mem43[r0 + 76:word32]
	r2_55 = Mem43[0x000012CC:word32]
	branch Mem43[r2_55 + r1_76 * 0x00000014 + 8:word32] != 0x00000000 l0000129A
// DataOut: cpsr r1 r2 r4 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r1:0x00000000 r3:<invalid> r2:<invalid> r7:r0 + 0x00000024 r4:r0 r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001288:
	Mem85[r2_55 + 124:word32] = Mem43[r2_55 + 124:word32] & ~((0x00000001 << r1_76) << 0x00000000)
// DataOut: cpsr r2 r4 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r1:<invalid> r3:<invalid> r2:<invalid> r7:r0 + 0x00000024 r4:r0 r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000129A:
	word32 r3_57 = Mem43[r0 + 88:word32]
	word32 lr_58 = Mem43[r2_55 + 124:word32]
	word32 r0_59 = Mem43[0x000012D0:word32]
	Mem62[r0 + 76:word32] = r3_57
	Mem67[r0 + 56:word32] = 0x00000002 - r3_57
	Mem68[r2_55 + 124:word32] = 0x00000001 << r3_57 | lr_58 << 0x00000000
	vListInsertEnd(r0_59 + r3_57 * 0x00000014, r0 + 0x00000024)
	return 0x00000001
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r1:<invalid> r3:<invalid> r2:<invalid> r7:r0 + 0x00000024 r4:r0 r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00001266:
	return 0x00000000
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r1:<invalid> r3:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

xTaskPriorityDisinherit_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r3:r3 r2:<invalid> r4:r4 r5:r5 r6:r6 r7:r7 lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



word32 pvTaskIncrementMutexHeldCount()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
pvTaskIncrementMutexHeldCount_entry:
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l000012D4:
	word32 r3_3 = Mem0[0x000012E8:word32]
	branch Mem0[r3_3 + 4:word32] == 0x00000000 l000012E2
// DataOut: cpsr r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l000012DA:
	word32 r1_11 = Mem0[r3_3 + 4:word32]
	Mem15[r1_11 + 92:word32] = Mem0[r1_11 + 92:word32] + 0x00000001
// DataOut: cpsr r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l000012E2:
	return Mem0[r3_3 + 4:word32]
// DataOut: cpsr r0 r4
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r1:<invalid>

pvTaskIncrementMutexHeldCount_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid>



void prvRestoreContextOfFirstTask(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
prvRestoreContextOfFirstTask_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l000012F0:
	__msr(cpsr, Mem0[Mem0[Mem0[0x00001724:word32]:word32]:word32])
	word32 r1_8 = Mem0[Mem0[0x00001330:word32]:word32]
	word32 r0_9 = Mem0[r1_8:word32]
	word32 r2_11 = Mem0[0x00001728:word32]
	word32 r5_13 = Mem0[r1_8 + 0x00000008:word32]
	word32 r6_14 = Mem0[r1_8 + 0x0000000C:word32]
	word32 r7_15 = Mem0[r1_8 + 0x00000010:word32]
	word32 r8_16 = Mem0[r1_8 + 0x00000014:word32]
	word32 r9_17 = Mem0[r1_8 + 0x00000018:word32]
	word32 r10_18 = Mem0[r1_8 + 0x0000001C:word32]
	word32 fp_19 = Mem0[r1_8 + 0x00000020:word32]
	Mem21[r2_11:word32] = Mem0[r1_8 + 0x00000004:word32]
	Mem22[r2_11 + 4:word32] = r5_13
	Mem23[r2_11 + 8:word32] = r6_14
	Mem24[r2_11 + 12:word32] = r7_15
	Mem25[r2_11 + 16:word32] = r8_16
	Mem26[r2_11 + 20:word32] = r9_17
	Mem27[r2_11 + 24:word32] = r10_18
	Mem28[r2_11 + 28:word32] = fp_19
	__msr(cpsr, Mem28[r0_9:word32])
	__msr(cpsr, r0_9 + 36)
	__msr(cpsr, 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

prvRestoreContextOfFirstTask_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000000 r3:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> fp:<invalid> lr:~0x00000002



void prvSVCHandler(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
prvSVCHandler_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001334:
	word32 r3_5 = (word32) Mem0[Mem0[r0 + 24:word32] - 2:byte]
	branch r3_5 == 0x00000001 l00001360
// DataOut: cpsr r3
// DataOut (flags): C
// SymbolicIn: sp:fp

l00001360:
	Mem27[Mem0[0x00001378:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l0000133E:
	branch r3_5 <u 0x00000001 l00001354
// DataOut: cpsr r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00001354:
	word32 r2_21 = Mem0[0x00001374:word32]
	Mem24[r2_21:word32] = Mem0[r2_21:word32] | 0xBE000000
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l0000135E_thunk_prvRestoreContextOfFirstTask:
	prvRestoreContextOfFirstTask(cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l00001340:
	branch r3_5 != 0x00000002 l00001352
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00001352:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00001344:
	__msr(cpsr, __mrs(cpsr) & ~0x00000001)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

prvSVCHandler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r1:<invalid> r0:0x00000000 r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> fp:<invalid> lr:<invalid>



word32 pxPortInitialiseStack(word32 r0, word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2 r3
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 sp
pxPortInitialiseStack_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000137C:
	word32 r3_10
	r3_10 = r3
	branch r3 != 0x00000001 l00001384
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00001382_1:
	r3_10 = 0x00000002
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): Z
// SymbolicIn: sp:fp - 8 -8(fp):r4 -4(fp):r5

l00001384:
	branch r3 == 0x00000001 l00001390
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:0x00000002 -8(fp):r4 -4(fp):r5

l0000138E_1:
	r3_10 = 0x00000003
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:0x00000002 r5:0x01000000 r4:0x00000000 -8(fp):r4 -4(fp):r5

l00001390:
	Mem15[r0 - 32:word32] = r2
	Mem20[r0 + -8:word32] = r1 & ~0x00000001
	Mem21[r0 + -4:word32] = 0x01000000
	Mem22[r0 - 12:word32] = 0x00000000
	Mem23[r0 - 68:word32] = r3_10
	return r0 - 0x00000044
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r5:0x01000000 r4:0x00000000 -8(fp):r4 -4(fp):r5

pxPortInitialiseStack_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r5:r5 r4:r4 r1:r1 & ~0x00000001 r2:r0 - 0x00000044 r0:r0 - 0x00000044 -8(fp):r4 -4(fp):r5



void xPortStartScheduler(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
xPortStartScheduler_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000013B0:
	word32 r3_3 = Mem0[0x000014E8:word32]
	word32 r1_12 = Mem0[0x000014EC:word32]
	Mem14[r3_3:word32] = Mem0[r3_3:word32] | 0x00FF0000
	Mem17[r3_3:word32] = Mem14[r3_3:word32] | 0xFF000000
	branch Mem17[r1_12:word32] == 0x00000800 l00001400
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001400:
	word32 r2_148
	word32 r0_42 = Mem17[0x000014FC:word32]
	word32 r1_45 = Mem17[0x00001500:word32] - r0_42
	Mem49[Mem17[0x00001504:word32]:word32] = r0_42 | 0x00000010
	branch r1_45 <=u 0x00000020 l000014DE
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l000014DE:
	r2_148 = Mem49[0x00001548:word32]
// DataOut: cpsr r0 r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l00001412:
	word32 r3_139 = 0x00000040
	word32 r2_140 = 0x00000005
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l0000141E:
	r3_139 = r3_139 << 0x00000001
	branch r1_45 >u r3_139 l00001418
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l00001418:
	r2_140 = r2_140 + 0x00000001
	branch r2_140 == 0x0000001F l000014CE
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l000014CE:
	r2_148 = Mem49[0x00001538:word32]
// DataOut: cpsr r0 r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l00001426:
	r2_148 = Mem49[0x00001508:word32] | r2_140 << 0x00000001
// DataOut: cpsr r0 r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l0000142C:
	word32 r2_133
	word32 r1_54 = Mem49[0x0000150C:word32] - r0_42
	word32 r3_55 = Mem49[0x00001504:word32]
	Mem59[Mem49[0x00001510:word32]:word32] = r2_148
	Mem60[r3_55:word32] = r0_42 | 0x00000011
	branch r1_54 <=u 0x00000020 l000014DA
// DataOut: cpsr r1
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l000014DA:
	r2_133 = Mem60[0x00001544:word32]
// DataOut: cpsr r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l00001440:
	word32 r3_124 = 0x00000040
	word32 r2_125 = 0x00000005
// DataOut: cpsr r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l0000144C:
	r3_124 = r3_124 << 0x00000001
	branch r1_54 >u r3_124 l00001446
// DataOut: cpsr r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l00001446:
	r2_125 = r2_125 + 0x00000001
	branch r2_125 == 0x0000001F l000014D2
// DataOut: cpsr r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l000014D2:
	r2_133 = Mem60[0x0000153C:word32]
// DataOut: cpsr r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l00001454:
	r2_133 = Mem60[0x00001514:word32] | r2_125 << 0x00000001
// DataOut: cpsr r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l0000145A:
	word32 r0_118
	word32 r3_63 = Mem60[0x00001518:word32]
	word32 r0_66 = Mem60[0x00001504:word32]
	word32 r1_67 = Mem60[0x0000151C:word32] - r3_63
	Mem71[Mem60[0x00001510:word32]:word32] = r2_133
	Mem72[r0_66:word32] = r3_63 | 0x00000012
	branch r1_67 <=u 0x00000020 l000014E2
// DataOut: cpsr r1
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l000014E2:
	r0_118 = Mem72[0x0000154C:word32]
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l00001470:
	word32 r3_109 = 0x00000040
	word32 r2_110 = 0x00000005
// DataOut: cpsr r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l0000147C:
	r3_109 = r3_109 << 0x00000001
	branch r1_67 >u r3_109 l00001476
// DataOut: cpsr r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l00001476:
	r2_110 = r2_110 + 0x00000001
	branch r2_110 == 0x0000001F l000014D6
// DataOut: cpsr r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l000014D6:
	r0_118 = Mem72[0x00001540:word32]
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l00001484:
	r0_118 = Mem72[0x00001520:word32] | r2_110 << 0x00000001
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l0000148A:
	word32 r4_80 = Mem72[0x00001504:word32]
	word32 r5_81 = Mem72[0x00001524:word32]
	word32 r1_82 = Mem72[0x00001528:word32]
	Mem83[Mem72[0x00001510:word32]:word32] = r0_118
	Mem84[r4_80:word32] = r5_81
	word32 r3_77 = 0x00000005
	word32 r2_78 = 0x00000040
// DataOut: cpsr r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l0000149A:
	word32 r3_107
	r3_77 = r3_77 + 0x00000001
	r2_78 = r2_78 << 0x00000001
	branch r3_77 == 0x0000001F l000014CA
// DataOut: cpsr r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l000014CA:
	r3_107 = Mem84[0x00001534:word32]
// DataOut: cpsr r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l000014A4:
	branch r2_78 <=u r1_82 l0000149A
// DataOut: cpsr r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l000014A8:
	r3_107 = Mem84[0x0000152C:word32] | r3_77 << 0x00000001
// DataOut: cpsr r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l000014AE:
	word32 r2_95 = Mem84[0x00001510:word32]
	word32 r1_96 = Mem84[0x00001530:word32]
	Mem97[r2_95:word32] = r3_107
	Mem100[r1_96:word32] = Mem97[r1_96:word32] | 0x00010000
	Mem103[r2_95 - 12:word32] = Mem100[r2_95 - 12:word32] | 0x00000005
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

l000013CE:
	word32 r2_29 = Mem17[0x000014F4:word32]
	word32 r3_30 = Mem17[0x000014F8:word32]
	Mem31[Mem17[0x000014F0:word32]:word32] = 0x00004E1F
	Mem32[r2_29:word32] = 0x00000007
	Mem33[r3_30:word32] = 0x00000000
	__msr(cpsr, Mem33[Mem33[Mem33[0x00001724:word32]:word32]:word32])
	__cps_id()
	__cps_id()
	__dsb_sy()
	__isb_sy()
	__syscall(0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 12 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6

xPortStartScheduler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r1:0x00000007 r5:r5 r0:<invalid> r4:r4 r6:r6 -12(fp):r4 -8(fp):r5 -4(fp):r6



void vPortEndScheduler()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
vPortEndScheduler_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001550:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

vPortEndScheduler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vPortStoreTaskMPUSettings(word32 r0, word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 sp
vPortStoreTaskMPUSettings_entry:
// DataOut: cpsr r0 r1 r10 r2 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001554:
	branch r1 == 0x00000000 l000015DE
// DataOut: cpsr r0 r1 r10 r2 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000015DE:
	word32 r2_126
	word32 r3_118 = Mem0[0x00001668:word32]
	word32 r1_121 = Mem0[0x0000166C:word32] - r3_118
	Mem124[r0:word32] = r3_118 | 0x00000014
	branch r1_121 <=u 0x00000020 l0000165C
// DataOut: cpsr r0 r1 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 -8(fp):r4 -4(fp):r5

l0000165C:
	r2_126 = Mem124[0x00001680:word32]
// DataOut: cpsr r0 r10 r2 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

l000015EE:
	word32 r3_166 = 0x00000040
	word32 r2_167 = 0x00000005
// DataOut: cpsr r0 r1 r10 r2 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

l000015FA:
	r3_166 = r3_166 << 0x00000001
	branch r3_166 <u r1_121 l000015F4
// DataOut: cpsr r0 r1 r10 r2 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

l000015F4:
	r2_167 = r2_167 + 0x00000001
	branch r2_167 == 0x0000001F l00001648
// DataOut: cpsr r0 r1 r10 r2 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

l00001648:
	r2_126 = Mem124[0x00001664:word32]
// DataOut: cpsr r0 r10 r2 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

l00001602:
	r2_126 = Mem124[0x00001660:word32] | r2_167 << 0x00000001
// DataOut: cpsr r0 r10 r2 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

l00001608:
	word32 r2_137
	word32 r3_128 = Mem124[0x00001670:word32]
	word32 r1_131 = Mem124[0x00001674:word32] - r3_128
	Mem134[r0 + 4:word32] = r2_126
	Mem135[r0 + 8:word32] = r3_128 | 0x00000015
	branch r1_131 <=u 0x00000020 l00001658
// DataOut: cpsr r0 r1 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

l00001658:
	r2_137 = Mem135[0x00001684:word32]
// DataOut: cpsr r0 r10 r2 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l0000161A:
	word32 r2_151 = 0x00000005
	word32 r3_152 = 0x00000040
// DataOut: cpsr r0 r1 r10 r2 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l00001626:
	r3_152 = r3_152 << 0x00000001
	branch r1_131 >u r3_152 l00001620
// DataOut: cpsr r0 r1 r10 r2 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l00001620:
	r2_151 = r2_151 + 0x00000001
	branch r2_151 == 0x0000001F l0000164C
// DataOut: cpsr r0 r1 r10 r2 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l0000164C:
	r2_137 = Mem135[0x0000167C:word32]
// DataOut: cpsr r0 r10 r2 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l0000162E:
	r2_137 = Mem135[0x00001678:word32] | r2_151 << 0x00000001
// DataOut: cpsr r0 r10 r2 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l00001634:
	Mem143[r0 + 16:word32] = 0x00000016
	Mem144[r0 + 12:word32] = r2_137
	Mem145[r0 + 20:word32] = 0x00000000
	Mem146[r0 + 28:word32] = 0x00000000
	Mem147[r0 + 24:word32] = 0x00000017
	return
// DataOut: cpsr r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r1:<invalid> r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l0000155A:
	branch r3 != 0x00000000 l000015B0
// DataOut: cpsr r0 r1 r10 r2 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 -8(fp):r4 -4(fp):r5

l000015B0:
	word32 r4_101
	Mem95[r0:word32] = r2 | 0x00000014
	branch r3 << 2 <=u 0x00000020 l00001654
// DataOut: cpsr r0 r1 r10 r3 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 -8(fp):r4 -4(fp):r5

l00001654:
	r4_101 = Mem95[0x00001680:word32]
// DataOut: cpsr r0 r1 r10 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:r3 << 2 r2:r2 | 0x00000014 -8(fp):r4 -4(fp):r5

l000015BC:
	word32 r2_103 = 0x00000040
	word32 r4_104 = 0x00000005
// DataOut: cpsr r0 r1 r10 r2 r3 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:r3 << 2 r2:r2 | 0x00000014 -8(fp):r4 -4(fp):r5

l000015C8:
	r2_103 = r2_103 << 0x00000001
	branch r3 << 2 >u r2_103 l000015C2
// DataOut: cpsr r0 r1 r10 r2 r3 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:r3 << 2 r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l000015C2:
	r4_104 = r4_104 + 0x00000001
	branch r4_104 == 0x0000001F l000015DA
// DataOut: cpsr r0 r1 r10 r2 r3 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:r3 << 2 r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l000015DA:
	r4_101 = Mem95[0x00001664:word32]
// DataOut: cpsr r0 r1 r10 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:r3 << 2 r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l000015D0:
	r4_101 = Mem95[0x00001660:word32] | r4_104 << 0x00000001
// DataOut: cpsr r0 r1 r10 r4 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:r3 << 2 r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l000015D6:
	Mem102[r0 + 4:word32] = r4_101
// DataOut: cpsr r0 r1 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l0000155C:
	word32 r5_31 = 0x00000005
// DataOut: cpsr r0 r1 r10 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l0000155E:
	word32 r4_44 = Mem0[r1 + 4:word32]
	branch r4_44 == 0x00000000 l000015A2
// DataOut: cpsr r0 r1 r10 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

l000015A2:
	Mem89[r0 + 12:word32] = r4_44
	Mem90[r0 + 8:word32] = r5_31 | 0x00000010
// DataOut: cpsr r0 r1 r10 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

l00001562:
	word32 r3_65
	Mem63[r0 + 8:word32] = Mem0[r1:word32] | (r5_31 | 0x00000010)
	branch r4_44 <=u 0x00000020 l00001650
// DataOut: cpsr r0 r1 r10 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

l00001650:
	r3_65 = 0x00000008
// DataOut: cpsr r0 r1 r10 r3 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -8(fp):r4 -4(fp):r5

l00001570:
	word32 r2_73 = 0x00000040
	word32 r3_74 = 0x00000005
// DataOut: cpsr r0 r1 r10 r2 r3 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -8(fp):r4 -4(fp):r5

l0000157C:
	r2_73 = r2_73 << 0x00000001
	branch r4_44 >u r2_73 l00001576
// DataOut: cpsr r0 r1 r10 r2 r3 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -8(fp):r4 -4(fp):r5

l00001576:
	r3_74 = r3_74 + 0x00000001
	branch r3_74 == 0x0000001F l000015AC
// DataOut: cpsr r0 r1 r10 r2 r3 r4 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -8(fp):r4 -4(fp):r5

l000015AC:
	r3_65 = 0x0000003E
// DataOut: cpsr r0 r1 r10 r3 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -8(fp):r4 -4(fp):r5

l00001584:
	r3_65 = r3_74 << 1
// DataOut: cpsr r0 r1 r10 r3 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -8(fp):r4 -4(fp):r5

l00001586:
	Mem72[r0 + 12:word32] = r3_65 | (Mem63[r1 + 8:word32] | 0x00000001)
// DataOut: cpsr r0 r1 r10 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -8(fp):r4 -4(fp):r5

l00001590:
	r5_31 = r5_31 + 0x00000001
	r1 = r1 + 0x0000000C
	r0 = r0 + 0x00000008
	branch r5_31 != 0x00000008 l0000155E
// DataOut: cpsr r0 r1 r10 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -8(fp):r4 -4(fp):r5

l0000159E:
	return
// DataOut: cpsr r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

vPortStoreTaskMPUSettings_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid> r2:<invalid> r4:r4 r5:r5 r0:<invalid> -8(fp):r4 -4(fp):r5



void xPortPendSVHandler(word32 r4, word32 r5, word32 r6, word32 r7, word32 r8, word32 r9, word32 r10, word32 fp, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr fp r10 r4 r5 r6 r7 r8 r9
// LiveOut:
// Trashed: NZCV fp r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: lr sp
xPortPendSVHandler_entry:
// DataOut: cpsr fp r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001688:
	word32 r0_3 = __mrs(cpsr)
	word32 r3_5 = Mem0[0x000016E0:word32]
	word32 r2_6 = Mem0[r3_5:word32]
	Mem8[r0_3 + -36:word32] = __mrs(cpsr)
	Mem10[r0_3 + -32:word32] = r4
	Mem12[r0_3 + -28:word32] = r5
	Mem14[r0_3 + -24:word32] = r6
	Mem16[r0_3 + -20:word32] = r7
	Mem18[r0_3 + -16:word32] = r8
	Mem20[r0_3 + -12:word32] = r9
	Mem22[r0_3 + -8:word32] = r10
	Mem24[r0_3 + -4:word32] = fp
	Mem26[r2_6:word32] = r0_3 - 36
	__msr(cpsr, 0x000000BF)
	vTaskSwitchContext()
	__msr(cpsr, 0x00000000)
	word32 r1_36 = Mem26[r3_5:word32]
	word32 r0_37 = Mem26[r1_36:word32]
	word32 r2_39 = Mem26[0x00001728:word32]
	word32 r5_41 = Mem26[r1_36 + 0x00000008:word32]
	word32 r6_42 = Mem26[r1_36 + 0x0000000C:word32]
	word32 r7_43 = Mem26[r1_36 + 0x00000010:word32]
	word32 r8_44 = Mem26[r1_36 + 0x00000014:word32]
	word32 r9_45 = Mem26[r1_36 + 0x00000018:word32]
	word32 r10_46 = Mem26[r1_36 + 0x0000001C:word32]
	word32 fp_47 = Mem26[r1_36 + 0x00000020:word32]
	Mem49[r2_39:word32] = Mem26[r1_36 + 0x00000004:word32]
	Mem50[r2_39 + 4:word32] = r5_41
	Mem51[r2_39 + 8:word32] = r6_42
	Mem52[r2_39 + 12:word32] = r7_43
	Mem53[r2_39 + 16:word32] = r8_44
	Mem54[r2_39 + 20:word32] = r9_45
	Mem55[r2_39 + 24:word32] = r10_46
	Mem56[r2_39 + 28:word32] = fp_47
	__msr(cpsr, Mem56[r0_37:word32])
	__msr(cpsr, r0_37 + 36)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

xPortPendSVHandler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> lr:lr r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> fp:<invalid> -8(fp):<invalid> -4(fp):lr



void xPortSysTickHandler(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 sp
xPortSysTickHandler_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000016E4:
	word32 r4_8 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	branch xTaskIncrementTick() == 0x00000000 l00001708
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001700:
	Mem19[Mem0[0x00001710:word32]:word32] = 0x10000000
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l00001708:
	__msr(cpsr, r4_8)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

xPortSysTickHandler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr



void vPortSVCHandler(word32 lr, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr lr
// LiveOut:
// Trashed: NZCV fp lr r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
vPortSVCHandler_entry:
// DataOut: cpsr lr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001714:
	branch (lr & 0x00000004) != 0x00000000 l0000171E
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000171A_1:
	__mrs(cpsr)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000171E:
	word32 r0_6 = __mrs(cpsr)
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00001722_thunk_prvSVCHandler:
	prvSVCHandler(r0_6, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

vPortSVCHandler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r7:<invalid> r8:<invalid> r9:<invalid> r10:<invalid> fp:<invalid> lr:<invalid>



word32 pvPortMalloc(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 sp
pvPortMalloc_entry:
// DataOut: cpsr r0 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000172C:
	word32 r4_12 = r0
	branch r0 << 29 == 0x00000000 l00001738
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001734_1:
	r4_12 = r0 & ~0x00000007
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r3:r0 << 29 -8(fp):r4 -4(fp):lr

l00001738:
	vTaskSuspendAll()
	word32 r3_17 = Mem0[0x0000177C:word32]
	word32 r4_13 = r4_12 + 0x00000008
	branch Mem0[r3_17:word32] == 0x00000000 l00001770
// DataOut: cpsr r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:r0 << 29 -8(fp):r4 -4(fp):lr

l00001770:
	Mem49[r3_17:word32] = r3_17 + 0x0000000C & ~0x00000007
// DataOut: cpsr r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r2:<invalid> -8(fp):r4 -4(fp):lr

l00001744:
	word32 r2_20 = Mem0[r3_17 + 1472:word32]
	word32 r4_21 = r4_13 + r2_20
	branch r4_21 >u 0x000005B3 l00001766
// DataOut: cpsr r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r2:<invalid> -8(fp):r4 -4(fp):lr

l00001752:
	branch r2_20 >=u r4_21 l00001766
// DataOut: cpsr r10 r2 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r2:<invalid> r1:0x000005B3 -8(fp):r4 -4(fp):lr

l00001766:
	xTaskResumeAll(cpsr)
	return 0x00000000
// DataOut: cpsr r0 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r2:<invalid> r1:0x000005B3 -8(fp):r4 -4(fp):lr

l00001756:
	word32 r1_40 = Mem0[r3_17:word32]
	Mem41[r3_17 + 1472:word32] = r4_21
	xTaskResumeAll(cpsr)
	return r1_40 + r2_20
// DataOut: cpsr r0 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r2:<invalid> r1:0x000005B3 -8(fp):r4 -4(fp):lr

pvPortMalloc_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr



void vPortFree()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
vPortFree_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001780:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

vPortFree_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vPortInitialiseBlocks()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
vPortInitialiseBlocks_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001784:
	Mem5[Mem0[0x00001790:word32] + 1472:word32] = 0x00000000
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

vPortInitialiseBlocks_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:0x00000000 r3:<invalid>



void xPortGetFreeHeapSize()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: sp
xPortGetFreeHeapSize_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001794:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

xPortGetFreeHeapSize_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void xEventGroupCreate(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 sp
xEventGroupCreate_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000017A8:
	word32 r0_9 = pvPortMalloc(0x00000018, cpsr)
	branch r0_9 == 0x00000000 l000017BE
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l000017B4:
	Mem17[r0_9:word32] = 0x00000000
	vListInitialise(r0_9 + 4)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r0:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l000017BE:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r0:<invalid> r4:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> -8(fp):r4 -4(fp):lr

xEventGroupCreate_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r4:r4 r3:<invalid> r1:<invalid> r2:<invalid> -8(fp):r4 -4(fp):lr



void xEventGroupWaitBits(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
// Stack args: Stack +0000(32)
xEventGroupWaitBits_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000017C4:
	bool C_23 = vTaskSuspendAll()
	word32 r5_113 = r1
	word32 r4_129 = Mem0[r0:word32]
	branch r3 != 0x00000000 l000017F2
// DataOut: cpsr r4 r5 r6 r7 r8
// DataOut (flags): C
// SymbolicIn: sp:fp
// LocalsOut: Stack +0000(32)

l000017F2:
	branch (r1 & ~(r4_129 << 0x00000000)) == 0x00000000 l000017DC
// DataOut: cpsr r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r2:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l000017D8:
	r4_129 = r4_129 + r1 + C_23
	branch r4_129 == 0x00000000 l000017F8
// DataOut: cpsr r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r2:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l000017F8:
	branch dwArg00 == 0x00000000 l000017E8
// DataOut: cpsr r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r3:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l000017FE:
	branch r2 != 0x00000000 l00001806
// DataOut: cpsr r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r3:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00001804_1:
// DataOut: cpsr r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r3:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l00001806:
	word32 r1_127 = 0x01000000
	branch r3 != 0x00000000 l0000183E
// DataOut: cpsr r1 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r3:<invalid> r1:0x00000000 r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l0000183E:
	r1_127 = 0x05000000
// DataOut: cpsr r1 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r3:<invalid> r1:0x01000000 r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr
// LocalsOut: Stack +0000(32)

l0000180C:
	vTaskPlaceOnUnorderedEventList(r0 + 0x00000004, r1_127 | r1, dwArg00)
	branch xTaskResumeAll(cpsr) != 0x00000000 l0000182C
// DataOut: cpsr r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000181C:
	Mem126[Mem0[0x00001870:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000182C:
	branch uxTaskResetEventItemValue() << 6 >= 0x00000000 l00001844
// DataOut: cpsr r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001844:
	word32 r0_95
	bool C_96 = vPortEnterCritical(cpsr, out r0_95)
	word32 r4_99 = Mem0[r0:word32]
	branch r3 != 0x00000000 l00001868
// DataOut: cpsr r4 r5 r6 r8
// DataOut (flags): C
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001868:
	branch (r1 & ~(r4_99 << 0x00000000)) != 0x00000000 l0000185C
// DataOut: cpsr r4 r5 r6 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000186E:
// DataOut: cpsr r4 r5 r6 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000184C:
	r5_113 = r1 + r4_99 + C_96
	branch r5_113 == 0x00000000 l0000185C
// DataOut: cpsr r4 r5 r6 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001850:
	branch r2 == 0x00000000 l0000185C
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:<invalid> r8:r2 r4:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001856:
	Mem117[r0:word32] = r4_99 & ~(r5_113 << 0x00000000)
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:<invalid> r8:r2 r4:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000185C:
	vPortExitCritical(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:<invalid> r8:r2 r4:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001836:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000017DC:
	branch r2 == 0x00000000 l000017E8
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r3:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000017E2:
	Mem66[r0:word32] = r4_129 & ~(r1 << 0x00000000)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:r1 r8:r2 r4:<invalid> r3:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000017E8:
	xTaskResumeAll(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:r0 r7:r3 r5:<invalid> r8:r2 r4:<invalid> r3:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

xEventGroupWaitBits_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 r7:r7 r5:r5 r8:r8 r4:r4 r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void xEventGroupClearBits(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r4 r5 r6 sp
xEventGroupClearBits_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001874:
	word32 r0_16
	vPortEnterCritical(cpsr, out r0_16)
	Mem21[r0:word32] = Mem0[r0:word32] & ~(r1 << 0x00000000)
	vPortExitCritical(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

xEventGroupClearBits_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 r4:r4 r5:r5 r0:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void xEventGroupSetBits(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xEventGroupSetBits_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00001890:
	word32 r7_104
	vTaskSuspendAll()
	word32 r0_100 = Mem0[r0 + 16:word32]
	word32 r1_24 = Mem0[r0:word32] | r1
	Mem27[r0:word32] = r1_24
	branch r0 + 0x0000000C == r0_100 l000018F0
// DataOut: cpsr r0 r1 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l000018F0:
	r7_104 = 0xFFFFFFFF
// DataOut: cpsr r1 r5 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:r1 r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r2:<invalid> r3:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018AA:
	word32 r7_48 = 0x00000000
// DataOut: cpsr r0 r1 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:r1 r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r2:<invalid> r3:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018C8:
	word32 r3_53 = Mem27[r0_100:word32]
	word32 r4_54 = Mem27[r0_100 + 4:word32]
	word32 r2_101 = r3_53 & ~0xFF000000
	branch (r3_53 & 0x04000000) == 0x00000000 l000018AE
// DataOut: cpsr r0 r1 r2 r3 r4 r5 r6 r7
// DataOut (flags): C
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018AE:
	r2_101 = r2_101 + r1_24 + ((r3_53 & 0x04000000) <u 0x00000000)
	branch r2_101 == 0x00000000 l000018C2
// DataOut: cpsr r0 r1 r2 r3 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018D6:
	branch (r2_101 & ~(r1_24 << 0x00000000)) == 0x00000000 l000018B2
// DataOut: cpsr r0 r1 r2 r3 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018B2:
	branch r3_53 << 7 >= 0x00000000 l000018B8
// DataOut: cpsr r0 r1 r2 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018B6:
	r7_48 = r7_48 | r2_101
// DataOut: cpsr r0 r1 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018B8:
	xTaskRemoveFromUnorderedEventList(r0_100, r1_24 | 0x02000000)
	r1_24 = Mem27[r0:word32]
// DataOut: cpsr r1 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018C2:
	r0_100 = r4_54
	branch r0 + 0x0000000C == r4_54 l000018E2
// DataOut: cpsr r0 r1 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018DC:
	r0_100 = r4_54
	branch r0 + 0x0000000C != r4_54 l000018C8
// DataOut: cpsr r0 r1 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018E2:
	r7_104 = ~r7_48
// DataOut: cpsr r1 r5 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000018E4:
	Mem38[r0:word32] = r1_24 & r7_104
	xTaskResumeAll(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r4:<invalid> r1:<invalid> r0:<invalid> r6:r0 + 0x0000000C r7:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

xEventGroupSetBits_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r1:<invalid> r0:<invalid> r6:r6 r7:r7 r3:r3 r2:<invalid> lr:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



void xEventGroupSync(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r1 r4 r5 r6 r7 r8 sp
xEventGroupSync_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000018F8:
	vTaskSuspendAll()
	word32 r4_28 = Mem0[r0:word32] | r1
	xEventGroupSetBits(r0, r1, cpsr)
	word32 r6_20 = r2
	branch (r2 & ~(r4_28 << 0x00000000)) == 0x00000000 l0000195E
// DataOut: cpsr r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000195E:
	Mem99[r0:word32] = Mem0[r0:word32] & ~(r2 << 0x00000000)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r8:r1 r5:r0 r6:r2 r7:r3 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000191A:
	branch r3 != 0x00000000 l00001928
// DataOut: cpsr r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r8:r1 r5:r0 r6:r2 r7:r3 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001928:
	vTaskPlaceOnUnorderedEventList(r0 + 0x00000004, r2 | 0x05000000, r3)
	branch xTaskResumeAll(cpsr) != 0x00000000 l0000194A
// DataOut: cpsr r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r8:r1 r5:r0 r6:r2 r7:r3 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000193A:
	Mem96[Mem0[0x00001984:word32]:word32] = 0x10000000
	__dsb_sy()
	__isb_sy()
// DataOut: cpsr r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r8:r1 r5:r0 r6:r2 r7:r3 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000194A:
	branch uxTaskResetEventItemValue() << 6 >= 0x00000000 l00001968
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r8:r1 r5:r0 r6:r2 r7:r3 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001968:
	word32 r0_83
	vPortEnterCritical(cpsr, out r0_83)
	word32 r4_85 = Mem0[r0:word32]
	branch (r2 & ~(r4_85 << 0x00000000)) != 0x00000000 l00001978
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r8:r1 r5:r0 r6:r2 r7:r3 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001974_1:
	r6_20 = r4_85 & ~(r2 << 0x00000000)
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r8:r1 r5:r0 r6:r2 r7:r3 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001978:
	Mem90[r0:word32] = r6_20
	vPortExitCritical(cpsr)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r8:r1 r5:r0 r6:<invalid> r7:r3 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001954:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r8:r1 r5:r0 r6:r2 r7:r3 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00001958:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r8:r1 r5:r0 r6:<invalid> r7:r3 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000191C:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r8:r1 r5:r0 r6:r2 r7:r3 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000191E:
	xTaskResumeAll(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r8:r1 r5:r0 r6:<invalid> r7:r3 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

xEventGroupSync_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 r5:r5 r6:r6 r7:r7 r1:<invalid> r4:r4 r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void xEventGroupGetBitsFromISR(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: r0 r2 r3
// Preserved: sp
xEventGroupGetBitsFromISR_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00001988:
	word32 r3_3 = __mrs(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	__msr(cpsr, r3_3)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

xEventGroupGetBitsFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:0x000000BF r0:<invalid>



void vEventGroupDelete(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 sp
vEventGroupDelete_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000019A4:
	vTaskSuspendAll()
	branch Mem0[r0 + 4:word32] == 0x00000000 l000019C0
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l000019B0:
	xTaskRemoveFromUnorderedEventList(Mem0[r0 + 16:word32], 0x02000000)
	branch Mem0[r0 + 4:word32] != 0x00000000 l000019B0
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r3:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> lr:<invalid> -8(fp):r4 -4(fp):lr

l000019C0:
	vPortFree()
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r3:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> lr:<invalid> -8(fp):r4 -4(fp):lr

l000019CA_thunk_xTaskResumeAll:
	xTaskResumeAll(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r1:<invalid> r0:r0 lr:lr r2:<invalid> -8(fp):r4 -4(fp):lr

vEventGroupDelete_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r1:<invalid> r0:<invalid> lr:lr r2:<invalid> -8(fp):r4 -4(fp):lr



void vEventGroupSetBitsCallback(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: sp
vEventGroupSetBitsCallback_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000019D0:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000019D0_thunk_xEventGroupSetBits:
	xEventGroupSetBits(r0, r1, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

vEventGroupSetBitsCallback_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r2:<invalid> lr:<invalid>



void vEventGroupClearBitsCallback(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: lr r3 r4 r5 sp
vEventGroupClearBitsCallback_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000019D4:
	word32 r0_16
	vPortEnterCritical(cpsr, out r0_16)
	Mem21[r0:word32] = Mem0[r0:word32] & ~(r1 << 0x00000000)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l000019EA_thunk_vPortExitCritical:
	vPortExitCritical(cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r5:r5 r3:r3 lr:lr r2:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

vEventGroupClearBitsCallback_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r5:r5 r3:r3 lr:lr r2:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void NmiSR()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
NmiSR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

NmiSR_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008000:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void FaultISR()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
FaultISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

FaultISR_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008004:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void ResetISR(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
ResetISR_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008008:
	word32 r3_23 = Mem0[0x0000802C:word32]
	word32 r0_4 = Mem0[0x00008030:word32]
	branch r3_23 >=u r0_4 l00008026
// DataOut: cpsr r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008010:
	word32 r2_21 = (~r3_23 + r0_4 & ~0x00000003) + 0x00000004 + r3_23
// DataOut: cpsr r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>

l0000801E:
	Mem24[r3_23:word32] = 0x00000000
	r3_23 = r3_23 + 4
	branch r3_23 != r2_21 l0000801E
// DataOut: cpsr r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid> r2:<invalid> r1:0x00000000

l00008026:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid> r2:<invalid> r1:0x00000000

l00008026_thunk_Main:
	Main(cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid> r2:<invalid> r1:0x00000000
// Terminates process

ResetISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void raise()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
raise_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

raise_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008034:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void vPrintTask(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vPrintTask_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

vPrintTask_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -0014(32)

l00008038:
	word32 r4_13 = 0x00000000
	word32 r5_11 = Mem0[0x00008064:word32]
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -0014(32)

l00008040:
	MPU_xQueueGenericReceive(Mem0[r5_11:word32], fp - 20, 0xFFFFFFFF, 0x00000000, cpsr)
	OSRAMClear()
	r4_13 = r4_13 + 0x00000001
	OSRAMStringDraw(dwLoc14, r4_13 & 0x0000003F, r4_13 & 0x00000001)
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r5:<invalid> r1:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32)



void vCheckTask(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vCheckTask_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

vCheckTask_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008068:
	MPU_xTaskGetTickCount(cpsr)
	word32 r5_15 = Mem0[0x0000809C:word32]
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000807C:
	MPU_vTaskDelayUntil(fp - 24, 0x00001388, cpsr)
	MPU_xQueueGenericSend(Mem0[r5_15:word32], fp - 20, 0xFFFFFFFF, 0x00000000, cpsr)
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:fp - 24 r5:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> lr:<invalid> -24(fp):<invalid> -20(fp):<invalid> -12(fp):r4 -8(fp):r5 -4(fp):lr
// LocalsOut: fp(32)



void Main(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
Main_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

Main_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000080A0:
	MPU_xQueueGenericCreate(0x00000003, 0x00000004, cpsr)
	Mem13[Mem0[0x000080F0:word32]:word32] = 0x00000003
	OSRAMInit(0x00000000)
	MPU_xTaskCreate(Mem13[0x000080F8:word32], Mem13[0x000080F4:word32], 0x0000003B, 0x00000000, cpsr, 0x00000003, 0x00000000)
	MPU_xTaskCreate(Mem13[0x00008100:word32], Mem13[0x000080FC:word32], 0x0000003B, 0x00000000, cpsr, 0x00000002, 0x00000000)
	vTaskStartScheduler(cpsr)
	OSRAMStringDraw(Mem13[0x00008104:word32], 0x00000000, 0x00000000)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000080EC:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r2:<invalid> r1:<invalid> r0:<invalid> r4:0x00000000 r3:<invalid> -16(fp):0x00000002 -12(fp):0x00000000 -4(fp):lr



void vUART_ISR(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
vUART_ISR_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008108:
	word32 r5_13 = Mem0[0x00008174:word32]
	word32 r0_18 = UARTIntStatus(r5_13, 0x00000001)
	UARTIntClear(r5_13, r0_18)
	branch r0_18 << 27 >= 0x00000000 l00008130
// DataOut: cpsr r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008128:
	branch Mem0[Mem0[0x00008178:word32]:word32] << 25 < 0x00000000 l0000815E
// DataOut: cpsr r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:0x00000000 r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32)

l0000815E:
	xQueueGenericSendFromISR(fp - 0x00000015, r0_18, fp - 20, 0x00000000, cpsr)
// DataOut: r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:0x00000000 r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32)

l00008130:
	branch r0_18 << 26 >= 0x00000000 l0000813C
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:0x00000000 r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32)

l00008134:
	word32 r2_53 = Mem0[0x0000817C:word32]
	word32 r3_54 = (word32) Mem0[r2_53:byte]
	branch r3_54 <=u 0x0000007A l0000814C
// DataOut: r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:0x00000000 r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32)

l0000814C:
	word32 r1_58 = Mem0[Mem0[0x00008178:word32]:word32]
	word32 r1_59 = r1_58 << 26
	branch r1_58 << 26 < 0x00000000 l00008156
// DataOut: r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:0x00000000 r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32)

l00008154_1:
	r1_59 = Mem0[0x00008174:word32]
// DataOut: r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:0x00000000 r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32)

l00008156:
	Mem63[r1_59:word32] = r3_54
	Mem66[r2_53:byte] = (byte) (r3_54 + 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:0x00000000 r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32)

l0000813C:
	branch 0x00000000 == 0x00000000 l00008148
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:0x00000000 r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32)

l00008140:
	Mem52[Mem0[0x00008180:word32]:word32] = 0x10000000
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:0x00000000 r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:0x00000000 lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32)

l00008148:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r6:0x00000000 r5:<invalid> r1:<invalid> r0:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

vUART_ISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 r5:r5 r1:<invalid> r0:<invalid> r4:r4 r2:<invalid> r3:<invalid> lr:<invalid> -21(fp):<invalid> -20(fp):0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void vSetErrorLED(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
vSetErrorLED_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008184:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008188_thunk_vParTestSetLED:
	vParTestSetLED(0x00000007, 0x00000001, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:0x00000001 r0:0x00000007

vSetErrorLED_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:<invalid> r0:<invalid> r3:<invalid> r2:<invalid>



void prvSetAndCheckRegisters()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV fp ip r0 r1 r10 r2 r3 r4 r5 r6 r7 r8 r9
// Preserved: sp
prvSetAndCheckRegisters_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000818C:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000081C6:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081CA:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081CE:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081D2:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081D6:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081DA:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081DE:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081E2:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081E6:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081EC:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081F2:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l000081F8:
	branch false l00008200
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016
// LocalsOut: fp(32)

l00008200:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016

l000081FE:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016

prvSetAndCheckRegisters_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp fp:0x0000000A r0:0x0000000B r1:0x0000000C r2:0x0000000D r3:0x0000000E r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016



void vApplicationIdleHook(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
vApplicationIdleHook_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

vApplicationIdleHook_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008210:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008212:
	vCoRoutineSchedule(cpsr)
	prvSetAndCheckRegisters()
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> fp:0x0000000A r4:0x0000000F r5:0x00000010 r6:0x00000011 r7:0x00000012 r8:0x00000013 r9:0x00000014 r10:0x00000015 ip:0x00000016 -8(fp):r3 -4(fp):lr



void PDCInit()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 sp
PDCInit_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008220:
	SysCtlPeripheralEnable(Mem0[0x0000828C:word32])
	SysCtlPeripheralEnable(Mem0[0x00008290:word32])
	GPIODirModeSet(0x40004000, 0x00000034, 0x00000002)
	GPIODirModeSet(0x40004000, 0x00000008, 0x00000001)
	GPIOPadConfigSet(0x40004000, 0x00000004, 0x00000002, 0x0000000A)
	word32 r5_25 = Mem0[0x00008294:word32]
	SSIConfig(r5_25, 0x00000000, 0x00000000, Mem0[0x00008298:word32], 0x00000008)
	SSIEnable(r5_25)
	GPIOPinWrite(0x40004000, 0x00000008, 0x00000000)
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008288_thunk_GPIOPinWrite:
	GPIOPinWrite(0x40004000, 0x00000008, 0x00000008)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x40004000 r2:0x00000008 r1:0x00000008 r3:<invalid> r4:r4 r5:r5 lr:lr -24(fp):0x00000008 -12(fp):r4 -8(fp):r5 -4(fp):lr

PDCInit_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x40004000 r2:0x00000008 r1:0x00000008 r3:<invalid> r4:r4 r5:r5 lr:lr -24(fp):0x00000008 -12(fp):r4 -8(fp):r5 -4(fp):lr



void PDCWrite(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r0 r1 r2 r3
// Preserved: r4 r5 sp
PDCWrite_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000829C:
	word32 r4_12 = Mem0[0x000082CC:word32]
	SSIDataPut(r4_12, r0 & 0x0000000F)
	SSIDataPut(r4_12, r1)
	SSIDataGet(r4_12, fp - 20)
	SSIDataGet(r4_12, fp - 20)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

PDCWrite_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r1:fp - 20 r0:<invalid> r2:<invalid> r3:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):lr



void vListInitialise(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r1 r2 r3
// Preserved: sp
vListInitialise_entry:
// DataOut: cpsr fp r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000082D0:
	Mem6[r0 + 8:word32] = 0xFFFFFFFF
	Mem7[r0:word32] = 0x00000000
	Mem8[r0 + 4:word32] = r0 + 0x00000008
	Mem9[r0 + 12:word32] = r0 + 0x00000008
	Mem10[r0 + 16:word32] = r0 + 0x00000008
	return
// DataOut: cpsr fp r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

vListInitialise_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:0xFFFFFFFF r2:0x00000000 r3:r0 + 0x00000008



void vListInitialiseItem(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
vListInitialiseItem_entry:
// DataOut: cpsr fp r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000082E8:
	Mem3[r0 + 16:word32] = 0x00000000
	return
// DataOut: cpsr fp r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

vListInitialiseItem_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000000



void vListInsertEnd(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r2 r3
// Preserved: r4 sp
vListInsertEnd_entry:
// DataOut: cpsr r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000082F0:
	word32 r3_5 = Mem0[r0 + 4:word32]
	word32 r2_4 = Mem0[r0:word32]
	Mem12[r1 + 8:word32] = Mem0[r3_5 + 8:word32]
	word32 r4_14 = Mem12[r3_5 + 8:word32]
	Mem15[r1 + 4:word32] = r3_5
	Mem16[r4_14 + 4:word32] = r1
	Mem17[r3_5 + 8:word32] = r1
	Mem20[r1 + 16:word32] = r0
	Mem21[r0:word32] = r2_4 + 0x00000001
	return
// DataOut: cpsr r0 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

vListInsertEnd_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r4:r4 -4(fp):r4



byte vListInsert(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Z r0 r1
// LiveOut: Z
// Trashed: NZCV r2 r3
// Preserved: r4 r5 sp
vListInsert_entry:
// DataOut: cpsr r0 r1 r10 r6 r7 r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000830C:
	word32 r2_13
	word32 r3_12
	word32 r5_9 = Mem0[r1:word32]
	branch Z l00008338
// DataOut: cpsr r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008338:
	r2_13 = Mem0[r0 + 16:word32]
	r3_12 = Mem0[r2_13 + 4:word32]
// DataOut: cpsr r0 r1 r10 r2 r3 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r3:<invalid> -8(fp):r4 -4(fp):r5

l00008314:
	r2_13 = r0 + 0x00000008
// DataOut: cpsr r0 r1 r10 r2 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r3:<invalid> -8(fp):r4 -4(fp):r5

l0000831C:
	r3_12 = Mem0[r2_13 + 4:word32]
	branch r5_9 >=u Mem0[r3_12:word32] l0000831A
// DataOut: cpsr r0 r1 r10 r2 r3 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r3:<invalid> r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l0000831A:
	r2_13 = r3_12
// DataOut: cpsr r0 r1 r10 r2 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r5:<invalid> r3:<invalid> r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l00008324:
	word32 r4_15 = Mem0[r0:word32]
	Mem16[r1 + 4:word32] = r3_12
	Mem21[r3_12 + 8:word32] = r1
	Mem22[r1 + 8:word32] = r2_13
	Mem23[r2_13 + 4:word32] = r1
	Mem24[r1 + 16:word32] = r0
	Mem25[r0:word32] = r4_15 + 0x00000001
	return cond(r4_15 + 0x00000001)
// DataOut: cpsr r10 r6 r7 r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp - 8 r5:<invalid> r3:<invalid> r2:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

vListInsert_exit:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp r5:r5 r3:<invalid> r2:<invalid> r4:r4 -8(fp):r4 -4(fp):r5



word32 uxListRemove(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 sp
uxListRemove_entry:
// DataOut: cpsr r0 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008340:
	word32 r2_4 = Mem0[r0 + 16:word32]
	word32 r3_5 = Mem0[r0 + 4:word32]
	Mem10[r3_5 + 8:word32] = Mem0[r0 + 8:word32]
	word32 r4_11 = Mem10[r2_4 + 4:word32]
	word32 r1_12 = Mem10[r0 + 8:word32]
	Mem15[r1_12 + 4:word32] = r3_5
	branch r0 != r4_11 l00008356
// DataOut: cpsr r0 r1 r10 r2 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008354_1:
	Mem23[r2_4 + 4:word32] = r1_12
// DataOut: cpsr r0 r10 r2 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r2:<invalid> r3:<invalid> r1:<invalid> r4:<invalid> -4(fp):r4

l00008356:
	word32 r3_17 = Mem15[r2_4:word32]
	Mem18[r0 + 16:word32] = 0x00000000
	Mem20[r2_4:word32] = r3_17 - 0x00000001
	return r3_17 - 0x00000001
// DataOut: cpsr r0 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r2:<invalid> r3:<invalid> r1:<invalid> r4:<invalid> -4(fp):r4

uxListRemove_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r1:0x00000000 r4:r4 r0:<invalid> -4(fp):r4



byte xQueueCRSend(word32 r0, word32 r1, word32 r2, word32 cpsr, ptr32 & r0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2
// LiveOut: Z r0
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
xQueueCRSend_entry:
// DataOut: cpsr r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008364:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r0_19
	vPortEnterCritical(cpsr, out r0_19)
	branch Mem0[r0 + 56:word32] == Mem0[r0 + 60:word32] l000083B2
// DataOut: cpsr r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l000083B2:
	byte Z_79 = vPortExitCritical(cpsr)
	branch r2 != 0x00000000 l000083D8
// DataOut: cpsr r4 r5
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000083D8:
	byte Z_88 = vCoRoutineAddToDelayedList(r2, r0 + 0x00000010)
	__msr(cpsr, 0x00000000)
	word32 r0_91
	*r0Out = ~0x00000003
	return Z_88
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000083B8:
	__msr(cpsr, r2)
	word32 r0_81
	*r0Out = r2
	return Z_79
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008388:
	vPortExitCritical(cpsr)
	__msr(cpsr, 0x00000000)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r2_41 = Mem0[r0 + 56:word32]
	word32 r3_42 = Mem0[r0 + 60:word32]
	word32 r0_39
	*r0Out = 0x00000000
	byte Z_44 = cond(r2_41 - r3_42)
	branch r2_41 <u r3_42 l000083C0
// DataOut: cpsr r0 r5 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000083C0:
	word32 r0_60
	Z_44 = prvCopyDataToQueue(r0, r1, 0x00000000, out r0_60)
	branch Mem0[r0 + 36:word32] != 0x00000000 l000083EE
// DataOut: cpsr r5
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000083EE:
	xCoRoutineRemoveFromEventList(r0 + 0x00000024)
	Z_44 = cond(0x00000001) (alias)
	branch 0x00000001 == 0x00000000 l000083CE
// DataOut: cpsr
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000083FA:
	word32 r0_78
	*r0Out = ~0x00000004
// DataOut: cpsr r0
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:0x00000001 r1:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000083CE:
	__msr(cpsr, 0x00000000)
	word32 r0_67
	*r0Out = 0x00000001
	return Z_44
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000083AA:
	__msr(cpsr, 0x00000000)
	return Z_44
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r4:r2 r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

xQueueCRSend_exit:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r5:r5 r6:r6 r4:r4 r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



byte xQueueCRReceive(word32 r0, word32 r1, word32 r2, word32 cpsr, ptr32 & r0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2
// LiveOut: Z r0
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 sp
xQueueCRReceive_entry:
// DataOut: cpsr r0 r1 r2
// DataOut (flags): Z
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008400:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r5_16 = Mem0[r0 + 56:word32]
	branch r5_16 != 0x00000000 l00008424
// DataOut: cpsr r0 r1 r2 r4 r5
// DataOut (flags): Z
// SymbolicIn: sp:fp

l00008424:
	__msr(cpsr, 0x00000000)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r2_49 = Mem0[r0 + 56:word32]
	branch r2_49 != 0x00000000 l00008448
// DataOut: cpsr r1 r2 r4
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r3:0x000000BF r5:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008448:
	word32 r1_75
	word32 r2_66 = Mem0[r0 + 64:word32]
	word32 r3_68 = Mem0[r0 + 4:word32]
	word32 r1_69 = Mem0[r0 + 12:word32] + r2_66
	word32 r3_73 = Mem0[r0 + 56:word32]
	Mem74[r0 + 12:word32] = r1_69
	r1_75 = r1_69
	branch r1_69 <u r3_68 l0000845C
// DataOut: cpsr r0 r1 r2 r3 r4
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:r0 r3:0x000000BF r5:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000845A_1:
	r1_75 = Mem74[r0:word32]
// DataOut: cpsr r0 r1 r2 r3 r4
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:r0 r3:<invalid> r5:<invalid> r2:<invalid> r0:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000845C:
	Mem77[r0 + 56:word32] = r3_73 + 0xFFFFFFFF
	branch r1_69 <u r3_68 l00008466
// DataOut: cpsr r0 r1 r2 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r3:<invalid> r5:<invalid> r2:<invalid> r0:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008464_1:
	Mem96[r0 + 12:word32] = r1_75
// DataOut: cpsr r0 r1 r2 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r3:<invalid> r5:<invalid> r2:<invalid> r0:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008466:
	Z = memcpy(r1, r1_75, r2_66)
	branch Mem77[r0 + 16:word32] != 0x00000000 l00008478
// DataOut: cpsr r4
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r3:<invalid> r5:<invalid> r2:<invalid> r0:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008478:
	xCoRoutineRemoveFromEventList(r0 + 0x00000010)
	Z = cond(0x00000001) (alias)
	branch 0x00000001 == 0x00000000 l0000846E
// DataOut: cpsr
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r3:<invalid> r5:<invalid> r2:<invalid> r0:r1 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008484:
	word32 r0_95
	*r0Out = ~0x00000004
// DataOut: cpsr r0
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r3:<invalid> r5:<invalid> r2:<invalid> r0:0x00000001 r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000846E:
	__msr(cpsr, 0x00000000)
	word32 r0_84
	*r0Out = 0x00000001
	return Z
// DataOut: cpsr r0
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r3:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000843E:
	word32 r0_61
	*r0Out = r2_49
// DataOut: cpsr r0
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r3:0x000000BF r5:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008440:
	__msr(cpsr, 0x00000000)
	return Z
// DataOut: cpsr r0
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r3:<invalid> r5:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008418:
	byte NZCV_29 = cond(r2)
	branch r2 != 0x00000000 l0000848A
// DataOut: cpsr r0 r2 r5
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r3:0x000000BF r5:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000848A:
	byte Z_40 = vCoRoutineAddToDelayedList(r2, r0 + 0x00000024)
	__msr(cpsr, r5_16)
	word32 r0_42
	*r0Out = ~0x00000003
	return Z_40
// DataOut: cpsr r0
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r3:0x000000BF r5:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000841C:
	__msr(cpsr, r2)
	word32 r0_32
	*r0Out = r2
	return NZCV_29
// DataOut: cpsr r0
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r4:r0 r3:0x000000BF r5:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

xQueueCRReceive_exit:
// DataOut: r0
// DataOut (flags): Z
// SymbolicIn: sp:fp r4:r4 r3:r3 r5:r5 r0:<invalid> r1:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void xQueueCRSendFromISR(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
xQueueCRSendFromISR_entry:
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000084A0:
	branch Mem0[r0 + 56:word32] <u Mem0[r0 + 60:word32] l000084B0
// DataOut: r0 r1 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l000084B0:
	word32 r0_33
	prvCopyDataToQueue(r0, r1, 0x00000000, out r0_33)
	branch r2 != 0x00000000 l000084AC
// DataOut: r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r6:<invalid> r5:r2 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000084BC:
	branch Mem0[r0 + 36:word32] == 0x00000000 l000084AC
// DataOut: r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r6:<invalid> r5:r2 r2:<invalid> r4:r0 r0:<invalid> r1:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000084C2:
	branch xCoRoutineRemoveFromEventList(r0 + 0x00000024) l000084D0
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r6:<invalid> r5:r2 r2:<invalid> r4:r0 r0:<invalid> r1:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000084CE_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r6:<invalid> r5:0x00000001 r2:<invalid> r4:r0 r0:0x00000001 r1:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000084D0:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r6:<invalid> r5:0x00000001 r2:<invalid> r4:r0 r0:0x00000001 r1:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000084AC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r6:<invalid> r5:<invalid> r2:<invalid> r4:r0 r0:<invalid> r1:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

xQueueCRSendFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r6:r6 r5:r5 r0:<invalid> r4:r4 r2:<invalid> r1:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void xQueueCRReceiveFromISR(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
xQueueCRReceiveFromISR_entry:
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000084D4:
	branch Mem0[r0 + 56:word32] == 0x00000000 l00008514
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008514:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000084DA:
	word32 r3_45
	word32 lr_32 = Mem0[r0 + 64:word32]
	word32 r4_33 = Mem0[r0 + 4:word32]
	word32 r3_34 = Mem0[r0 + 12:word32] + lr_32
	word32 r7_43 = Mem0[r0 + 56:word32]
	Mem44[r0 + 12:word32] = r3_34
	r3_45 = r3_34
	branch r3_34 <u r4_33 l000084F4
// DataOut: lr r0 r3 r4 r5 r6 r7
// DataOut (flags): C
// SymbolicIn: sp:fp - 24 r3:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000084F2_1:
	r3_45 = Mem44[r0:word32]
// DataOut: lr r0 r3 r4 r5 r6 r7
// DataOut (flags): C
// SymbolicIn: sp:fp - 24 r3:<invalid> lr:<invalid> r4:r0 r6:r1 r5:r2 r7:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000084F4:
	branch r3_34 <u r4_33 l000084FC
// DataOut: lr r0 r3 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> lr:<invalid> r4:r0 r6:r1 r5:r2 r7:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000084FA_1:
	Mem75[r0 + 12:word32] = r3_45
// DataOut: lr r3 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> lr:<invalid> r4:r0 r6:r1 r5:r2 r7:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000084FC:
	Mem50[r0 + 56:word32] = r7_43 + 0xFFFFFFFF
	memcpy(r1, r3_45, lr_32)
	branch Mem50[r2:word32] != 0x00000000 l00008510
// DataOut: r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> lr:<invalid> r4:r0 r6:r1 r5:r2 r7:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l0000850C:
	branch Mem50[r0 + 16:word32] != 0x00000000 l00008518
// DataOut: r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> lr:<invalid> r4:r0 r6:r1 r5:r2 r7:<invalid> r1:<invalid> r2:<invalid> r0:r1 -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00008518:
	xCoRoutineRemoveFromEventList(r0 + 0x00000010)
	branch 0x00000001 == 0x00000000 l00008510
// DataOut: r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> lr:<invalid> r4:r0 r6:r1 r5:r2 r7:<invalid> r1:<invalid> r2:<invalid> r0:r1 -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00008524:
	Mem68[r2:word32] = 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> lr:<invalid> r4:r0 r6:r1 r5:r2 r7:<invalid> r1:<invalid> r2:<invalid> r0:0x00000001 -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00008510:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> lr:<invalid> r4:r0 r6:r1 r5:r2 r7:<invalid> r1:<invalid> r2:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

xQueueCRReceiveFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 r0:<invalid> r4:r4 r5:r5 r6:r6 r7:r7 lr:<invalid> r1:<invalid> r2:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



void prvIdleTask(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
prvIdleTask_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

prvIdleTask_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000852C:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000852E:
	vApplicationIdleHook(cpsr)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 -8(fp):r3 -4(fp):lr



void xTaskNotifyStateClear(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r3 r4 r5 sp
xTaskNotifyStateClear_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008534:
	word32 r4_12
	branch r0 == 0x00000000 l00008558
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008558:
	r4_12 = Mem0[Mem0[0x00008560:word32] + 4:word32]
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008538:
	r4_12 = r0
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000853A:
	word32 r0_14
	vPortEnterCritical(cpsr, out r0_14)
	word32 r3_17 = (word32) Mem0[r4_12 + 100:byte]
	branch r3_17 != 0x00000002 l00008548
// DataOut: cpsr r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008546_1:
	r3_17 = 0x00000000
// DataOut: cpsr r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008548:
	Mem22[r4_12 + 100:byte] = (byte) r3_17
	vPortExitCritical(cpsr)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

xTaskNotifyStateClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:r3 r5:r5 r0:0x00000000 r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



word32 xPortRaisePrivilege(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut: r0
// Trashed: NZC r0
// Preserved: sp
xPortRaisePrivilege_entry:
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008564:
	branch (__mrs(cpsr) & 0x00000001) == 0x00000000 l00008570
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000856E_1:
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00008570:
	__syscall(0x00000002)
	return 0x00000001
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

xPortRaisePrivilege_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000001



bool vPortEnterCritical(word32 cpsr, ptr32 & r0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut: C r0
// Trashed: NZCV r0 r2
// Preserved: r3 sp
vPortEnterCritical_entry:
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008578:
	word32 r0_8
	*r0Out = xPortRaisePrivilege(cpsr)
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r2_11 = Mem0[0x000085AC:word32]
	Mem17[r2_11:word32] = Mem0[r2_11:word32] + 0x00000001
	bool C_14 = (bool) cond(0x00000000)
	branch 0x00000000 == 0x00000000 l000085A8
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): C
// SymbolicIn: sp:fp

l0000859C:
	word32 r0_22 = __mrs(cpsr)
	__msr(cpsr, r0_22 | 0x00000001)
	word32 r0_23
	*r0Out = r0_22 | 0x00000001
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): C
// SymbolicIn: sp:fp - 8 r3:<invalid> r2:<invalid> r0:0x00000001 -8(fp):r3 -4(fp):lr

l000085A8:
	return C_14
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): C
// SymbolicIn: sp:fp - 8 r3:<invalid> r2:<invalid> r0:<invalid> -8(fp):r3 -4(fp):lr

vPortEnterCritical_exit:
// DataOut: r0
// DataOut (flags): C
// SymbolicIn: sp:fp r3:r3 r2:<invalid> r0:<invalid> -8(fp):r3 -4(fp):lr



byte vPortExitCritical(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut: Z
// Trashed: NZCV r0 r2
// Preserved: r3 sp
vPortExitCritical_entry:
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000085B0:
	xPortRaisePrivilege(cpsr)
	word32 r2_10 = Mem0[0x000085D8:word32]
	word32 r3_11 = Mem0[r2_10:word32]
	Mem14[r2_10:word32] = r3_11 - 0x00000001
	branch r3_11 != 0x00000001 l000085C4
// DataOut: cpsr r10 r3 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000085C0:
	__msr(cpsr, r3_11 - 0x00000001)
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r2:<invalid> r3:<invalid> r0:0x00000001 -8(fp):r3 -4(fp):lr

l000085C4:
	byte NZCV_15 = cond(0x00000000)
	branch 0x00000000 == 0x00000000 l000085D4
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp - 8 r2:<invalid> r3:<invalid> r0:0x00000001 -8(fp):r3 -4(fp):lr

l000085C8:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp - 8 r2:<invalid> r3:<invalid> r0:0x00000001 -8(fp):r3 -4(fp):lr

l000085D4:
	return NZCV_15
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp - 8 r2:<invalid> r3:<invalid> r0:<invalid> -8(fp):r3 -4(fp):lr

vPortExitCritical_exit:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp r2:<invalid> r3:r3 r0:<invalid> -8(fp):r3 -4(fp):lr



void vParTestInitialise()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r3 sp
vParTestInitialise_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000085DC:
	PDCInit()
	word32 r1_10 = (word32) Mem0[Mem0[0x000085F0:word32]:byte]
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000085EC_thunk_PDCWrite:
	PDCWrite(0x00000005, r1_10)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:r3 r0:0x00000005 r1:<invalid> lr:lr r2:0x00000008 -8(fp):r3 -4(fp):lr

vParTestInitialise_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid> r1:<invalid> lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr



void vParTestSetLED(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r3 r4 r5 sp
vParTestSetLED_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000085F4:
	MPU_vTaskSuspendAll(cpsr)
	branch r0 >u 0x00000007 l0000861C
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008602:
	word32 r3_32 = Mem0[0x0000862C:word32]
	word32 r0_33 = (uint32) (byte) (0x00000001 << r0)
	word32 r2_34 = (word32) Mem0[r3_32:byte]
	branch r1 == 0x00000000 l00008624
// DataOut: cpsr r0 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r5:r1 r0:<invalid> r2:<invalid> r3:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008624:
	Mem42[r3_32:byte] = (byte) (r2_34 & ~(r0_33 << 0x00000000))
// DataOut: cpsr r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r5:r1 r3:<invalid> r0:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008610:
	Mem40[r3_32:byte] = (byte) (r0_33 | r2_34)
// DataOut: cpsr r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r5:r1 r3:<invalid> r0:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008614:
	PDCWrite(0x00000005, (word32) Mem0[r3_32:byte])
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r5:r1 r3:<invalid> r0:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000861C:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:r0 r5:r1 r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008620_thunk_MPU_xTaskResumeAll:
	MPU_xTaskResumeAll(cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r5:r5 r3:r3 lr:lr r0:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

vParTestSetLED_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r5:r5 r3:<invalid> lr:lr r0:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void vParTestToggleLED(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 sp
vParTestToggleLED_entry:
// DataOut: cpsr r0 r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008630:
	MPU_vTaskSuspendAll(cpsr)
	branch r0 >u 0x00000007 l0000865A
// DataOut: cpsr r4 r5
// DataOut (flags): C
// SymbolicIn: sp:fp

l0000863C:
	word32 r3_30 = Mem0[0x0000866C:word32]
	word32 r0_31 = 0x00000001 << r0
	word32 r2_34 = (uint32) (byte) r0_31 + (word32) Mem0[r3_30:byte] + (r0 <u 0x00000007)
	branch r2_34 != 0x00000000 l00008662
// DataOut: cpsr r0 r2 r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r0:<invalid> r2:<invalid> r3:<invalid> -8(fp):r4 -4(fp):lr

l00008662:
	Mem47[r3_30:byte] = (byte) ((word32) Mem0[r3_30:byte] & ~(r0_31 << 0x00000000))
// DataOut: cpsr r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r2:<invalid> r3:<invalid> r0:0x00000001 << r0 r1:<invalid> -8(fp):r4 -4(fp):lr

l0000864C:
	Mem44[r3_30:byte] = (byte) (r2_34 | (word32) Mem0[r3_30:byte])
// DataOut: cpsr r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r2:<invalid> r3:<invalid> r0:0x00000001 << r0 r1:<invalid> -8(fp):r4 -4(fp):lr

l00008652:
	PDCWrite(0x00000005, (word32) Mem0[r3_30:byte])
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l0000865A:
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l0000865E_thunk_MPU_xTaskResumeAll:
	MPU_xTaskResumeAll(cpsr)
	return
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 lr:lr r2:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

vParTestToggleLED_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 lr:lr r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr



void prvFlashCoRoutine(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
prvFlashCoRoutine_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -0014(32)

l00008670:
	word32 r5_44
	word32 r0_50
	word32 r3_13 = (word32) Mem0[r0 + 104:word16]
	branch r3_13 == 0x000001C2 l000086B6
// DataOut: cpsr r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -0014(32)

l000086B6:
	r5_44 = Mem0[0x000086E0:word32]
	branch xQueueCRReceive(Mem0[r5_44:word32], fp - 20, 0x00000000, cpsr, out r0_50) l000086AA
// DataOut: cpsr r0 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32)

l0000867E:
	branch r3_13 == 0x000001C3 l0000868C
// DataOut: cpsr r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32)

l0000868C:
	r5_44 = Mem0[0x000086E0:word32]
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r2:0x000001C3 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32)

l00008686:
	branch r3_13 == 0x00000000 l000086D2
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r2:0x000001C3 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32)

l000086D2:
	r5_44 = Mem0[0x000086E0:word32]
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r2:0x000001C3 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32)

l00008696:
	byte Z_79 = xQueueCRReceive(Mem0[r5_44:word32], fp - 20, 0xFFFFFFFF, cpsr, out r0_50)
	branch Z_79 l000086D8
// DataOut: cpsr r0 r4 r5
// DataOut (flags): Z
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r2:<invalid> r5:<invalid> r6:fp - 20 r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32)

l000086D8:
	Mem84[r0 + 104:word16] = 0x01C2
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r2:<invalid> r5:<invalid> r6:fp - 20 r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32)

l000086A6:
	branch Z_79 l000086C8
// DataOut: cpsr r0 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r2:<invalid> r5:<invalid> r6:fp - 20 r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32)

l000086C8:
	Mem66[r0 + 104:word16] = 0x01C3
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r5:<invalid> r6:fp - 20 r0:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000086AA:
	branch r0_50 == 0x00000001 l00008690
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r5:<invalid> r6:fp - 20 r0:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32)

l00008690:
	vParTestToggleLED(dwLoc14, cpsr)
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r2:<invalid> r5:<invalid> r6:fp - 20 r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32)

l000086AE:
	Mem59[Mem0[0x000086E4:word32]:word32] = 0x00000000
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r5:<invalid> r6:fp - 20 r0:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr
// LocalsOut: fp(32) Local -0014(32)

l00008688:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r3:<invalid> r4:r0 r2:<invalid> r5:<invalid> r6:fp - 20 r0:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

prvFlashCoRoutine_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r5:r5 r6:r6 r0:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void prvFixedDelayCoRoutine(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r4 sp
prvFixedDelayCoRoutine_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000086E8:
	byte Z_105
	word32 r0_104
	word32 r0_47
	word32 r3_9 = (word32) Mem0[r0 + 104:word16]
	branch r3_9 == 0x00000182 l00008750
// DataOut: cpsr r3 r4
// DataOut (flags): ZC
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -000C(32)

l00008750:
	Z_105 = xQueueCRSend(Mem0[Mem0[0x0000877C:word32]:word32], fp - 12, 0x00000000, cpsr, out r0_104)
// DataOut: r0 r4
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32) Local -000C(32)

l000086F8:
	branch r3_9 <=u 0x00000182 l00008748
// DataOut: cpsr r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32) Local -000C(32)

l00008748:
	branch r3_9 == 0x00000000 l0000871C
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32) Local -000C(32)

l0000874C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 -12(fp):r1 -8(fp):r4 -4(fp):lr

l000086FA:
	branch r3_9 != 0x00000183 l00008716
// DataOut: cpsr r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32) Local -000C(32)

l00008716:
	branch r3_9 != 0x00000196 l00008712
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 r2:0x00000183 -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32) Local -000C(32)

l0000871C:
	Z_105 = xQueueCRSend(Mem0[Mem0[0x0000877C:word32]:word32], fp - 12, 0x00000000, cpsr, out r0_104)
	branch Z_105 l0000876E
// DataOut: r0 r4
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 r2:0x00000183 -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32) Local -000C(32)

l0000876E:
	Mem88[r0 + 104:word16] = 0x0182
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32)

l0000872C:
	branch Z_105 l00008766
// DataOut: r0 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32) Local -000C(32)

l00008766:
	Mem76[r0 + 104:word16] = 0x0183
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32)

l00008730:
	branch r0_104 == 0x00000001 l00008702
// DataOut: r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32) Local -000C(32)

l00008734:
	Mem69[Mem0[0x00008780:word32]:word32] = 0x00000000
	r0_47 = Mem69[Mem69[0x00008778:word32] + (r1 << 2):word32]
	branch r0_47 == 0x00000000 l0000870C
// DataOut: r0 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32)

l00008746:
// DataOut: r0 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 r2:r1 r0:<invalid> r1:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32)

l00008702:
	r0_47 = Mem0[Mem0[0x00008778:word32] + (r1 << 2):word32]
	branch r0_47 != 0x00000000 l0000875E
// DataOut: r0 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32)

l0000875E:
	vCoRoutineAddToDelayedList(r0_47, 0x00000000)
// DataOut: r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 r2:r1 r0:<invalid> r1:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32)

l0000870C:
	Mem43[r0 + 104:word16] = 0x0196
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr
// LocalsOut: fp(32)

l00008712:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:r0 r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr

prvFixedDelayCoRoutine_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r2:<invalid> r0:<invalid> r1:<invalid> lr:<invalid> -12(fp):r1 -8(fp):r4 -4(fp):lr



void vStartFlashCoRoutines(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 sp
vStartFlashCoRoutines_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008784:
	branch r0 <u 0x00000008 l0000878A
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008788_1:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000878A:
	MPU_xQueueGenericCreate(0x00000001, 0x00000004, cpsr)
	Mem21[Mem0[0x000087C4:word32]:word32] = 0x00000001
	branch 0x00000001 == 0x00000000 l000087C2
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000008

l000087C2:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r0:<invalid> r2:<invalid> r5:0x00000008 r1:<invalid> r3:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000879E:
	branch 0x00000008 == 0x00000000 l000087B4
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r0:<invalid> r2:<invalid> r5:0x00000008 r1:<invalid> r3:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000087A0:
	word32 r4_43 = 0x00000000
	word32 r6_44 = Mem21[0x000087C8:word32]
// DataOut: cpsr r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r0:<invalid> r2:<invalid> r5:0x00000008 r1:<invalid> r3:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000087A4:
	xCoRoutineCreate(r6_44, 0x00000000, r4_43, cpsr)
	r4_43 = r4_43 + 0x00000001
	branch r4_43 != 0x00000008 l000087A4
// DataOut: cpsr r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r0:<invalid> r2:<invalid> r5:0x00000008 r1:<invalid> r3:<invalid> r4:<invalid> r6:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000087B4:
	word32 r0_42 = Mem21[0x000087CC:word32]
// DataOut: cpsr r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r0:<invalid> r2:<invalid> r5:0x00000008 r1:<invalid> r3:<invalid> r4:<invalid> r6:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000087BE_thunk_xCoRoutineCreate:
	xCoRoutineCreate(r0_42, 0x00000001, 0x00000000, cpsr)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:0x00000000 r5:r5 r1:0x00000001 r3:<invalid> r4:r4 r6:r6 lr:lr -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

vStartFlashCoRoutines_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r2:<invalid> r5:r5 r1:<invalid> r3:<invalid> r4:r4 r6:r6 lr:lr -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void xAreFlashCoRoutinesStillRunning()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
xAreFlashCoRoutinesStillRunning_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000087D0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

xAreFlashCoRoutinesStillRunning_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void MPU_xTaskCreateRestricted(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r0 r1 r4 r5 r6 sp
MPU_xTaskCreateRestricted_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000087DC:
	xPortRaisePrivilege(cpsr)
	xTaskCreateRestricted(r0, r1, cpsr)
	branch 0x00000000 == 0x00000000 l00008802
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l000087F6:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008802:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_xTaskCreateRestricted_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r1:<invalid> r4:r4 r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void MPU_xTaskCreate(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, word32 dwArg00, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r0 r1 r10 r2 r4 r5 r6 r7 r8 r9 sp
// Stack args: Stack +0000(32) Stack +0004(32)
MPU_xTaskCreate_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32) Stack +0004(32)

l00008808:
	xPortRaisePrivilege(cpsr)
	xTaskCreate(r0, r1, r2, r3, cpsr, dwArg00, dwArg04)
	branch 0x00000000 == 0x00000000 l00008842
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008836:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r5:r0 r8:r1 r9:r2 r10:r3 r7:<invalid> r6:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -40(fp):<invalid> -36(fp):<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr
// LocalsOut: fp(32)

l00008842:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r5:r0 r8:r1 r9:r2 r10:r3 r7:<invalid> r6:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -40(fp):<invalid> -36(fp):<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

MPU_xTaskCreate_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r8:r8 r9:r9 r10:r10 r7:r7 r6:r6 r3:<invalid> r4:r4 r2:<invalid> r1:<invalid> r0:<invalid> -40(fp):<invalid> -36(fp):<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr



void MPU_vTaskAllocateMPURegions(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r1 r4 r5 r6 sp
MPU_vTaskAllocateMPURegions_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000884C:
	xPortRaisePrivilege(cpsr)
	vTaskAllocateMPURegions(r0, r1)
	branch 0x00000000 == 0x00000000 l00008870
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008864:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r4:<invalid> r1:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008870:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r4:<invalid> r1:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_vTaskAllocateMPURegions_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r4:r4 r1:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void MPU_vTaskDelayUntil(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r1 r4 r5 r6 sp
MPU_vTaskDelayUntil_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008874:
	xPortRaisePrivilege(cpsr)
	vTaskDelayUntil(r0, r1, cpsr)
	branch 0x00000000 == 0x00000000 l00008898
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000888C:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r4:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008898:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r4:<invalid> r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_vTaskDelayUntil_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r4:r4 r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void MPU_vTaskDelay(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 sp
MPU_vTaskDelay_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000889C:
	xPortRaisePrivilege(cpsr)
	vTaskDelay(r0, cpsr)
	branch 0x00000000 == 0x00000000 l000088BC
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l000088B0:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l000088BC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_vTaskDelay_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_vTaskSuspendAll(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: r4 sp
MPU_vTaskSuspendAll_entry:
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000088C0:
	xPortRaisePrivilege(cpsr)
	vTaskSuspendAll()
	branch 0x00000000 == 0x00000000 l000088DC
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l000088D0:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r2:<invalid> r3:<invalid> r0:0x00000001 -8(fp):r4 -4(fp):lr

l000088DC:
	return
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> -8(fp):r4 -4(fp):lr

MPU_vTaskSuspendAll_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r0:<invalid> r2:<invalid> r3:<invalid> -8(fp):r4 -4(fp):lr



void MPU_xTaskResumeAll(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r0 r4 sp
MPU_xTaskResumeAll_entry:
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000088E0:
	xPortRaisePrivilege(cpsr)
	xTaskResumeAll(cpsr)
	branch 0x00000000 == 0x00000000 l000088FE
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l000088F2:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

l000088FE:
	return
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr

MPU_xTaskResumeAll_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> -8(fp):r4 -4(fp):lr



void MPU_xTaskGetTickCount(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: r0 r4 sp
MPU_xTaskGetTickCount_entry:
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008904:
	xPortRaisePrivilege(cpsr)
	xTaskGetTickCount()
	branch 0x00000000 == 0x00000000 l00008922
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008916:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr

l00008922:
	return
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr

MPU_xTaskGetTickCount_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr



void MPU_uxTaskGetNumberOfTasks(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: r0 r4 sp
MPU_uxTaskGetNumberOfTasks_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008928:
	xPortRaisePrivilege(cpsr)
	uxTaskGetNumberOfTasks()
	branch 0x00000000 == 0x00000000 l00008946
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000893A:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr

l00008946:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr

MPU_uxTaskGetNumberOfTasks_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr



void MPU_pcTaskGetName(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0
// Preserved: r0 r3 r4 r5 sp
MPU_pcTaskGetName_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000894C:
	xPortRaisePrivilege(cpsr)
	pcTaskGetName(r0)
	branch 0x00000000 == 0x00000000 l0000896E
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008962:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000896E:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_pcTaskGetName_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_vTaskSetTimeOutState(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r3 r4 r5 sp
MPU_vTaskSetTimeOutState_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008974:
	xPortRaisePrivilege(cpsr)
	vTaskSetTimeOutState(r0)
	branch 0x00000000 == 0x00000000 l00008994
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008988:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008994:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_vTaskSetTimeOutState_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_xTaskCheckForTimeOut(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r0 r1 r4 r5 r6 sp
MPU_xTaskCheckForTimeOut_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008998:
	xPortRaisePrivilege(cpsr)
	xTaskCheckForTimeOut(r0, r1, cpsr)
	branch 0x00000000 == 0x00000000 l000089BE
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l000089B2:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000089BE:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_xTaskCheckForTimeOut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r1:<invalid> r4:r4 r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void MPU_xTaskGenericNotify(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r0 r1 r2 r4 r5 r6 r7 r8 sp
MPU_xTaskGenericNotify_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000089C4:
	xPortRaisePrivilege(cpsr)
	xTaskGenericNotify(r0, r1, r2, r3, cpsr)
	branch 0x00000000 == 0x00000000 l000089F4
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l000089E8:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r6:r1 r7:r2 r8:r3 r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000089F4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r6:r1 r7:r2 r8:r3 r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

MPU_xTaskGenericNotify_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r7:r7 r8:r8 r3:<invalid> r4:r4 r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void MPU_xTaskNotifyWait(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r0 r1 r2 r4 r5 r6 r7 r8 sp
MPU_xTaskNotifyWait_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000089FC:
	xPortRaisePrivilege(cpsr)
	xTaskNotifyWait(r0, r1, r2, r3, cpsr)
	branch 0x00000000 == 0x00000000 l00008A2C
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008A20:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r6:r1 r7:r2 r8:r3 r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008A2C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r6:r1 r7:r2 r8:r3 r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

MPU_xTaskNotifyWait_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r7:r7 r8:r8 r3:<invalid> r4:r4 r2:<invalid> r1:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void MPU_ulTaskNotifyTake(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r0 r1 r4 r5 r6 sp
MPU_ulTaskNotifyTake_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008A34:
	xPortRaisePrivilege(cpsr)
	ulTaskNotifyTake(r0, r1, cpsr)
	branch 0x00000000 == 0x00000000 l00008A5A
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008A4E:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008A5A:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_ulTaskNotifyTake_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r1:<invalid> r4:r4 r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void MPU_xTaskNotifyStateClear(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r0 r3 r4 r5 sp
MPU_xTaskNotifyStateClear_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008A60:
	xPortRaisePrivilege(cpsr)
	xTaskNotifyStateClear(r0, cpsr)
	branch 0x00000000 == 0x00000000 l00008A82
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008A76:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008A82:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_xTaskNotifyStateClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_xQueueGenericCreate(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r0 r1 r2 r3 r4 r5 r6 r7 sp
MPU_xQueueGenericCreate_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008A88:
	xPortRaisePrivilege(cpsr)
	xQueueGenericCreate(r0, r1, cpsr)
	branch 0x00000000 == 0x00000000 l00008AB2
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008AA6:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r6:r1 r7:r2 r2:<invalid> r4:<invalid> r1:<invalid> r0:<invalid> r3:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00008AB2:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r6:r1 r7:r2 r2:<invalid> r4:<invalid> r1:<invalid> r0:<invalid> r3:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

MPU_xQueueGenericCreate_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r7:r7 r2:<invalid> r4:r4 r1:<invalid> r0:<invalid> r3:r3 -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



void MPU_xQueueGenericReset(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r0 r1 r4 r5 r6 sp
MPU_xQueueGenericReset_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008AB8:
	xPortRaisePrivilege(cpsr)
	xQueueGenericReset(r0, r1, cpsr)
	branch 0x00000000 == 0x00000000 l00008ADE
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008AD2:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008ADE:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_xQueueGenericReset_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r1:<invalid> r4:r4 r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void MPU_xQueueGenericSend(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r0 r1 r2 r4 r5 r6 r7 r8 sp
MPU_xQueueGenericSend_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008AE4:
	xPortRaisePrivilege(cpsr)
	xQueueGenericSend(r0, r1, r2, r3, cpsr)
	branch 0x00000000 == 0x00000000 l00008B14
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008B08:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r6:r1 r7:r2 r8:r3 r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008B14:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r6:r1 r7:r2 r8:r3 r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

MPU_xQueueGenericSend_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r7:r7 r8:r8 r3:<invalid> r4:r4 r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void MPU_uxQueueMessagesWaiting(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r0 r3 r4 r5 sp
MPU_uxQueueMessagesWaiting_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008B1C:
	xPortRaisePrivilege(cpsr)
	uxQueueMessagesWaiting(r0, cpsr)
	branch 0x00000000 == 0x00000000 l00008B3E
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008B32:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008B3E:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_uxQueueMessagesWaiting_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_uxQueueSpacesAvailable(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r0 r3 r4 r5 sp
MPU_uxQueueSpacesAvailable_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008B44:
	xPortRaisePrivilege(cpsr)
	uxQueueSpacesAvailable(r0, cpsr)
	branch 0x00000000 == 0x00000000 l00008B66
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008B5A:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008B66:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_uxQueueSpacesAvailable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_xQueueGenericReceive(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r0 r1 r2 r4 r5 r6 r7 r8 sp
MPU_xQueueGenericReceive_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008B6C:
	xPortRaisePrivilege(cpsr)
	xQueueGenericReceive(r0, r1, r2, r3, cpsr)
	branch 0x00000000 == 0x00000000 l00008B9C
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008B90:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r6:r1 r7:r2 r8:r3 r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008B9C:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r6:r1 r7:r2 r8:r3 r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

MPU_xQueueGenericReceive_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r7:r7 r8:r8 r3:<invalid> r4:r4 r2:<invalid> r1:<invalid> r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void MPU_xQueuePeekFromISR(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r0 r1 r4 r5 r6 sp
MPU_xQueuePeekFromISR_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008BA4:
	xPortRaisePrivilege(cpsr)
	xQueuePeekFromISR(r0, r1, cpsr)
	branch 0x00000000 == 0x00000000 l00008BCA
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008BBE:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008BCA:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_xQueuePeekFromISR_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r1:<invalid> r4:r4 r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void MPU_xQueueGetMutexHolder(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r2
// Preserved: r0 r3 r4 r5 sp
MPU_xQueueGetMutexHolder_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008BD0:
	xPortRaisePrivilege(cpsr)
	xQueueGetMutexHolder(r0, cpsr)
	branch 0x00000000 == 0x00000000 l00008BF2
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008BE6:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008BF2:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_xQueueGetMutexHolder_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_xQueueCreateMutex(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: r0 r3 r4 r5 sp
MPU_xQueueCreateMutex_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008BF8:
	xPortRaisePrivilege(cpsr)
	xQueueCreateMutex(cpsr)
	branch 0x00000000 == 0x00000000 l00008C1A
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008C0E:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008C1A:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_xQueueCreateMutex_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> r1:<invalid> lr:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_xQueueTakeMutexRecursive(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r0 r1 r4 r5 r6 sp
MPU_xQueueTakeMutexRecursive_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008C20:
	xPortRaisePrivilege(cpsr)
	xQueueTakeMutexRecursive(r0, r1, cpsr)
	branch 0x00000000 == 0x00000000 l00008C46
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008C3A:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008C46:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_xQueueTakeMutexRecursive_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r1:<invalid> r4:r4 r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void MPU_xQueueGiveMutexRecursive(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV lr r0 r1 r2
// Preserved: r0 r3 r4 r5 sp
MPU_xQueueGiveMutexRecursive_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008C4C:
	xPortRaisePrivilege(cpsr)
	xQueueGiveMutexRecursive(r0, cpsr)
	branch 0x00000000 == 0x00000000 l00008C6E
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008C62:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008C6E:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> lr:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_xQueueGiveMutexRecursive_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> r1:<invalid> lr:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_vQueueDelete(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0
// Preserved: r3 r4 r5 sp
MPU_vQueueDelete_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008C74:
	xPortRaisePrivilege(cpsr)
	vQueueDelete()
	branch 0x00000000 == 0x00000000 l00008C94
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008C88:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008C94:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_vQueueDelete_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_pvPortMalloc(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r0 r3 r4 r5 sp
MPU_pvPortMalloc_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008C98:
	xPortRaisePrivilege(cpsr)
	pvPortMalloc(r0, cpsr)
	branch 0x00000000 == 0x00000000 l00008CBA
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008CAE:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008CBA:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_pvPortMalloc_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r2:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_vPortFree(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0
// Preserved: r3 r4 r5 sp
MPU_vPortFree_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008CC0:
	xPortRaisePrivilege(cpsr)
	vPortFree()
	branch 0x00000000 == 0x00000000 l00008CE0
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008CD4:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008CE0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_vPortFree_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void MPU_vPortInitialiseBlocks(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: r4 sp
MPU_vPortInitialiseBlocks_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008CE4:
	xPortRaisePrivilege(cpsr)
	vPortInitialiseBlocks()
	branch 0x00000000 == 0x00000000 l00008D00
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008CF4:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r2:0x00000000 r3:<invalid> r0:0x00000001 -8(fp):r4 -4(fp):lr

l00008D00:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r0:<invalid> r2:0x00000000 r3:<invalid> -8(fp):r4 -4(fp):lr

MPU_vPortInitialiseBlocks_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r0:<invalid> r2:0x00000000 r3:<invalid> -8(fp):r4 -4(fp):lr



void MPU_xPortGetFreeHeapSize(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: r0 r4 sp
MPU_xPortGetFreeHeapSize_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008D04:
	xPortRaisePrivilege(cpsr)
	xPortGetFreeHeapSize()
	branch 0x00000000 == 0x00000000 l00008D22
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008D16:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr

l00008D22:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr

MPU_xPortGetFreeHeapSize_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r0:<invalid> -8(fp):r4 -4(fp):lr



void MPU_xEventGroupCreate(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r0 r4 sp
MPU_xEventGroupCreate_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008D28:
	xPortRaisePrivilege(cpsr)
	xEventGroupCreate(cpsr)
	branch 0x00000000 == 0x00000000 l00008D46
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008D3A:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> -8(fp):r4 -4(fp):lr

l00008D46:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> -8(fp):r4 -4(fp):lr

MPU_xEventGroupCreate_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> -8(fp):r4 -4(fp):lr



void MPU_xEventGroupWaitBits(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r0 r1 r2 r4 r5 r6 r7 r8 r9 sp
// Stack args: Stack +0000(32)
MPU_xEventGroupWaitBits_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00008D4C:
	xPortRaisePrivilege(cpsr)
	xEventGroupWaitBits(r0, r1, r2, r3, cpsr, dwArg00)
	branch 0x00000000 == 0x00000000 l00008D82
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008D76:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r5:r0 r6:r1 r8:r2 r9:r3 r7:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -40(fp):<invalid> -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr
// LocalsOut: fp(32)

l00008D82:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r5:r0 r6:r1 r8:r2 r9:r3 r7:<invalid> r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> -40(fp):<invalid> -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr

MPU_xEventGroupWaitBits_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r8:r8 r9:r9 r7:r7 r3:<invalid> r4:r4 r2:<invalid> r1:<invalid> r0:<invalid> -40(fp):<invalid> -28(fp):r4 -24(fp):r5 -20(fp):r6 -16(fp):r7 -12(fp):r8 -8(fp):r9 -4(fp):lr



void MPU_xEventGroupClearBits(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: r0 r1 r4 r5 r6 sp
MPU_xEventGroupClearBits_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008D8C:
	xPortRaisePrivilege(cpsr)
	xEventGroupClearBits(r0, r1, cpsr)
	branch 0x00000000 == 0x00000000 l00008DB2
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008DA6:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:r1 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008DB2:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:r1 r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_xEventGroupClearBits_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r1:r1 r4:r4 r0:<invalid> r3:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void MPU_xEventGroupSetBits(word32 r0, word32 r1, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r0 r1 r4 r5 r6 sp
MPU_xEventGroupSetBits_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008DB8:
	xPortRaisePrivilege(cpsr)
	xEventGroupSetBits(r0, r1, cpsr)
	branch 0x00000000 == 0x00000000 l00008DDE
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008DD2:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008DDE:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r6:r1 r1:<invalid> r4:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

MPU_xEventGroupSetBits_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r1:<invalid> r4:r4 r0:<invalid> r3:<invalid> r2:<invalid> lr:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void MPU_xEventGroupSync(word32 r0, word32 r1, word32 r2, word32 r3, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV lr r0 r1 r2 r3
// Preserved: r0 r1 r2 r4 r5 r6 r7 r8 sp
MPU_xEventGroupSync_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008DE4:
	xPortRaisePrivilege(cpsr)
	xEventGroupSync(r0, r1, r2, r3, cpsr)
	branch 0x00000000 == 0x00000000 l00008E14
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008E08:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r6:r1 r7:r2 r8:r3 r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008E14:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:r0 r6:r1 r7:r2 r8:r3 r3:<invalid> r4:<invalid> r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

MPU_xEventGroupSync_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r6:r6 r7:r7 r8:r8 r3:<invalid> r4:r4 r2:<invalid> r1:<invalid> r0:<invalid> lr:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void MPU_vEventGroupDelete(word32 r0, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 sp
MPU_vEventGroupDelete_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008E1C:
	xPortRaisePrivilege(cpsr)
	vEventGroupDelete(r0, cpsr)
	branch 0x00000000 == 0x00000000 l00008E3C
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008E30:
	__msr(cpsr, __mrs(cpsr) | 0x00000001)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l00008E3C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r0 r4:<invalid> r0:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

MPU_vEventGroupDelete_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r0:<invalid> r3:r3 r1:<invalid> r2:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void xCoRoutineCreate(word32 r0, word32 r1, word32 r2, word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr r0 r1 r2
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: fp r10 r3 r4 r5 r6 r7 r8 r9 sp
xCoRoutineCreate_entry:
// DataOut: cpsr r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008E40:
	word32 r5_27 = r1
	word32 r0_31 = pvPortMalloc(0x00000038, cpsr)
	branch r0_31 == 0x00000000 l00008EE4
// DataOut: cpsr r0 r10 r5 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008EE4:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r9:r0 r0:<invalid> r5:r1 r10:r2 r3:<invalid> r2:<invalid> r1:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00008E54:
	word32 r7_50 = Mem0[0x00008EEC:word32]
	branch Mem0[r7_50:word32] == 0x00000000 l00008EAC
// DataOut: cpsr r0 r10 r4 r5 r7 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r9:r0 r0:<invalid> r5:r1 r10:r2 r3:<invalid> r2:<invalid> r1:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00008EAC:
	Mem95[r7_50:word32] = r0_31
	vListInitialise(r7_50 + 4)
	vListInitialise(r7_50 + 0x00000018)
	vListInitialise(r7_50 + 0x0000002C)
	vListInitialise(r7_50 + 0x00000040)
	vListInitialise(r7_50 + 0x00000054)
	Mem104[r7_50 + 104:word32] = r7_50 + 0x0000002C
	Mem105[r7_50 + 108:word32] = r7_50 + 0x00000040
// DataOut: cpsr r10 r4 r5 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r9:r0 r0:<invalid> r5:r1 r10:r2 r7:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00008E5C:
// DataOut: cpsr r10 r4 r5 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r9:r0 r0:<invalid> r5:r1 r10:r2 r7:<invalid> r4:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00008E60:
	branch r1 <u 0x00000001 l00008E66
// DataOut: cpsr r10 r4 r5 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r9:r0 r0:<invalid> r5:r1 r10:r2 r7:<invalid> r4:<invalid> r3:<invalid> r8:<invalid> r1:<invalid> r2:<invalid> fp:<invalid> r6:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00008E64_1:
	r5_27 = 0x00000001
// DataOut: cpsr r10 r4 r5 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r9:r0 r0:<invalid> r5:r1 r10:r2 r7:<invalid> r4:<invalid> r3:<invalid> r8:<invalid> r1:<invalid> r2:<invalid> fp:<invalid> r6:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00008E66:
	Mem62[r0_31 + 104:word16] = 0x0000
	Mem63[r0_31 + 44:word32] = r5_27
	Mem64[r0_31 + 48:word32] = r2
	Mem65[r0_31:word32] = r0
	vListInitialiseItem(r0_31 + 4)
	vListInitialiseItem(r0_31 + 0x00000018)
	word32 r0_69 = Mem65[r0_31 + 44:word32]
	word32 r5_71 = 0x00000002 - r5_27
	branch r0_69 <=u Mem65[r7_50 + 112:word32] l00008E92
// DataOut: cpsr r0 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r9:r0 r0:<invalid> r5:<invalid> r10:r2 r7:<invalid> r4:<invalid> r3:<invalid> r8:<invalid> r1:<invalid> r2:<invalid> fp:<invalid> r6:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00008E90_1:
	Mem91[r7_50 + 112:word32] = r0_69
// DataOut: cpsr r0 r4 r5 r6 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r9:r0 r0:<invalid> r5:<invalid> r10:r2 r7:<invalid> r4:<invalid> r3:<invalid> r8:<invalid> r1:<invalid> r2:<invalid> fp:<invalid> r6:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

l00008E92:
	Mem76[r0_31 + 24:word32] = r5_71
	Mem77[r0_31 + 16:word32] = r0_31
	Mem78[r0_31 + 36:word32] = r0_31
	vListInsertEnd(r7_50 + 0x00000004 + r0_69 * 0x00000014, r0_31 + 4)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 40 r9:r0 r0:<invalid> r5:<invalid> r10:r2 r7:<invalid> r4:<invalid> r3:<invalid> r8:<invalid> r1:<invalid> r2:<invalid> fp:<invalid> r6:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr

xCoRoutineCreate_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r9:r9 r0:<invalid> r5:r5 r10:r10 r3:r3 r4:r4 r6:r6 r7:r7 r8:r8 fp:fp r1:<invalid> r2:<invalid> -40(fp):r3 -36(fp):r4 -32(fp):r5 -28(fp):r6 -24(fp):r7 -20(fp):r8 -16(fp):r9 -12(fp):r10 -8(fp):fp -4(fp):lr



bool vCoRoutineAddToDelayedList(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut: Z
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 sp
vCoRoutineAddToDelayedList_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008EF0:
	word32 r4_14 = Mem0[0x00008F28:word32]
	word32 r5_18 = Mem0[r4_14 + 116:word32] + r0
	uxListRemove(Mem0[r4_14:word32] + 0x00000004)
	word32 r3_22 = Mem0[r4_14 + 116:word32]
	word32 r1_23 = Mem0[r4_14:word32]
	Mem26[r1_23 + 4:word32] = r5_18
	branch r5_18 >=u r3_22 l00008F0E
// DataOut: cpsr r1 r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008F0C_1:
// DataOut: cpsr r1 r4 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r1 r4:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008F0E:
	bool Z_31 = vListInsert(Mem26[r4_14 + 104:word32], r1_23 + 0x00000004)
	branch r1 == 0x00000000 l00008F26
// DataOut: cpsr r4 r6
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r6:r1 r4:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008F26:
	return Z_31
// DataOut: cpsr
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r6:r1 r4:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008F18:
	word32 r1_43 = Mem26[r4_14:word32]
// DataOut: cpsr r0 r1
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r6:r1 r4:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00008F22_thunk_vListInsert:
	return vListInsert(r1, r1_43 + 0x00000018)
// DataOut: cpsr
// DataOut (flags): Z
// SymbolicIn: sp:fp r6:r6 r4:r4 r3:<invalid> r5:r5 r0:r1 r1:<invalid> lr:lr r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

vCoRoutineAddToDelayedList_exit:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp r6:r6 r4:r4 r3:<invalid> r5:r5 r0:<invalid> r1:<invalid> lr:lr r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void vCoRoutineSchedule(word32 cpsr)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cpsr
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 r7 r8 sp
vCoRoutineSchedule_entry:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00008F2C:
	word32 r5_16 = Mem0[0x00009088:word32]
	branch Mem0[r5_16 + 84:word32] == 0x00000000 l00008F82
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00008F36:
// DataOut: cpsr r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008F3C:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r4_236 = Mem0[Mem0[r5_16 + 96:word32] + 12:word32]
	uxListRemove(r4_236 + 0x00000018)
	__msr(cpsr, 0x00000000)
	uxListRemove(r4_236 + 0x00000004)
	word32 r3_242 = Mem0[r4_236 + 44:word32]
	r0 = r5_16 + 0x00000004 + r3_242 * 0x00000014
	branch r3_242 <=u Mem0[r5_16 + 112:word32] l00008F78
// DataOut: cpsr r0 r1 r3 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r8:<invalid> r4:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008F76_1:
	Mem252[r5_16 + 112:word32] = r3_242
// DataOut: cpsr r0 r1 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r8:<invalid> r4:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008F78:
	vListInsertEnd(r0, r4_236 + 0x00000004)
	branch Mem0[r5_16 + 84:word32] != 0x00000000 l00008F3C
// DataOut: cpsr r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r8:<invalid> r4:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008F82:
	MPU_xTaskGetTickCount(cpsr)
	word32 r3_169 = Mem0[r5_16 + 116:word32]
	word32 r0_168 = r0 - Mem0[r5_16 + 120:word32]
	word32 r8_35 = Mem0[0x00009090:word32]
	Mem36[r5_16 + 124:word32] = r0_168
// DataOut: cpsr r0 r3 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r8:<invalid> r4:<invalid> r0:<invalid> r2:<invalid> r1:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008F94:
	branch r0_168 == 0x00000000 l00009014
// DataOut: cpsr r0 r3 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> r1:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008F98:
	word32 r2_178
	r3_169 = r3_169 + 0x00000001
	Mem174[r5_16 + 116:word32] = r3_169
	r0_168 = r0_168 - 0x00000001
	Mem175[r5_16 + 124:word32] = r0_168
	branch r3_169 == 0x00000000 l0000904C
// DataOut: cpsr r0 r3 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> r1:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000904C:
	r2_178 = Mem175[r5_16 + 108:word32]
	Mem229[r5_16 + 108:word32] = Mem175[r5_16 + 104:word32]
	Mem230[r5_16 + 104:word32] = r2_178
// DataOut: cpsr r0 r2 r3 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> r1:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FA4:
	r2_178 = Mem175[r5_16 + 104:word32]
// DataOut: cpsr r0 r2 r3 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> r1:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FA6:
	branch Mem175[r2_178:word32] == 0x00000000 l00008F94
// DataOut: cpsr r0 r2 r3 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FAC:
	word32 r4_183 = Mem175[Mem175[r2_178 + 12:word32] + 12:word32]
	branch r3_169 >=u Mem175[r4_183 + 4:word32] l00008FC4
// DataOut: cpsr r0 r3 r4 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FC4:
	__msr(cpsr, 0x000000BF)
	__isb_sy()
	__dsb_sy()
	word32 r6_194 = r4_183 + 0x00000004
	uxListRemove(r6_194)
	word32 r0_198 = r4_183 + 0x00000018
	branch Mem175[r4_183 + 40:word32] == 0x00000000 l00008FE8
// DataOut: cpsr r0 r4 r5 r6 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FE4:
	uxListRemove(r0_198)
// DataOut: cpsr r4 r5 r6 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:0x00000000 r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FE8:
	__msr(cpsr, 0x00000000)
	word32 r3_199 = Mem175[r4_183 + 44:word32]
	word32 r0_205 = r8_35 + r3_199 * 0x00000014
	branch r3_199 <=u Mem175[r5_16 + 112:word32] l00009000
// DataOut: cpsr r0 r1 r3 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:0x00000000 r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FFE_1:
	Mem224[r5_16 + 112:word32] = r3_199
// DataOut: cpsr r0 r1 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009000:
	vListInsertEnd(r0_205, r6_194)
	word32 r3_206 = Mem175[r5_16 + 104:word32]
	branch Mem175[r3_206:word32] != 0x00000000 l00008FB8
// DataOut: cpsr r3 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FB8:
	r4_183 = Mem175[Mem175[r3_206 + 12:word32] + 12:word32]
	r3_169 = Mem175[r5_16 + 116:word32]
	branch Mem175[r4_183 + 4:word32] >u r3_169 l0000900E
// DataOut: cpsr r3 r4 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000900C:
	r3_169 = Mem175[r5_16 + 116:word32]
// DataOut: cpsr r3 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000900E:
	r0_168 = Mem175[r5_16 + 124:word32]
	branch r0_168 != 0x00000000 l00008F98
// DataOut: cpsr r0 r3 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009014:
	word32 r2_128
	word32 r1_54 = Mem36[r5_16 + 112:word32]
	Mem55[r5_16 + 120:word32] = r3_169
	word32 r3_129 = r1_54 << 2
	branch Mem55[r5_16 + r1_54 * 0x00000014 + 4:word32] != 0x00000000 l00009084
// DataOut: cpsr r1 r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r4:<invalid> r1:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009084:
	r2_128 = r1_54
// DataOut: cpsr r2 r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009026:
	branch r1_54 == 0x00000000 l00009080
// DataOut: cpsr r1 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009080:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009028:
	r3_129 = r1_54 - 0x00000001 << 2
	r2_128 = r1_54 - 0x00000001
	branch Mem55[r5_16 + (r3_129 + (r1_54 - 0x00000001) << 0x00000002) + 4:word32] != 0x00000000 l00009056
// DataOut: cpsr r1 r2 r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009036:
	branch r1_54 == 0x00000001 l00009046
// DataOut: cpsr r1 r2 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009038:
	r3_129 = r1_54 - 0x00000002 << 2
	r2_128 = r1_54 - 0x00000002
	branch Mem55[r5_16 + (r3_129 + (r1_54 - 0x00000002) << 0x00000002) + 4:word32] != 0x00000000 l00009056
// DataOut: cpsr r2 r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009056:
	Mem138[r5_16 + 112:word32] = r2_128
// DataOut: cpsr r2 r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009058:
	word32 r2_127
	word32 r3_82 = r3_129 + r2_128
	word32 r1_84 = r5_16 + (r3_82 << 2)
	word32 r2_87 = Mem55[Mem55[r1_84 + 8:word32] + 4:word32]
	word32 r3_88 = (r3_82 << 2) + Mem55[0x0000908C:word32]
	Mem94[r1_84 + 8:word32] = r2_87
	r2_127 = r2_87
	branch r2_87 != r3_88 l0000906E
// DataOut: cpsr r1 r2 r5
// DataOut (flags): Z
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000906C_1:
	r2_127 = Mem94[r2_87 + 4:word32]
// DataOut: cpsr r1 r2 r5
// DataOut (flags): Z
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000906E:
	word32 r0_96 = Mem94[r2_127 + 12:word32]
	branch r2_87 != r3_88 l00009074
// DataOut: cpsr r0 r1 r2 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009072_1:
	Mem126[r1_84 + 8:word32] = r2_127
// DataOut: cpsr r0 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009074:
	Mem97[r5_16:word32] = r0_96
	word32 r3_98 = Mem97[r0_96:word32]
	word32 sp_108
	word32 r4_109
	word32 r5_110
	word32 r6_111
	word32 r7_112
	word32 r8_113
	word32 lr_114
	word32 pc_115
	word32 r3_116
	word32 cpsr_117
	word32 r0_118
	word32 r2_119
	byte NZCV_120
	word32 r1_121
	byte ZC_122
	byte Z_123
	byte C_124
	byte NZC_125
	call r3_98 (retsize: 0;)
		uses: C_92,cpsr,dwLoc04_14,dwLoc08_12,dwLoc0C_10,dwLoc10_8,dwLoc14_6,dwLoc18_4,lr_105,NZC_93,NZCV_89,pc,r0_96,r1_99,r2_95,r3_98,r4_100,r5_101,r6_102,r7_103,r8_104,sp_106,Z_91,ZC_90
		defs: C_124,cpsr_117,lr_114,NZC_125,NZCV_120,pc_115,r0_118,r1_121,r2_119,r3_116,r4_109,r5_110,r6_111,r7_112,r8_113,sp_108,Z_123,ZC_122
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009046:
	Mem143[r5_16 + 112:word32] = r2_128
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

vCoRoutineSchedule_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r3:<invalid> r7:r7 r2:<invalid> r0:<invalid> r8:r8 r1:<invalid> r4:r4 r6:r6 lr:lr -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00008FB6:
// DataOut: cpsr r0 r3 r5 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r3:<invalid> r7:0x00000000 r2:<invalid> r0:<invalid> r8:<invalid> r1:<invalid> r4:<invalid> r6:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



bool xCoRoutineRemoveFromEventList(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut: Z
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 sp
xCoRoutineRemoveFromEventList_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009094:
	word32 r4_14 = Mem0[Mem0[r0 + 12:word32] + 12:word32]
	word32 r5_15 = Mem0[0x000090C0:word32]
	uxListRemove(r4_14 + 0x00000018)
	vListInsertEnd(r5_15 + 0x00000054, r4_14 + 0x00000018)
	word32 r0_22 = Mem0[r4_14 + 44:word32]
	word32 r3_23 = Mem0[Mem0[r5_15:word32] + 44:word32]
	bool Z_25 = (bool) cond(r0_22 - r3_23)
	branch r0_22 >=u r3_23 l000090BC
// DataOut: cpsr
// DataOut (flags): Z
// SymbolicIn: sp:fp

l000090BA_1:
// DataOut: cpsr
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000090BC:
	return Z_25
// DataOut: cpsr
// DataOut (flags): Z
// SymbolicIn: sp:fp - 16 r3:<invalid> r4:<invalid> r5:<invalid> r6:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

xCoRoutineRemoveFromEventList_exit:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r5:r5 r6:r6 r0:0x00000001 r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void GPIOGetIntNumber(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: sp
GPIOGetIntNumber_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l000090C4:
	word32 r3_3 = Mem0[0x00009104:word32]
	branch r0 == r3_3 l000090FE
// DataOut: r0 r3
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000090FE:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090CA:
	branch r0 >u r3_3 l000090DE
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090DE:
	word32 r3_23 = Mem0[0x00009108:word32]
	branch r0 == r3_23 l000090F6
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090F6:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090E4:
	branch r0 != r3_23 + 0x0001D000 l000090F0
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090EC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090CC:
	branch r0 == 0x40004000 l000090FA
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090FA:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090D2:
	branch r0 != r3_3 - 0x00001000 l000090F0
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090F0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l000090DA:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

GPIOGetIntNumber_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void GPIODirModeSet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIODirModeSet_entry:
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000910C:
	word32 r3_20 = Mem0[r0 + 1024:word32]
	branch (r2 & 0x00000001) == 0x00000000 l00009118
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009116_1:
	r3_20 = r3_20 | r1
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00009118:
	Mem11[r0 + 1024:word32] = r3_20 & ~r1
	word32 r3_12 = Mem11[r0 + 1056:word32]
	branch r2 << 30 >= 0x00000000 l00009128
// DataOut: r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00009126_1:
	r1 = r1 | r3_12
// DataOut: r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r2 << 30

l00009128:
	Mem18[r0 + 1056:word32] = r3_12 & ~(r1 << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r2 << 30 r1:<invalid>

GPIODirModeSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r2 << 30 r1:<invalid>



void GPIODirModeGet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 sp
GPIODirModeGet_entry:
// DataOut: r0 r1
// DataOut (flags): C
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009134:
	word32 r1_11 = (uint32) (byte) (0x00000001 << r1)
	word32 r2_12 = Mem0[r0 + 1056:word32]
	word32 r4_14 = Mem0[r0 + 1024:word32] + r1_11 + C
	branch r4_14 != 0x00000000 l0000914C
// DataOut: r1 r2 r3
// DataOut (flags): C
// SymbolicIn: sp:fp

l0000914A_1:
// DataOut: r1 r2 r3
// DataOut (flags): C
// SymbolicIn: sp:fp - 4 r3:0x00000001 r1:<invalid> r4:<invalid> r2:<invalid> -4(fp):r4

l0000914C:
	branch r2_12 + r1_11 + (r4_14 <u 0x00000000) == 0x00000000 l00009152
// DataOut: r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r3:<invalid> r1:<invalid> r4:<invalid> r2:<invalid> -4(fp):r4

l00009150_1:
// DataOut: r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r3:<invalid> r1:<invalid> r4:<invalid> r2:<invalid> -4(fp):r4

l00009152:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r3:<invalid> r1:<invalid> r4:<invalid> r2:<invalid> r0:0x00000002 -4(fp):r4

GPIODirModeGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid> r4:r4 r2:<invalid> r0:<invalid> -4(fp):r4



void GPIOIntTypeSet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIOIntTypeSet_entry:
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000915C:
	word32 r3_27 = Mem0[r0 + 1032:word32]
	branch (r2 & 0x00000001) == 0x00000000 l00009168
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009166_1:
	r3_27 = r3_27 | r1
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00009168:
	Mem11[r0 + 1032:word32] = r3_27 & ~r1
	word32 r3_12 = Mem11[r0 + 1028:word32]
	branch (r2 & 0x00000002) == 0x00000000 l0000917A
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00009178_1:
	r3_12 = r3_12 | r1
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l0000917A:
	Mem17[r0 + 1028:word32] = r3_12 & ~r1
	word32 r3_18 = Mem17[r0 + 1036:word32]
	branch r2 << 29 >= 0x00000000 l0000918A
// DataOut: r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00009188_1:
	r1 = r1 | r3_18
// DataOut: r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r2 << 29

l0000918A:
	Mem24[r0 + 1036:word32] = r3_18 & ~(r1 << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r2 << 29 r1:<invalid>

GPIOIntTypeSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r2 << 29 r1:<invalid>



void GPIOIntTypeGet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
GPIOIntTypeGet_entry:
// DataOut: r0 r1
// DataOut (flags): C
// SymbolicIn: sp:fp

l00009194:
	word32 r1_8 = (uint32) (byte) (0x00000001 << r1)
	word32 r3_9 = Mem0[r0 + 1028:word32]
	word32 r2_11 = Mem0[r0 + 1032:word32] + r1_8 + C
	word32 r0_16 = Mem0[r0 + 1036:word32]
	branch r2_11 == 0x00000000 l000091AE
// DataOut: r0 r1 r3
// DataOut (flags): C
// SymbolicIn: sp:fp

l000091AC_1:
// DataOut: r0 r1 r3
// DataOut (flags): C
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid>

l000091AE:
	word32 r3_18 = r3_9 + r1_8 + (r2_11 <u 0x00000000)
	branch r3_18 == 0x00000000 l000091B6
// DataOut: r0 r1
// DataOut (flags): C
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r1:<invalid> r0:<invalid>

l000091B4_1:
// DataOut: r0 r1
// DataOut (flags): C
// SymbolicIn: sp:fp r3:<invalid> r2:0x00000000 r1:<invalid> r0:<invalid>

l000091B6:
	branch r0_16 + r1_8 + (r3_18 <u 0x00000000) == 0x00000000 l000091BE
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:0x00000000 r1:<invalid> r0:<invalid>

l000091BC_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000000 r2:0x00000000 r1:<invalid> r0:<invalid>

l000091BE:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000000 r2:0x00000000 r1:<invalid> r0:<invalid>

GPIOIntTypeGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000000 r2:0x00000000 r1:<invalid> r0:0x00000000



void GPIOPadConfigSet(word32 r0, word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2 r3
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: r4 sp
GPIOPadConfigSet_entry:
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000091C8:
	word32 r4_11 = Mem0[r0 + 1280:word32]
	branch (r2 & 0x00000001) == 0x00000000 l000091D6
// DataOut: cpsr r0 r1 r2 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l000091D4_1:
	r4_11 = r4_11 | r1
// DataOut: cpsr r0 r1 r2 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:<invalid> -4(fp):r4

l000091D6:
	Mem14[r0 + 1280:word32] = r4_11 & ~r1
	word32 r4_15 = Mem14[r0 + 1284:word32]
	branch (r2 & 0x00000002) == 0x00000000 l000091E8
// DataOut: cpsr r0 r1 r2 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:<invalid> -4(fp):r4

l000091E6_1:
	r4_15 = r4_15 | r1
// DataOut: cpsr r0 r1 r2 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:<invalid> -4(fp):r4

l000091E8:
	Mem20[r0 + 1284:word32] = r4_15 & ~r1
	word32 r4_21 = Mem20[r0 + 1288:word32]
	branch (r2 & 0x00000004) == 0x00000000 l000091FA
// DataOut: cpsr r0 r1 r2 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:<invalid> -4(fp):r4

l000091F8_1:
	r4_21 = r4_21 | r1
// DataOut: cpsr r0 r1 r2 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:<invalid> -4(fp):r4

l000091FA:
	Mem26[r0 + 1288:word32] = r4_21 & ~r1
	word32 r2_29 = Mem26[r0 + 1304:word32]
	branch (r2 & 0x00000008) == 0x00000000 l0000920C
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:<invalid> -4(fp):r4

l0000920A_1:
	r2_29 = r2_29 | r1
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:<invalid> r2:<invalid> -4(fp):r4

l0000920C:
	Mem32[r0 + 1304:word32] = r2_29 & ~r1
	word32 r2_33 = Mem32[r0 + 1292:word32]
	branch r3 << 31 >= 0x00000000 l0000921C
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:<invalid> r2:<invalid> -4(fp):r4

l0000921A_1:
	r2_33 = r2_33 | r1
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:r3 << 31 r2:<invalid> -4(fp):r4

l0000921C:
	Mem40[r0 + 1292:word32] = r2_33 & ~r1
	word32 r2_41 = Mem40[r0 + 1296:word32]
	branch r3 << 30 >= 0x00000000 l0000922C
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:r3 << 31 r2:<invalid> -4(fp):r4

l0000922A_1:
	r2_41 = r2_41 | r1
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:r3 << 30 r2:<invalid> -4(fp):r4

l0000922C:
	Mem47[r0 + 1296:word32] = r2_41 & ~r1
	word32 r2_48 = Mem47[r0 + 1300:word32]
	branch r3 << 29 >= 0x00000000 l0000923C
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:r3 << 30 r2:<invalid> -4(fp):r4

l0000923A_1:
	r2_48 = r2_48 | r1
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:r3 << 29 r2:<invalid> -4(fp):r4

l0000923C:
	Mem54[r0 + 1300:word32] = r2_48 & ~r1
	word32 r3_57 = Mem54[r0 + 1308:word32]
	branch (r3 & 0x00000008) == 0x00000000 l00009250
// DataOut: cpsr r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 4 r4:r3 << 29 r2:<invalid> -4(fp):r4

l0000924E_1:
	r1 = r1 | r3_57
// DataOut: cpsr r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r2:<invalid> r3:<invalid> -4(fp):r4

l00009250:
	Mem62[r0 + 1308:word32] = r3_57 & ~(r1 << 0x00000000)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r2:<invalid> r3:<invalid> r1:<invalid> -4(fp):r4

GPIOPadConfigSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r2:<invalid> r3:<invalid> r1:<invalid> -4(fp):r4



void GPIOPadConfigGet(word32 r0, word32 r1, word32 r2, word32 r3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r4 r5 r6 r7 sp
GPIOPadConfigGet_entry:
// DataOut: r0 r1 r2 r3
// DataOut (flags): C
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000925C:
	word32 r1_17 = (uint32) (byte) (0x00000001 << r1)
	word32 r4_18 = Mem0[r0 + 1284:word32]
	word32 r5_20 = Mem0[r0 + 1280:word32] + r1_17 + C
	word32 r5_25 = Mem0[r0 + 1288:word32]
	branch r5_20 == 0x00000000 l00009278
// DataOut: r0 r1 r2 r3 r4 r5
// DataOut (flags): C
// SymbolicIn: sp:fp

l00009276_1:
// DataOut: r0 r1 r2 r3 r4 r5
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l00009278:
	word32 r4_27 = r4_18 + r1_17 + (r5_20 <u 0x00000000)
	word32 r4_32 = Mem0[r0 + 1304:word32]
	branch r4_27 == 0x00000000 l00009284
// DataOut: r0 r1 r2 r3 r4 r5
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000001 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l00009282_1:
// DataOut: r0 r1 r2 r3 r4 r5
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l00009284:
	word32 r5_34 = r5_25 + r1_17 + (r4_27 <u 0x00000000)
	branch r5_34 == 0x00000000 l0000928C
// DataOut: r0 r1 r2 r3 r4
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 r6:0x00000002 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l0000928A_1:
// DataOut: r0 r1 r2 r3 r4
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 r6:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l0000928C:
	branch r4_32 + r1_17 + (r5_34 <u 0x00000000) == 0x00000000 l00009294
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 r6:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l00009292_1:
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:0x00000000 r1:<invalid> r7:0x00000000 r6:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l00009294:
	Mem49[r2:word32] = 0x00000000
	word32 r5_45 = 0x00000000
	word32 r4_52 = Mem49[r0 + 1296:word32]
	word32 r1_53 = r1_17 + Mem49[r0 + 1292:word32]
	word32 r6_58 = Mem49[r0 + 1300:word32]
	branch r1_53 == 0x00000000 l000092B0
// DataOut: r0 r1 r3 r4 r5 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:0x00000000 r1:<invalid> r7:0x00000000 r6:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092AE_1:
	r5_45 = 0x00000001
// DataOut: r0 r1 r3 r4 r5 r6
// DataOut (flags): ZC
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:0x00000000 r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092B0:
	word32 r2_60 = Mem49[r0 + 1308:word32]
	branch r1_53 != 0x00000000 l000092B8
// DataOut: r1 r2 r3 r4 r5 r6
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092B6_1:
	r5_45 = 0x00000000
// DataOut: r1 r2 r3 r4 r5 r6
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092B8:
	word32 r1_62 = r1_53 + r4_52 + (r1_53 <u 0x00000000)
	branch r1_62 == 0x00000000 l000092BE
// DataOut: r1 r2 r3 r5 r6
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092BC_1:
// DataOut: r1 r2 r3 r5 r6
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092BE:
	word32 r1_68 = r1_62 + r6_58 + (r1_62 <u 0x00000000)
	branch r1_68 == 0x00000000 l000092C6
// DataOut: r1 r2 r3 r5
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:<invalid> r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092C4_1:
// DataOut: r1 r2 r3 r5
// DataOut (flags): C
// SymbolicIn: sp:fp - 16 r4:0x00000000 r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092C6:
	branch r1_68 + r2_60 + (r1_68 <u 0x00000000) == 0x00000000 l000092CE
// DataOut: r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:0x00000000 r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> r0:0x00000004 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092CC_1:
// DataOut: r3 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:0x00000000 r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> r0:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

l000092CE:
	Mem82[r3:word32] = r5_45 << 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r4:0x00000000 r5:<invalid> r1:<invalid> r7:0x00000000 r6:<invalid> r2:<invalid> r0:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

GPIOPadConfigGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r5:r5 r1:<invalid> r7:r7 r6:r6 r2:<invalid> r0:0x00000000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7



void GPIOPinIntEnable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r3
// Preserved: sp
GPIOPinIntEnable_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000092E0:
	Mem8[r0 + 1040:word32] = r1 | Mem0[r0 + 1040:word32]
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid>



void GPIOPinIntDisable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r1 r3
// Preserved: sp
GPIOPinIntDisable_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000092EC:
	Mem7[r0 + 1040:word32] = Mem0[r0 + 1040:word32] & ~(r1 << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid>



void GPIOPinIntStatus(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r0
// Preserved: sp
GPIOPinIntStatus_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000092FC:
	branch r1 != 0x00000000 l00009304
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009304:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000092FE:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinIntStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void GPIOPinIntClear(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed:
// Preserved: sp
GPIOPinIntClear_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000930C:
	Mem3[r0 + 1052:word32] = r1
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void GPIOPortIntRegister(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r4 sp
GPIOPortIntRegister_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009314:
	word32 r3_3 = Mem0[0x000093A8:word32]
	branch r0 == r3_3 l00009396
// DataOut: r0 r1 r3
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009396:
	IntRegister(0x00000012, r1)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l000093A4_thunk_IntEnable:
	IntEnable(0x00000012)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0x00000012 lr:lr r2:<invalid> -8(fp):r4 -4(fp):lr

l0000931C:
	branch r0 >u r3_3 l0000933E
// DataOut: r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000933E:
	word32 r3_47 = Mem0[0x000093AC:word32]
	branch r0 == r3_47 l00009372
// DataOut: r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l00009372:
	IntRegister(0x00000013, r1)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l00009380_thunk_IntEnable:
	IntEnable(0x00000013)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0x00000013 lr:lr r2:<invalid> -8(fp):r4 -4(fp):lr

l00009344:
	branch r0 != r3_47 + 0x0001D000 l0000935E
// DataOut: r1
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000934C:
	IntRegister(0x00000014, r1)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000935A_thunk_IntEnable:
	IntEnable(0x00000014)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0x00000014 lr:lr r2:<invalid> -8(fp):r4 -4(fp):lr

l0000931E:
	branch r0 == 0x40004000 l00009384
// DataOut: r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l00009384:
	IntRegister(0x00000010, r1)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l00009392_thunk_IntEnable:
	IntEnable(0x00000010)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0x00000010 lr:lr r2:<invalid> -8(fp):r4 -4(fp):lr

l00009324:
	branch r0 != r3_3 - 0x00001000 l0000935E
// DataOut: r1
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000935E:
	IntRegister(0xFFFFFFFF, r1)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000936E_thunk_IntEnable:
	IntEnable(0xFFFFFFFF)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0xFFFFFFFF lr:lr r2:<invalid> -8(fp):r4 -4(fp):lr

l0000932C:
	IntRegister(0x00000011, r1)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000933A_thunk_IntEnable:
	IntEnable(0x00000011)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0x00000011 lr:lr r2:<invalid> -8(fp):r4 -4(fp):lr

GPIOPortIntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:<invalid> lr:lr r2:<invalid> -8(fp):r4 -4(fp):lr



void GPIOPortIntUnregister(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r4 sp
GPIOPortIntUnregister_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000093B0:
	word32 r3_3 = Mem0[0x00009444:word32]
	branch r0 == r3_3 l00009432
// DataOut: r0 r3
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009432:
	IntDisable(0x00000012)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l00009440_thunk_IntUnregister:
	IntUnregister(0x00000012)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0x00000012 lr:lr r2:<invalid> -8(fp):r4 -4(fp):lr

l000093B8:
	branch r0 >u r3_3 l000093DA
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l000093DA:
	word32 r3_46 = Mem0[0x00009448:word32]
	branch r0 == r3_46 l0000940E
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000940E:
	IntDisable(0x00000013)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000941C_thunk_IntUnregister:
	IntUnregister(0x00000013)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0x00000013 r2:<invalid> lr:lr -8(fp):r4 -4(fp):lr

l000093E0:
	branch r0 != r3_46 + 0x0001D000 l000093FA
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l000093E8:
	IntDisable(0x00000014)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l000093F6_thunk_IntUnregister:
	IntUnregister(0x00000014)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0x00000014 r2:<invalid> lr:lr -8(fp):r4 -4(fp):lr

l000093BA:
	branch r0 == 0x40004000 l00009420
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l00009420:
	IntDisable(0x00000010)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000942E_thunk_IntUnregister:
	IntUnregister(0x00000010)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0x00000010 r2:<invalid> lr:lr -8(fp):r4 -4(fp):lr

l000093C0:
	branch r0 != r3_3 - 0x00001000 l000093FA
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l000093FA:
	IntDisable(0xFFFFFFFF)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l0000940A_thunk_IntUnregister:
	IntUnregister(0xFFFFFFFF)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0xFFFFFFFF r2:<invalid> lr:lr -8(fp):r4 -4(fp):lr

l000093C8:
	IntDisable(0x00000011)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> -8(fp):r4 -4(fp):lr

l000093D6_thunk_IntUnregister:
	IntUnregister(0x00000011)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:0x00000011 r2:<invalid> lr:lr -8(fp):r4 -4(fp):lr

GPIOPortIntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r0:<invalid> lr:lr r2:<invalid> -8(fp):r4 -4(fp):lr



void GPIOPinRead(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r0
// Preserved: sp
GPIOPinRead_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000944C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinRead_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void GPIOPinWrite(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut:
// Trashed:
// Preserved: sp
GPIOPinWrite_entry:
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009454:
	Mem3[r0 + (r1 << 2):word32] = r2
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinWrite_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void GPIOPinTypeComparator(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r1 r2 r3
// Preserved: r4 r5 r6 sp
GPIOPinTypeComparator_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000945C:
	word32 r5_10 = ~r1
	Mem17[r0 + 1024:word32] = Mem0[r0 + 1024:word32] & r5_10
	Mem22[r0 + 1056:word32] = r5_10 & Mem17[r0 + 1056:word32]
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000947A_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0, r1, 0x00000001, 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:0x00000001 r3:0x00000000 r6:r6 r4:r4 -12(fp):r4 -8(fp):r5 -4(fp):r6

GPIOPinTypeComparator_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:<invalid> r3:<invalid> r6:r6 r4:r4 r1:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6



void GPIOPinTypeI2C(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: r4 r5 r6 sp
GPIOPinTypeI2C_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009480:
	Mem16[r0 + 1024:word32] = Mem0[r0 + 1024:word32] & ~(r1 << 0x00000000)
	Mem21[r0 + 1056:word32] = r1 | Mem16[r0 + 1056:word32]
// DataOut: cpsr r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094A0_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0, r1, 0x00000001, 0x0000000B)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:0x00000001 r3:0x0000000B r6:r6 r4:r4 -12(fp):r4 -8(fp):r5 -4(fp):r6

GPIOPinTypeI2C_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:<invalid> r3:<invalid> r6:r6 r4:r4 r1:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6



void GPIOPinTypeQEI(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: r4 r5 r6 sp
GPIOPinTypeQEI_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000094A4:
	Mem16[r0 + 1024:word32] = Mem0[r0 + 1024:word32] & ~(r1 << 0x00000000)
	Mem21[r0 + 1056:word32] = r1 | Mem16[r0 + 1056:word32]
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094C4_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0, r1, 0x00000001, 0x0000000A)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:0x00000001 r3:0x0000000A r6:r6 r4:r4 -12(fp):r4 -8(fp):r5 -4(fp):r6

GPIOPinTypeQEI_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:<invalid> r3:<invalid> r6:r6 r4:r4 r1:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6



void GPIOPinTypeUART(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: r4 r5 r6 sp
GPIOPinTypeUART_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000094C8:
	Mem16[r0 + 1024:word32] = Mem0[r0 + 1024:word32] & ~(r1 << 0x00000000)
	Mem21[r0 + 1056:word32] = r1 | Mem16[r0 + 1056:word32]
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094E8_thunk_GPIOPadConfigSet:
	GPIOPadConfigSet(r0, r1, 0x00000001, 0x00000008)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:0x00000001 r3:0x00000008 r6:r6 r4:r4 -12(fp):r4 -8(fp):r5 -4(fp):r6

GPIOPinTypeUART_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:<invalid> r3:<invalid> r6:r6 r4:r4 r1:<invalid> -12(fp):r4 -8(fp):r5 -4(fp):r6



void GPIOPinTypeTimer(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIOPinTypeTimer_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094EC:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094EC_thunk_GPIOPinTypeUART:
	GPIOPinTypeUART(r0, r1)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinTypeTimer_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r1:<invalid>



void GPIOPinTypeSSI(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIOPinTypeSSI_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094F0:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094F0_thunk_GPIOPinTypeUART:
	GPIOPinTypeUART(r0, r1)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinTypeSSI_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r1:<invalid>



void GPIOPinTypePWM(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r2 r3
// Preserved: sp
GPIOPinTypePWM_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094F4:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094F4_thunk_GPIOPinTypeUART:
	GPIOPinTypeUART(r0, r1)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

GPIOPinTypePWM_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r1:<invalid>



void IntDefaultHandler()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
IntDefaultHandler_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

IntDefaultHandler_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094F8:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void IntMasterEnable()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
IntMasterEnable_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094FC:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000094FC_thunk_CPUcpsie:
	CPUcpsie()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

IntMasterEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void IntMasterDisable()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
IntMasterDisable_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009500:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009500_thunk_CPUcpsid:
	CPUcpsid()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

IntMasterDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void IntRegister(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r2 r3
// Preserved: r4 r5 sp
IntRegister_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009504:
	word32 r4_10 = Mem0[0x00009534:word32]
	branch Mem0[Mem0[0x00009530:word32]:word32] == r4_10 l00009526
// DataOut: r0 r1 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009510:
	word32 r3_24 = r4_10
// DataOut: r0 r1 r3 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r4:<invalid> -8(fp):r4 -4(fp):r5

l00009516:
	Mem29[r3_24:word32] = Mem0[r3_24 - r4_10:word32]
	r3_24 = r3_24 + 4
	branch r3_24 != r4_10 + 0x000000B8 l00009516
// DataOut: r0 r1 r3 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r4:<invalid> r5:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

l00009522:
	Mem34[Mem29[0x00009530:word32]:word32] = r4_10
// DataOut: r0 r1 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r4:<invalid> r5:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

l00009526:
	Mem19[r4_10 + (r0 << 2):word32] = r1
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r3:<invalid> r4:<invalid> r5:<invalid> r2:<invalid> -8(fp):r4 -4(fp):r5

IntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r4:r4 r5:r5 r2:<invalid> -8(fp):r4 -4(fp):r5



void IntUnregister(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
IntUnregister_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009538:
	Mem5[Mem0[0x00009544:word32] + (r0 << 2):word32] = Mem0[0x00009548:word32]
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

IntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>



void IntPriorityGroupingSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
IntPriorityGroupingSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000954C:
	Mem9[Mem0[0x00009564:word32]:word32] = Mem0[Mem0[0x00009560:word32] + (r0 << 2):word32] | 0x05F80000 | 0x00020000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

IntPriorityGroupingSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>



void IntPriorityGroupingGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
IntPriorityGroupingGet_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009568:
	word32 r3_12 = 0x00000700
	word32 r0_10 = 0x00000000
	word32 r1_6 = Mem0[Mem0[0x00009588:word32]:word32]
	word32 r2_11 = Mem0[0x0000958C:word32]
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000957C:
	branch r3_12 == (r1_6 & 0x00000700) l00009586
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid> r0:<invalid> r2:<invalid>

l00009580:
	r0_10 = r0_10 + 0x00000001
	branch r0_10 != 0x00000008 l00009578
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid> r0:<invalid> r2:<invalid>

l00009578:
	r2_11 = r2_11 + 4
	r3_12 = Mem0[r2_11:word32]
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid> r0:<invalid> r2:<invalid>

l00009586:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid> r0:<invalid> r2:<invalid>

IntPriorityGroupingGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid> r0:<invalid> r2:<invalid>



void IntPrioritySet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: r4 sp
IntPrioritySet_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009590:
	word32 r4_12 = Mem0[Mem0[0x000095B8:word32] + (r0 & ~0x00000003) + 32:word32]
	word32 r0_15 = (r0 & 0x00000003) << 3
	Mem22[r4_12:word32] = r1 << r0_15 | Mem0[r4_12:word32] & ~((0x000000FF << r0_15) << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

IntPrioritySet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:0x000000FF << (((r0 & 0x00000003) & 0x00000003) << 3) r3:<invalid> r4:r4 r0:<invalid> -4(fp):r4



void IntPriorityGet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: sp
IntPriorityGet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l000095BC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

IntPriorityGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r0 & ~0x00000003 r0:<invalid>



void IntEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: sp
IntEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l000095DC:
	branch r0 == 0x00000004 l00009608
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009608:
	word32 r2_44 = Mem0[0x00009634:word32]
	Mem47[r2_44:word32] = Mem0[r2_44:word32] | 0x00010000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000095E0:
	branch r0 == 0x00000005 l00009614
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009614:
	word32 r2_40 = Mem0[0x00009634:word32]
	Mem43[r2_40:word32] = Mem0[r2_40:word32] | 0x00020000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000095E4:
	branch r0 == 0x00000006 l00009620
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009620:
	word32 r2_35 = Mem0[0x00009634:word32]
	Mem38[r2_35:word32] = Mem0[r2_35:word32] | 0x00040000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000095E8:
	branch r0 == 0x0000000F l000095FC
// DataOut: r0
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l000095FC:
	word32 r2_31 = Mem0[0x00009630:word32]
	Mem34[r2_31:word32] = Mem0[r2_31:word32] | 0x00000002
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000095EC:
	branch r0 <=u 0x0000000F l000095FA
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l000095EE:
	Mem30[Mem0[0x0000962C:word32]:word32] = 0x00000001 << r0 - 0x00000010
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l000095FA:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000001 r0:0x00000001 << r0 - 0x00000020 r2:<invalid>

IntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:0x00000001 << r0 - 0x00000020



void IntDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: sp
IntDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009638:
	branch r0 == 0x00000004 l00009664
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009664:
	word32 r2_44 = Mem0[0x00009690:word32]
	Mem47[r2_44:word32] = Mem0[r2_44:word32] & ~0x00010000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000963C:
	branch r0 == 0x00000005 l00009670
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009670:
	word32 r2_40 = Mem0[0x00009690:word32]
	Mem43[r2_40:word32] = Mem0[r2_40:word32] & ~0x00020000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009640:
	branch r0 == 0x00000006 l0000967C
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000967C:
	word32 r2_35 = Mem0[0x00009690:word32]
	Mem38[r2_35:word32] = Mem0[r2_35:word32] & ~0x00040000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009644:
	branch r0 == 0x0000000F l00009658
// DataOut: r0
// DataOut (flags): ZC
// SymbolicIn: sp:fp

l00009658:
	word32 r2_31 = Mem0[0x0000968C:word32]
	Mem34[r2_31:word32] = Mem0[r2_31:word32] & ~0x00000002
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009648:
	branch r0 <=u 0x0000000F l00009656
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000964A:
	Mem30[Mem0[0x00009688:word32]:word32] = 0x00000001 << r0 - 0x00000010
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009656:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000001 r0:0x00000001 << r0 - 0x00000020 r2:<invalid>

IntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:0x00000001 << r0 - 0x00000020



void OSRAMDelay(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0
// Preserved: sp
OSRAMDelay_entry:
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009694:
	r0 = r0 - 0x00000001
	branch r0 != 0x00000000 l00009694
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l00009698:
	return
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

OSRAMDelay_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void OSRAMWriteFirst(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0 r1 r2
// Preserved: lr r3 r4 r5 sp
OSRAMWriteFirst_entry:
// DataOut: cpsr r0 r10 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000969C:
	word32 r4_14 = Mem0[0x000096C0:word32]
	I2CMasterSlaveAddrSet(r4_14, 0x0000003D, 0x00000000)
	I2CMasterDataPut(r4_14, r0)
// DataOut: cpsr r0 r1 r10 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000096BC_thunk_I2CMasterControl:
	I2CMasterControl(r4_14, 0x00000003)
	return
// DataOut: cpsr r10 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r2:<invalid> r0:<invalid> r1:0x00000003 r3:r3 lr:lr -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

OSRAMWriteFirst_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r4:r4 r2:<invalid> r0:<invalid> r1:0x00000003 r3:r3 lr:lr -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void OSRAMWriteArray(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r0 r1
// Preserved: r3 r4 r5 r6 r7 sp
OSRAMWriteArray_entry:
// DataOut: cpsr r0 r1 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000096C4:
	branch r1 == 0x00000000 l000096FA
// DataOut: cpsr r0 r1 r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000096FA:
	return
// DataOut: cpsr r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000096C6:
	word32 r5_33 = r0
	word32 r7_35 = Mem0[0x000096FC:word32]
	word32 r4_36 = Mem0[0x00009700:word32]
	word32 r6_37 = r0 + r1
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l000096D0:
	branch I2CMasterIntStatus(r4_36, 0x00000000) == 0x00000000 l000096D0
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r7:<invalid> r4:<invalid> r6:r0 + r1 r1:<invalid> r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000096DC:
	OSRAMDelay(Mem0[r7_35:word32])
	I2CMasterDataPut(r4_36, (word32) Mem0[r5_33:byte])
	I2CMasterControl(r4_36, 0x00000001)
	r5_33 = r5_33 + 1
	branch r6_37 != r5_33 l000096D0
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r7:<invalid> r4:<invalid> r6:r0 + r1 r1:0x00000000 r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l000096F8:
	return
// DataOut: cpsr r10 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r5:<invalid> r7:<invalid> r4:<invalid> r6:r0 + r1 r1:0x00000001 r0:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

OSRAMWriteArray_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r7:r7 r4:r4 r6:r6 r1:0x00000001 r0:<invalid> r3:r3 -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



void OSRAMWriteByte(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r1 r3
// Preserved: lr r4 sp
OSRAMWriteByte_entry:
// DataOut: cpsr r0 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009704:
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009708:
	branch I2CMasterIntStatus(Mem0[0x00009730:word32], 0x00000000) == 0x00000000 l00009708
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r1:0x00000000 r0:<invalid> -8(fp):r4 -4(fp):lr

l00009714:
	OSRAMDelay(Mem0[Mem0[0x00009734:word32]:word32])
	I2CMasterDataPut(Mem0[0x00009730:word32], r0)
	word32 r0_23 = Mem0[0x00009730:word32]
// DataOut: cpsr r0 r1 r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:r0 r1:0x00000000 r0:<invalid> -8(fp):r4 -4(fp):lr

l0000972C_thunk_I2CMasterControl:
	I2CMasterControl(r0_23, 0x00000001)
	return
// DataOut: cpsr r10 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r1:0x00000001 r0:<invalid> r3:<invalid> lr:lr -8(fp):r4 -4(fp):lr

OSRAMWriteByte_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r1:0x00000001 r0:<invalid> r3:<invalid> lr:lr -8(fp):r4 -4(fp):lr



void OSRAMWriteFinal(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r1
// Preserved: lr r4 r5 r6 sp
OSRAMWriteFinal_entry:
// DataOut: cpsr r0 r10 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009738:
	word32 r4_14 = Mem0[0x00009778:word32]
// DataOut: cpsr r10 r4 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000973E:
	branch I2CMasterIntStatus(r4_14, 0x00000000) == 0x00000000 l0000973E
// DataOut: cpsr r10 r4 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r0 r4:<invalid> r1:0x00000000 r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000974A:
	word32 r5_20 = Mem0[0x0000977C:word32]
	word32 r4_21 = Mem0[0x00009778:word32]
	OSRAMDelay(Mem0[r5_20:word32])
	I2CMasterDataPut(r4_21, r0)
	I2CMasterControl(r4_21, 0x00000005)
// DataOut: cpsr r10 r4 r5 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r0 r4:<invalid> r1:0x00000000 r0:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009764:
	branch I2CMasterIntStatus(r4_21, 0x00000000) == 0x00000000 l00009764
// DataOut: cpsr r10 r4 r5 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r0 r4:<invalid> r1:<invalid> r0:<invalid> r5:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009770:
	word32 r0_32 = Mem0[r5_20:word32]
// DataOut: cpsr r0 r10 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r0 r4:<invalid> r1:0x00000000 r0:<invalid> r5:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009776_thunk_OSRAMDelay:
	OSRAMDelay(r0_32)
	return
// DataOut: cpsr r10 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 r4:r4 r1:0x00000000 r0:<invalid> r5:r5 lr:lr -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

OSRAMWriteFinal_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 r4:r4 r1:0x00000000 r0:<invalid> r5:r5 lr:lr -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void OSRAMClear()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 sp
OSRAMClear_entry:
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009780:
	OSRAMWriteFirst(0x00000080)
	OSRAMWriteArray(Mem0[0x000097C4:word32], 0x00000006)
	word32 r4_11 = 0x0000005F
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009792:
	OSRAMWriteByte(0x00000000)
	r4_11 = r4_11 - 0x00000001
	branch r4_11 != 0x00000000 l00009792
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r0:<invalid> r1:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> -8(fp):r4 -4(fp):lr

l0000979C:
	OSRAMWriteFinal(r4_11)
	OSRAMWriteFirst(0x00000080)
	OSRAMWriteArray(Mem0[0x000097C8:word32], 0x00000006)
	word32 r4_21 = 0x0000005F
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r0:<invalid> r1:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> -8(fp):r4 -4(fp):lr

l000097B2:
	OSRAMWriteByte(0x00000000)
	r4_21 = r4_21 - 0x00000001
	branch r4_21 != 0x00000000 l000097B2
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r0:<invalid> r1:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> -8(fp):r4 -4(fp):lr

l000097BC:
// DataOut: cpsr r0 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r0:<invalid> r1:<invalid> r4:<invalid> r2:<invalid> r3:<invalid> -8(fp):r4 -4(fp):lr

l000097C2_thunk_OSRAMWriteFinal:
	OSRAMWriteFinal(r4_21)
	return
// DataOut: cpsr r5
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r4:r4 r2:<invalid> lr:lr r3:<invalid> -8(fp):r4 -4(fp):lr

OSRAMClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r1:<invalid> r4:r4 r2:<invalid> lr:lr r3:<invalid> -8(fp):r4 -4(fp):lr



void OSRAMStringDraw(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 sp
OSRAMStringDraw_entry:
// DataOut: cpsr r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000097CC:
	OSRAMWriteFirst(0x00000080)
	word32 r4_14 = r1
	word32 r5_16 = r0
	branch r2 != 0x00000000 l000097E0
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l000097DE_1:
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r2 r4:r1 r5:r0 r0:<invalid> r2:<invalid> r1:0x00000003 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l000097E0:
	OSRAMWriteByte(0x000000B1)
	OSRAMWriteByte(0x00000080)
	OSRAMWriteByte(r1 + 0x00000024 & 0x0000000F)
	OSRAMWriteByte(0x00000080)
	OSRAMWriteByte(0x00000012)
	OSRAMWriteByte(0x00000040)
	word32 r3_29 = (word32) Mem0[r0:byte]
	branch r3_29 == 0x00000000 l00009876
// DataOut: cpsr r3 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:r2 r4:r1 r5:r0 r0:<invalid> r2:<invalid> r1:0x00000003 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009876:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:<invalid> r4:r1 r5:r0 r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009814:
	word32 r6_44 = Mem0[0x00009878:word32]
	branch r1 <=u 0x0000005A l00009830
// DataOut: cpsr r3 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:<invalid> r4:r1 r5:r0 r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009830:
	OSRAMWriteArray(r6_44 + (r3_29 - 0x00000020) * 0x00000005, 0x00000005)
	branch r4_14 != 0x0000005A l0000981C
// DataOut: cpsr r0 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000981C:
	r5_16 = r5_16 + 1
	r4_14 = r4_14 + 0x00000006
	branch (word32) Mem0[r5_16:byte] == 0x00000000 l00009846
// DataOut: cpsr r0 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:<invalid> r4:<invalid> r5:<invalid> r0:0x00000000 r3:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009824:
	OSRAMWriteByte(0x00000000)
	r3_29 = (word32) Mem0[r5_16:byte]
	branch r3_29 == 0x00000000 l00009874
// DataOut: cpsr r3 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:<invalid> r4:<invalid> r5:<invalid> r0:0x00000000 r3:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009874:
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r3:<invalid> r1:0x00000001 r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000982C:
	branch r4_14 >u 0x0000005A l0000984C
// DataOut: cpsr r3 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r3:<invalid> r1:0x00000001 r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009846:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:<invalid> r4:<invalid> r5:<invalid> r0:0x00000000 r3:<invalid> r1:<invalid> r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000984A_thunk_OSRAMWriteFinal:
	OSRAMWriteFinal(0x00000000)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 r4:r4 r5:r5 r0:0x00000000 r3:<invalid> r1:<invalid> lr:lr r2:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000981A:
// DataOut: cpsr r3 r4 r5 r6
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:<invalid> r4:r1 r5:r0 r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l0000984C:
	word32 r4_53 = 0x0000005F - r4_14
	OSRAMWriteArray(r6_44 + (r3_29 - 0x00000020) * 0x00000005, r4_53)
	word32 r3_56 = (word32) Mem0[r5_16:byte]
	word32 r0_63 = (word32) Mem0[r3_56 - 0x00000020 + (r3_56 - 0x00000020 << 0x00000002) + Mem0[0x0000987C:word32] + r4_53 + 16:byte]
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r6:<invalid> r4:<invalid> r5:<invalid> r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

l00009872_thunk_OSRAMWriteFinal:
	OSRAMWriteFinal(r0_63)
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 r4:r4 r5:r5 r0:<invalid> r3:<invalid> r1:<invalid> r2:<invalid> lr:lr -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr

OSRAMStringDraw_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 r4:r4 r5:r5 r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> lr:lr -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):lr



void OSRAMImageDraw(word32 r0, word32 r1, word32 r2, word32 r3, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r10 r4 r5 r6 r7 r8 r9 sp
// Stack args: Stack +0000(32)
OSRAMImageDraw_entry:
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l00009880:
	branch dwArg00 == 0x00000000 l000098EA
// DataOut: r0 r1 r2 r3 r6
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009888:
	word32 r5_37 = r0
	word32 r4_39 = r2
	word32 r8_43 = (uint32) SLICE(r1 + 0x00000090, ui4, 4)
	word32 r6_44 = dwArg00 + r2
	word32 r7_47 = r1 + 0x00000024 & 0x0000000F
// DataOut: r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000098A2:
	OSRAMWriteFirst(0x00000080)
	branch r4_39 == 0x00000000 l000098AE
// DataOut: r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r5:<invalid> r4:<invalid> r9:r3 r1:<invalid> r8:<invalid> r7:r1 + 0x00000048 & 0x0000000F r10:r3 + 0xFFFFFFFF r0:<invalid> r2:<invalid> r3:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000098AC_1:
// DataOut: r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r5:<invalid> r4:<invalid> r9:r3 r1:0x00000003 r8:<invalid> r7:r1 + 0x00000048 & 0x0000000F r10:r3 + 0xFFFFFFFF r0:<invalid> r2:<invalid> r3:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000098AE:
	OSRAMWriteByte(0x000000B0)
	OSRAMWriteByte(0x00000080)
	OSRAMWriteByte(r7_47)
	OSRAMWriteByte(0x00000080)
	OSRAMWriteByte(r8_43 | 0x00000010)
	OSRAMWriteByte(0x00000040)
	OSRAMWriteArray(r5_37, r3 + 0xFFFFFFFF)
	r5_37 = r5_37 + r3
	OSRAMWriteFinal((word32) Mem0[r5_37 - 1:byte])
	r4_39 = r4_39 + 0x00000001
	branch r6_44 != r4_39 l000098A2
// DataOut: r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r5:<invalid> r4:<invalid> r9:r3 r1:0x00000003 r8:<invalid> r7:r1 + 0x00000048 & 0x0000000F r10:r3 + 0xFFFFFFFF r0:<invalid> r2:<invalid> r3:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

l000098EA:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 32 r6:<invalid> r5:<invalid> r4:<invalid> r9:r3 r1:<invalid> r8:<invalid> r7:r1 + 0x00000048 & 0x0000000F r10:r3 + 0xFFFFFFFF r0:<invalid> r2:<invalid> r3:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr

OSRAMImageDraw_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r6:r6 r4:r4 r5:r5 r7:r7 r8:r8 r9:r9 r10:r10 r1:<invalid> r0:<invalid> r2:<invalid> r3:<invalid> -32(fp):r4 -28(fp):r5 -24(fp):r6 -20(fp):r7 -16(fp):r8 -12(fp):r9 -8(fp):r10 -4(fp):lr



void OSRAMInit(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r4 r5 r6 r7 r8 sp
OSRAMInit_entry:
// DataOut: cpsr r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000098F0:
	SysCtlPeripheralEnable(0x10001000)
	SysCtlPeripheralEnable(Mem0[0x00009960:word32])
	GPIOPinTypeI2C(Mem0[0x00009964:word32], 0x0000000C)
	I2CMasterInit(Mem0[0x00009968:word32], r0)
	word32 r7_26 = Mem0[0x00009970:word32]
	Mem31[Mem0[0x0000996C:word32]:word32] = 0x00000001
	word32 r6_27 = 0x000000E3
	word32 r4_28 = 0x00000004
	word32 r0_29 = 0x00000080
	word32 r5_30 = 0x00000000
// DataOut: cpsr r0 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009938:
	OSRAMWriteFirst(r0_29)
	OSRAMWriteArray(r5_30 + 0x00000002 + (r7_26 + 0x000001EC), r4_28 - 0x00000002)
	OSRAMWriteFinal(r6_27)
	r5_30 = r5_30 + (r4_28 + 0x00000001)
	word32 r3_47 = r7_26 + (r5_30 << 0x00000000)
	branch r5_30 <=u 0x00000070 l0000992A
// DataOut: cpsr r3 r5 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> r5:<invalid> r8:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000992A:
	r4_28 = (word32) Mem31[r3_47 + 236:byte]
	r0_29 = (word32) Mem31[r3_47 + 237:byte]
	r6_27 = (word32) Mem31[r3_47 + r4_28 + 236:byte]
// DataOut: cpsr r0 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> r5:<invalid> r8:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009958:
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r4:<invalid> r0:<invalid> r1:<invalid> r2:<invalid> r3:<invalid> r7:<invalid> r6:<invalid> r5:<invalid> r8:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l0000995C_thunk_OSRAMClear:
	OSRAMClear()
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r0:<invalid> r1:<invalid> r2:<invalid> r3:<invalid> r7:r7 r6:r6 r5:r5 r8:r8 lr:lr -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

OSRAMInit_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r0:<invalid> r1:<invalid> r2:<invalid> r3:<invalid> r7:r7 r6:r6 r5:r5 r8:r8 lr:lr -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void OSRAMDisplayOn()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
OSRAMDisplayOn_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009974:
	word32 r7_16 = Mem0[0x000099BC:word32]
	word32 r6_17 = 0x000000E3
	word32 r4_18 = 0x00000004
	word32 r0_19 = 0x00000080
	word32 r5_20 = 0x00000000
// DataOut: r0 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009996:
	OSRAMWriteFirst(r0_19)
	OSRAMWriteArray(r5_20 + 0x00000002 + (r7_16 + 0x000001EC), r4_18 - 0x00000002)
	OSRAMWriteFinal(r6_17)
	r5_20 = r5_20 + (r4_18 + 0x00000001)
	word32 r3_36 = r7_16 + (r5_20 << 0x00000000)
	branch r5_20 <=u 0x00000070 l00009988
// DataOut: r3 r5 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:<invalid> r6:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r8:<invalid> r1:<invalid> r3:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009988:
	r4_18 = (word32) Mem0[r3_36 + 236:byte]
	r0_19 = (word32) Mem0[r3_36 + 237:byte]
	r6_17 = (word32) Mem0[r3_36 + r4_18 + 236:byte]
// DataOut: r0 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:<invalid> r6:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r8:<invalid> r1:<invalid> r3:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000099B6:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:<invalid> r6:<invalid> r4:<invalid> r0:<invalid> r5:<invalid> r8:<invalid> r1:<invalid> r3:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

OSRAMDisplayOn_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 r6:r6 r4:r4 r0:<invalid> r5:r5 r8:r8 r1:<invalid> r3:<invalid> r2:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void OSRAMDisplayOff()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: lr r3 sp
OSRAMDisplayOff_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l000099C0:
	OSRAMWriteFirst(0x00000080)
	OSRAMWriteByte(0x000000AE)
	OSRAMWriteByte(0x00000080)
	OSRAMWriteByte(0x000000AD)
	OSRAMWriteByte(0x00000080)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l000099E6_thunk_OSRAMWriteFinal:
	OSRAMWriteFinal(0x0000008A)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x0000008A r3:r3 lr:lr r2:<invalid> r1:<invalid> -8(fp):r3 -4(fp):lr

OSRAMDisplayOff_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r3:r3 lr:lr r2:<invalid> r1:<invalid> -8(fp):r3 -4(fp):lr



void SSIConfig(word32 r0, word32 r1, word32 r2, word32 r3, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2 r3
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
// Stack args: Stack +0000(32)
SSIConfig_entry:
// DataOut: r0 r1 r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Stack +0000(32)

l000099E8:
	word32 r7_16 = r2
	word32 r0_25 = SysCtlClockGet()
	branch r2 == 0x00000002 l00009A30
// DataOut: r0 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A30:
	r7_16 = 0x0000000C
// DataOut: r0 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:r2 r6:r0 r8:r1 r4:r3 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l000099FE:
	branch r2 == 0x00000000 l00009A04
// DataOut: r0 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:r2 r6:r0 r8:r1 r4:r3 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009A02_1:
	r7_16 = 0x00000004
// DataOut: r0 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:r2 r6:r0 r8:r1 r4:r3 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009A04:
	Mem33[r0 + 4:word32] = r7_16
	word32 r3_31 = r0_25 /u r3
	word32 r4_32 = 0x00000000
// DataOut: r3 r4 r5 r6 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:<invalid> r6:r0 r8:r1 r4:r3 r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009A0C:
	r4_32 = r4_32 + 0x00000002
	word32 r2_36 = r3_31 /u r4_32
	branch r2_36 >u 0x00000100 || r2_36 <u 0x00000001 l00009A0C
// DataOut: r2 r3 r4 r5 r6 r8
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:<invalid> r6:r0 r8:r1 r4:<invalid> r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

l00009A18:
	Mem47[r0 + 16:word32] = r4_32
	Mem48[r0:word32] = dwArg00 - 0x00000001 | (r1 & 0x00000030 | r1 << 0x00000006) | r2_36 - 0x00000001 << 0x00000008
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:<invalid> r6:r0 r8:r1 r4:<invalid> r5:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr

SSIConfig_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 r6:r6 r8:r8 r4:r4 r5:r5 r3:r1 & 0x00000030 r2:<invalid> r1:r1 & 0x00000030 | r1 << 0x00000006 r0:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void SSIEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
SSIEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A34:
	Mem6[r0 + 4:word32] = Mem0[r0 + 4:word32] | 0x00000002
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SSIEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void SSIDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
SSIDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A40:
	Mem6[r0 + 4:word32] = Mem0[r0 + 4:word32] & ~0x00000002
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SSIDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void SSIIntRegister(word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r1
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r3 sp
SSIIntRegister_entry:
// DataOut: r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009A4C:
	IntRegister(0x00000017, r1)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A5A_thunk_IntEnable:
	IntEnable(0x00000017)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000017 r3:r3 lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr

SSIIntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r3:<invalid> lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr



void SSIIntUnregister()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr sp
SSIIntUnregister_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009A60:
	IntDisable(0x00000017)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A6E_thunk_IntUnregister:
	IntUnregister(0x00000017)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000017 r3:r3 lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr

SSIIntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000017 r3:<invalid> lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr



void SSIIntEnable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r3
// Preserved: sp
SSIIntEnable_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A74:
	Mem8[r0 + 20:word32] = r1 | Mem0[r0 + 20:word32]
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SSIIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid>



void SSIIntDisable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r1 r3
// Preserved: sp
SSIIntDisable_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A7C:
	Mem7[r0 + 20:word32] = Mem0[r0 + 20:word32] & ~(r1 << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SSIIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid>



void SSIIntStatus(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r0
// Preserved: sp
SSIIntStatus_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A88:
	branch r1 != 0x00000000 l00009A8E
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A8E:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A8A:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SSIIntStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void SSIIntClear(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed:
// Preserved: sp
SSIIntClear_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A94:
	Mem3[r0 + 32:word32] = r1
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SSIIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SSIDataPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r2 r3
// Preserved: sp
SSIDataPut_entry:
// DataOut: cpsr r0 r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A98:
// DataOut: cpsr r0 r1 r2 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009A9C:
	branch Mem0[r0 + 0x0000000C:word32] << 30 >= 0x00000000 l00009A9C
// DataOut: cpsr r0 r1 r2 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x0000000C r3:<invalid>

l00009AA2:
	Mem10[r0 + 8:word32] = r1
	return
// DataOut: cpsr r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x0000000C r3:<invalid>

SSIDataPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x0000000C r3:<invalid>



void SSIDataNonBlockingPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
SSIDataNonBlockingPut_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009AA8:
	branch (Mem0[r0 + 12:word32] & 0x00000002) == 0x00000000 l00009AB2
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009AB0_1:
	Mem10[r0 + 8:word32] = r1
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00009AB2:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

SSIDataNonBlockingPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SSIDataGet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r2 r3
// Preserved: sp
SSIDataGet_entry:
// DataOut: cpsr r0 r1 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009AB8:
// DataOut: cpsr r0 r1 r2 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009ABC:
	branch Mem0[r0 + 0x0000000C:word32] << 29 >= 0x00000000 l00009ABC
// DataOut: cpsr r0 r1 r2 r4
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x0000000C r3:<invalid>

l00009AC2:
	Mem10[r1:word32] = Mem0[r0 + 8:word32]
	return
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x0000000C r3:<invalid>

SSIDataGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x0000000C r3:<invalid>



void SSIDataNonBlockingGet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
SSIDataNonBlockingGet_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009AC8:
	word32 r3_4 = Mem0[r0 + 12:word32]
	word32 r3_12 = r3_4 & 0x00000004
	branch (r3_4 & 0x00000004) == 0x00000000 l00009AD2
// DataOut: r0 r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009AD0_1:
	r3_12 = Mem0[r0 + 8:word32]
// DataOut: r1 r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00009AD2:
	Mem9[r1:word32] = r3_12
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

SSIDataNonBlockingGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SysCtlSRAMSizeGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlSRAMSizeGet_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009ADC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlSRAMSizeGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SysCtlFlashSizeGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlFlashSizeGet_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009AF4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlFlashSizeGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SysCtlPinPresent(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  C r0
// LiveOut:
// Trashed: NZCV r0 r3
// Preserved: sp
SysCtlPinPresent_entry:
// DataOut: r0
// DataOut (flags): C
// SymbolicIn: sp:fp

l00009B0C:
	branch Mem0[Mem0[0x00009B1C:word32]:word32] + r0 + C == 0x00000000 l00009B16
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009B14_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l00009B16:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:0x00000001

SysCtlPinPresent_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:0x00000000



void SysCtlPeripheralPresent(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: sp
SysCtlPeripheralPresent_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009B20:
	branch (r0 & ~0xF0000000) + Mem0[Mem0[Mem0[0x00009B38:word32] + ((r0 >>u 28) << 2):word32]:word32] + (r0 >>u 28 <u 0x00000000) == 0x00000000 l00009B34
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009B32_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r0 >>u 28 r0:<invalid>

l00009B34:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r0 >>u 28 r0:<invalid>

SysCtlPeripheralPresent_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r0 >>u 28 r0:0x00000000



void SysCtlPeripheralReset(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 sp
SysCtlPeripheralReset_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009B3C:
	word32 r2_11 = Mem0[Mem0[0x00009B78:word32] + ((r0 >>u 28) << 0x00000002) + 16:word32]
	Mem16[r2_11:word32] = r0 & ~0xF0000000 | Mem0[r2_11:word32]
	word32 dwLoc0C_17 = 0x00000000
	branch false l00009B6A
// DataOut: r0 r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -000C(32)

l00009B5E:
	word32 r3_32 = dwLoc0C_17 + 0x00000001
	dwLoc0C_17 = r3_32
	branch r3_32 <=u 0x0000000F l00009B5E
// DataOut: r0 r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r1:0x00000000 r3:<invalid> r2:<invalid> r4:<invalid> -12(fp):<invalid> -4(fp):r4
// LocalsOut: fp(32) Local -000C(32)

l00009B6A:
	Mem26[r2_11:word32] = Mem16[r2_11:word32] & ~(r0 << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r1:0x00000000 r3:<invalid> r2:<invalid> r4:<invalid> -12(fp):<invalid> -4(fp):r4

SysCtlPeripheralReset_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:0x00000000 r3:<invalid> r2:<invalid> r4:r4 r0:<invalid> -12(fp):<invalid> -4(fp):r4



void SysCtlPeripheralEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralEnable_entry:
// DataOut: cpsr r0 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009B7C:
	word32 r3_7 = Mem0[Mem0[0x00009B94:word32] + ((r0 >>u 28) << 0x00000002) + 28:word32]
	Mem12[r3_7:word32] = r0 & ~0xF0000000 | Mem0[r3_7:word32]
	return
// DataOut: cpsr r4
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlPeripheralEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>



void SysCtlPeripheralDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009B98:
	word32 r2_8 = Mem0[Mem0[0x00009BB0:word32] + ((r0 >>u 28) << 0x00000002) + 28:word32]
	Mem12[r2_8:word32] = Mem0[r2_8:word32] & ~((r0 & ~0xF0000000) << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlPeripheralDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>



void SysCtlPeripheralSleepEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralSleepEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009BB4:
	word32 r3_7 = Mem0[Mem0[0x00009BCC:word32] + ((r0 >>u 28) << 0x00000002) + 40:word32]
	Mem12[r3_7:word32] = r0 & ~0xF0000000 | Mem0[r3_7:word32]
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlPeripheralSleepEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>



void SysCtlPeripheralSleepDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralSleepDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009BD0:
	word32 r2_8 = Mem0[Mem0[0x00009BE8:word32] + ((r0 >>u 28) << 0x00000002) + 40:word32]
	Mem12[r2_8:word32] = Mem0[r2_8:word32] & ~((r0 & ~0xF0000000) << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlPeripheralSleepDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>



void SysCtlPeripheralDeepSleepEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralDeepSleepEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009BEC:
	word32 r3_7 = Mem0[Mem0[0x00009C04:word32] + ((r0 >>u 28) << 0x00000002) + 52:word32]
	Mem12[r3_7:word32] = r0 & ~0xF0000000 | Mem0[r3_7:word32]
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlPeripheralDeepSleepEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>



void SysCtlPeripheralDeepSleepDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPeripheralDeepSleepDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C08:
	word32 r2_8 = Mem0[Mem0[0x00009C20:word32] + ((r0 >>u 28) << 0x00000002) + 52:word32]
	Mem12[r2_8:word32] = Mem0[r2_8:word32] & ~((r0 & ~0xF0000000) << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlPeripheralDeepSleepDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>



void SysCtlPeripheralClockGating(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
SysCtlPeripheralClockGating_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C24:
	word32 r2_3 = Mem0[0x00009C3C:word32]
	word32 r3_4 = Mem0[r2_3:word32]
	branch r0 != 0x00000000 l00009C32
// DataOut: r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C32:
	Mem10[r2_3:word32] = r3_4 | 0x08000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

l00009C2A:
	Mem8[r2_3:word32] = r3_4 & ~0x08000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

SysCtlPeripheralClockGating_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>



void SysCtlIntRegister(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: lr r3 sp
SysCtlIntRegister_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009C40:
	IntRegister(0x0000002C, r0)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C50_thunk_IntEnable:
	IntEnable(0x0000002C)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r0 r0:0x0000002C r3:r3 lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr

SysCtlIntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:r0 r0:<invalid> r3:<invalid> lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr



void SysCtlIntUnregister()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr sp
SysCtlIntUnregister_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009C54:
	IntDisable(0x0000002C)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C62_thunk_IntUnregister:
	IntUnregister(0x0000002C)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x0000002C r3:r3 lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr

SysCtlIntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x0000002C r3:<invalid> lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr



void SysCtlIntEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlIntEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C68:
	word32 r2_3 = Mem0[0x00009C74:word32]
	Mem8[r2_3:word32] = r0 | Mem0[r2_3:word32]
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:<invalid>



void SysCtlIntDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0 r2 r3
// Preserved: sp
SysCtlIntDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C78:
	word32 r2_3 = Mem0[0x00009C84:word32]
	Mem7[r2_3:word32] = Mem0[r2_3:word32] & ~(r0 << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:<invalid>



void SysCtlIntClear(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
SysCtlIntClear_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C88:
	Mem5[Mem0[0x00009C90:word32]:word32] = r0
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void SysCtlIntStatus(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlIntStatus_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C94:
	branch r0 != 0x00000000 l00009C9C
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C9C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009C96:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlIntStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SysCtlLDOSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
SysCtlLDOSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CAC:
	Mem5[Mem0[0x00009CB4:word32]:word32] = r0
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlLDOSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void SysCtlLDOGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlLDOGet_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CB8:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlLDOGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SysCtlLDOConfigSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
SysCtlLDOConfigSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CC4:
	Mem5[Mem0[0x00009CCC:word32]:word32] = r0
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlLDOConfigSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void SysCtlReset()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
SysCtlReset_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

SysCtlReset_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CD0:
	Mem5[Mem0[0x00009CD8:word32]:word32] = Mem0[0x00009CDC:word32]
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CD6:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>



void SysCtlSleep()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
SysCtlSleep_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CE0:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009CE0_thunk_CPUwfi:
	CPUwfi()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlSleep_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void SysCtlDeepSleep()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r3
// Preserved: r4 sp
SysCtlDeepSleep_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009CE4:
	word32 r4_8 = Mem0[0x00009D00:word32]
	Mem11[r4_8:word32] = Mem0[r4_8:word32] | 0x00000004
	CPUwfi()
	Mem14[r4_8:word32] = Mem11[r4_8:word32] & ~0x00000004
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlDeepSleep_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r3:<invalid> -8(fp):r4 -4(fp):lr



void SysCtlResetCauseGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlResetCauseGet_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009D04:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlResetCauseGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SysCtlResetCauseClear(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0 r2 r3
// Preserved: sp
SysCtlResetCauseClear_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009D10:
	word32 r2_3 = Mem0[0x00009D1C:word32]
	Mem7[r2_3:word32] = Mem0[r2_3:word32] & ~(r0 << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlResetCauseClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:<invalid>



void SysCtlBrownOutConfigSet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r1 r3
// Preserved: sp
SysCtlBrownOutConfigSet_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009D20:
	Mem7[Mem0[0x00009D2C:word32]:word32] = r0 | r1 << 0x00000002
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlBrownOutConfigSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:r0 | r1 << 0x00000002



void SysCtlClockSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 sp
SysCtlClockSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009D30:
	word32 r4_15 = Mem0[0x00009DE0:word32]
	word32 r3_17 = Mem0[r4_15:word32]
	word32 r5_25 = Mem0[0x00009DE8:word32]
	word32 r2_28 = r0 & 0x000033F0 | (Mem0[0x00009DE4:word32] & r3_17 | 0x00000800) & (r0 | ~0x00000003)
	Mem29[r4_15:word32] = r3_17 & ~0x00400000 | 0x00000800
	Mem30[r5_25:word32] = 0x00000040
	Mem31[r4_15:word32] = r2_28
	word32 dwLoc14_110 = 0x00000000
	branch false l00009D76
// DataOut: r0 r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32) Local -0014(32)

l00009D6A:
	word32 r3_112 = dwLoc14_110 + 0x00000001
	dwLoc14_110 = r3_112
	branch r3_112 <=u 0x0000000F l00009D6A
// DataOut: r0 r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r2:<invalid> r7:0x00000040 r6:0x00000000 r4:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> -20(fp):<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7
// LocalsOut: fp(32) Local -0014(32)

l00009D76:
	word32 r2_42 = r2_28 & ~0x00000003 | r0 & 0x00000003
	Mem45[Mem31[0x00009DE0:word32]:word32] = r2_42
	word32 r1_49 = r0 & 0x07C00000 | (r2_42 & ~0x07C00000) << 0x00000000
	branch r0 << 20 < 0x00000000 l00009DBE
// DataOut: r1
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r2:<invalid> r7:0x00000040 r6:0x00000000 r4:<invalid> r1:<invalid> r3:<invalid> r5:<invalid> -20(fp):<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7
// LocalsOut: fp(32)

l00009D94:
	word32 dwLoc14_102 = 0x00008000
	branch 0x00008000 == 0x00000000 l00009DBA
// DataOut: r1
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r2:<invalid> r7:0x00000040 r6:0x00000000 r4:r0 << 20 r1:<invalid> r3:<invalid> r5:<invalid> -20(fp):<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7
// LocalsOut: fp(32) Local -0014(32)

l00009D9E:
	word32 r2_92 = Mem45[0x00009DEC:word32]
	branch Mem45[r2_92:word32] << 25 >= 0x00000000 l00009DAE
// DataOut: r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r2:<invalid> r7:0x00000040 r6:0x00000000 r4:r0 << 20 r1:<invalid> r3:0x00008000 r5:<invalid> -20(fp):0x00008000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7
// LocalsOut: fp(32) Local -0014(32)

l00009DAE:
	word32 r3_101 = dwLoc14_102 - 0x00000001
	dwLoc14_102 = r3_101
	branch r3_101 != 0x00000000 l00009DA8
// DataOut: r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r2:<invalid> r7:0x00000040 r6:0x00000000 r4:r0 << 20 r1:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> -20(fp):<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7
// LocalsOut: fp(32) Local -0014(32)

l00009DA8:
	branch Mem45[r2_92:word32] << 25 < 0x00000000 l00009DBA
// DataOut: r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r2:<invalid> r7:0x00000040 r6:0x00000000 r4:r0 << 20 r1:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> -20(fp):<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7
// LocalsOut: fp(32) Local -0014(32)

l00009DA6:
// DataOut: r1
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r2:<invalid> r7:0x00000040 r6:0x00000000 r4:r0 << 20 r1:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> -20(fp):0x00008000 -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7
// LocalsOut: fp(32)

l00009DBA:
	r1_49 = r1_49 & ~0x00000800
// DataOut: r1
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r2:<invalid> r7:0x00000040 r6:0x00000000 r4:r0 << 20 r1:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> -20(fp):<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7
// LocalsOut: fp(32)

l00009DBE:
	Mem58[Mem45[0x00009DE0:word32]:word32] = r1_49
	word32 dwLoc14_59 = 0x00000000
	branch false l00009DD8
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r2:<invalid> r7:0x00000040 r6:0x00000000 r4:r0 << 20 r1:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> -20(fp):<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7
// LocalsOut: fp(32) Local -0014(32)

l00009DCC:
	word32 r3_75 = dwLoc14_59 + 0x00000001
	dwLoc14_59 = r3_75
	branch r3_75 <=u 0x0000000F l00009DCC
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r2:<invalid> r7:0x00000040 r6:0x00000000 r4:r0 << 20 r1:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> -20(fp):<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7
// LocalsOut: fp(32) Local -0014(32)

l00009DD8:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r2:<invalid> r7:0x00000040 r6:0x00000000 r4:r0 << 20 r1:<invalid> r3:<invalid> r5:<invalid> r0:<invalid> -20(fp):<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7

SysCtlClockSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r7:r7 r6:r6 r4:r4 r1:<invalid> r3:<invalid> r5:r5 r0:<invalid> -20(fp):<invalid> -16(fp):r4 -12(fp):r5 -8(fp):r6 -4(fp):r7



word32 SysCtlClockGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: r0
// Trashed: NZCV r0 r1 r2 r3
// Preserved: sp
SysCtlClockGet_entry:
// DataOut: cpsr r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009DF0:
	word32 r0_22
	word32 r3_4 = Mem0[Mem0[0x00009E54:word32]:word32]
	branch (r3_4 & 0x00000030) == 0x00000010 l00009E4E
// DataOut: cpsr r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009E4E:
	r0_22 = Mem0[0x00009E64:word32]
// DataOut: cpsr r0 r3 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l00009DFC:
	branch (r3_4 & 0x00000030) == 0x00000020 l00009E4A
// DataOut: cpsr r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l00009E4A:
	r0_22 = Mem0[0x00009E60:word32]
// DataOut: cpsr r0 r3 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l00009E00:
	branch (r3_4 & 0x00000030) == 0x00000000 l00009E06
// DataOut: cpsr r3 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l00009E06:
	r0_22 = Mem0[Mem0[0x00009E58:word32] + ((uint32) SLICE(r3_4, ui4, 6) << 0x00000002) + 48:word32]
// DataOut: cpsr r0 r3 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l00009E12:
	branch r3_4 << 20 < 0x00000000 l00009E3A
// DataOut: cpsr r0 r3 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>

l00009E16:
	word32 r2_41 = Mem0[Mem0[0x00009E5C:word32]:word32]
	r0_22 = r0_22 * ((uint32) SLICE(r2_41, ui9, 5) + 0x00000002) /u ((r2_41 & 0x0000001F) + 0x00000002)
	branch r2_41 << 17 >= 0x00000000 l00009E34
// DataOut: cpsr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>

l00009E32_1:
	r0_22 = r0_22 >>u 1
// DataOut: cpsr r0 r2 r3 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>

l00009E34:
	branch r2_41 << 16 >= 0x00000000 l00009E3A
// DataOut: cpsr r0 r3 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>

l00009E38_1:
	r0_22 = r0_22 >>u 2
// DataOut: cpsr r0 r3 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>

l00009E3A:
	branch r3_4 << 9 >= 0x00000000 l00009E04
// DataOut: cpsr r0 r3 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>

l00009E3E:
	return r0_22 /u ((uint32) SLICE(r3_4, ui4, 23) + 0x00000001)
// DataOut: cpsr r0 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>

l00009E02:
	r0_22 = 0x00000000
// DataOut: cpsr r0 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l00009E04:
	return r0_22
// DataOut: cpsr r0 r4 r5 r6 r7 r8
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>

SysCtlClockGet_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid> r1:<invalid>



void SysCtlPWMClockSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
SysCtlPWMClockSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009E68:
	word32 r2_3 = Mem0[0x00009E78:word32]
	Mem9[r2_3:word32] = r0 | Mem0[r2_3:word32] & ~0x001E0000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlPWMClockSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid> r0:<invalid>



void SysCtlPWMClockGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlPWMClockGet_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009E7C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlPWMClockGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SysCtlADCSpeedSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r1 r2 r3
// Preserved: r4 sp
SysCtlADCSpeedSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009E8C:
	word32 r4_6 = Mem0[0x00009EB8:word32]
	word32 r1_7 = Mem0[0x00009EBC:word32]
	word32 r2_9 = Mem0[0x00009EC0:word32]
	Mem13[r4_6:word32] = Mem0[r4_6:word32] & ~0x00000F00 | r0
	Mem19[r1_7:word32] = Mem13[r1_7:word32] & ~0x00000F00 | r0
	Mem24[r2_9:word32] = r0 | Mem19[r2_9:word32] & ~0x00000F00
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlADCSpeedSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r1:<invalid> r3:<invalid> r2:<invalid> r0:<invalid> -4(fp):r4



void SysCtlADCSpeedGet()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r0 r3
// Preserved: sp
SysCtlADCSpeedGet_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009EC4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlADCSpeedGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>



void SysCtlIOSCVerificationSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
SysCtlIOSCVerificationSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009ED4:
	word32 r2_3 = Mem0[0x00009EEC:word32]
	word32 r3_4 = Mem0[r2_3:word32]
	branch r0 != 0x00000000 l00009EE2
// DataOut: r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009EE2:
	Mem10[r2_3:word32] = r3_4 | 0x00000008
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

l00009EDA:
	Mem8[r2_3:word32] = r3_4 & ~0x00000008
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

SysCtlIOSCVerificationSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>



void SysCtlMOSCVerificationSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
SysCtlMOSCVerificationSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009EF0:
	word32 r2_3 = Mem0[0x00009F08:word32]
	word32 r3_4 = Mem0[r2_3:word32]
	branch r0 != 0x00000000 l00009EFE
// DataOut: r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009EFE:
	Mem10[r2_3:word32] = r3_4 | 0x00000004
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

l00009EF6:
	Mem8[r2_3:word32] = r3_4 & ~0x00000004
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

SysCtlMOSCVerificationSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>



void SysCtlPLLVerificationSet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
SysCtlPLLVerificationSet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009F0C:
	word32 r2_3 = Mem0[0x00009F24:word32]
	word32 r3_4 = Mem0[r2_3:word32]
	branch r0 != 0x00000000 l00009F1A
// DataOut: r2 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009F1A:
	Mem10[r2_3:word32] = r3_4 | 0x00000400
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

l00009F12:
	Mem8[r2_3:word32] = r3_4 & ~0x00000400
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>

SysCtlPLLVerificationSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:<invalid> r3:<invalid>



void SysCtlClkVerificationClear()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: r1 r2 r3
// Preserved: sp
SysCtlClkVerificationClear_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009F28:
	word32 r3_5 = Mem0[0x00009F34:word32]
	Mem6[r3_5:word32] = 0x00000001
	Mem7[r3_5:word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

SysCtlClkVerificationClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:0x00000001 r2:0x00000000 r3:<invalid>



void UARTParityModeSet(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r3
// Preserved: sp
UARTParityModeSet_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009F38:
	Mem9[r0 + 44:word32] = r1 | Mem0[r0 + 44:word32] & ~0x00000086
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTParityModeSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid>



void UARTParityModeGet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
UARTParityModeGet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009F44:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTParityModeGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void UARTConfigSet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 r6 r7 sp
UARTConfigSet_entry:
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009F4C:
// DataOut: r0 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009F56:
	word32 r4_24 = Mem0[r0 + 0x00000018:word32]
	branch (r4_24 & 0x00000008) != 0x00000000 l00009F56
// DataOut: r0 r4 r5 r6 r7
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:r1 r6:r2 r5:r0 r0:r0 + 0x00000018 r4:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

l00009F5E:
	Mem30[r0 + 44:word32] = Mem0[r0 + 44:word32] & ~0x00000010
	Mem34[r0 + 48:word32] = Mem30[r0 + 48:word32] & ~0x00000300 & ~0x00000001
	word32 r0_35 = SysCtlClockGet()
	word32 r2_37 = r0_35 /u (r1 << 4)
	Mem45[r0 + 36:word32] = r2_37
	Mem46[r0 + 40:word32] = (r0_35 - (r1 << 4) * r2_37 << 3) /u r1 + 0x00000001 >>u 1
	Mem47[r0 + 44:word32] = r2
	Mem48[r0 + 24:word32] = r4_24 & 0x00000008
	Mem51[r0 + 44:word32] = Mem48[r0 + 44:word32] | 0x00000010
	Mem55[r0 + 48:word32] = Mem51[r0 + 48:word32] | 0x00000300 | 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 24 r7:r1 r6:r2 r5:r0 r0:r0 + 0x00000018 r4:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

UARTConfigSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r7:r7 r6:r6 r5:r5 r0:<invalid> r4:r4 r3:r3 r2:<invalid> r1:<invalid> -24(fp):r3 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



void UARTConfigGet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut:
// Trashed: NZCV r0 r1 r2 r3
// Preserved: r4 r5 r6 r7 r8 sp
UARTConfigGet_entry:
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l00009FA8:
	Mem29[r1:word32] = (SysCtlClockGet() << 2) /u (Mem0[r0 + 40:word32] + (Mem0[r0 + 36:word32] << 0x00000006))
	Mem32[r2:word32] = Mem29[r0 + 44:word32] & 0x000000EE
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTConfigGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r8:r8 r4:r4 r7:r7 r6:r6 r5:r5 r0:<invalid> r3:<invalid> r2:<invalid> r1:<invalid> -24(fp):r4 -20(fp):r5 -16(fp):r6 -12(fp):r7 -8(fp):r8 -4(fp):lr



void UARTEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
UARTEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009FD4:
	Mem6[r0 + 44:word32] = Mem0[r0 + 44:word32] | 0x00000010
	Mem10[r0 + 48:word32] = Mem6[r0 + 48:word32] | 0x00000300 | 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void UARTDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r2 r3
// Preserved: sp
UARTDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009FEC:
// DataOut: r0 r2
// DataOut (flags): 
// SymbolicIn: sp:fp

l00009FF0:
	branch Mem0[r0 + 0x00000018:word32] << 28 < 0x00000000 l00009FF0
// DataOut: r0 r2
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid>

l00009FF6:
	Mem11[r0 + 44:word32] = Mem0[r0 + 44:word32] & ~0x00000010
	Mem15[r0 + 48:word32] = Mem11[r0 + 48:word32] & ~0x00000300 & ~0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid>

UARTDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid>



void UARTCharsAvail(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
UARTCharsAvail_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A00C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTCharsAvail_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void UARTSpaceAvail(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
UARTSpaceAvail_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A018:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTSpaceAvail_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void UARTCharNonBlockingGet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
UARTCharNonBlockingGet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A024:
	branch Mem0[r0 + 24:word32] << 27 < 0x00000000 l0000A02C
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A02A_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l0000A02C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:<invalid>

UARTCharNonBlockingGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:0xFFFFFFFF



void UARTCharGet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
UARTCharGet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A034:
// DataOut: r0 r2
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A038:
	branch Mem0[r0 + 0x00000018:word32] << 27 < 0x00000000 l0000A038
// DataOut: r0 r2
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid>

l0000A03E:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid>

UARTCharGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid> r0:<invalid>



void UARTCharNonBlockingPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r0 r3
// Preserved: sp
UARTCharNonBlockingPut_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A044:
	branch Mem0[r0 + 24:word32] << 26 < 0x00000000 l0000A04C
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A04A_1:
	Mem10[r0:word32] = r1
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l0000A04C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

UARTCharNonBlockingPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r0:0x00000000



void UARTCharPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r2 r3
// Preserved: sp
UARTCharPut_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A054:
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A058:
	branch Mem0[r0 + 0x00000018:word32] << 26 < 0x00000000 l0000A058
// DataOut: r0 r1 r2
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid>

l0000A05E:
	Mem10[r0:word32] = r1
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid>

UARTCharPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r0 + 0x00000018 r3:<invalid>



void UARTBreakCtl(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r3
// Preserved: sp
UARTBreakCtl_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A064:
	word32 r3_4 = Mem0[r0 + 44:word32]
	branch r1 != 0x00000000 l0000A070
// DataOut: r0 r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A070:
	Mem10[r0 + 44:word32] = r3_4 | 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

l0000A068:
	Mem8[r0 + 44:word32] = r3_4 & ~0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>

UARTBreakCtl_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void UARTIntRegister(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r4 sp
UARTIntRegister_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A078:
	branch r0 != Mem0[0x0000A094:word32] l0000A082
// DataOut: r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A080_1:
// DataOut: r1
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> -8(fp):r4 -4(fp):lr

l0000A082:
	IntRegister(0x00000016, r1)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> -8(fp):r4 -4(fp):lr

l0000A090_thunk_IntEnable:
	IntEnable(0x00000016)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r0:0x00000016 lr:lr r3:<invalid> r2:<invalid> -8(fp):r4 -4(fp):lr

UARTIntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r0:<invalid> lr:lr r2:<invalid> r3:<invalid> -8(fp):r4 -4(fp):lr



void UARTIntUnregister(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r4 sp
UARTIntUnregister_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A098:
	branch r0 != Mem0[0x0000A0B4:word32] l0000A0A2
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0A0_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> -8(fp):r4 -4(fp):lr

l0000A0A2:
	IntDisable(0x00000016)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp - 8 r4:<invalid> -8(fp):r4 -4(fp):lr

l0000A0B0_thunk_IntUnregister:
	IntUnregister(0x00000016)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r0:0x00000016 lr:lr r2:<invalid> r3:<invalid> -8(fp):r4 -4(fp):lr

UARTIntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r0:0x00000016 lr:lr r3:<invalid> r2:<invalid> -8(fp):r4 -4(fp):lr



void UARTIntEnable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZC r1 r3
// Preserved: sp
UARTIntEnable_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0B8:
	Mem8[r0 + 56:word32] = r1 | Mem0[r0 + 56:word32]
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid>



void UARTIntDisable(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r1 r3
// Preserved: sp
UARTIntDisable_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0C0:
	Mem7[r0 + 56:word32] = Mem0[r0 + 56:word32] & ~(r1 << 0x00000000)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r1:<invalid>



word32 UARTIntStatus(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut: r0
// Trashed: r0
// Preserved: sp
UARTIntStatus_entry:
// DataOut: cpsr r0 r1 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0CC:
	branch r1 != 0x00000000 l0000A0D2
// DataOut: cpsr r0 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0D2:
	return Mem0[r0 + 64:word32]
// DataOut: cpsr r0 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0CE:
	return Mem0[r0 + 60:word32]
// DataOut: cpsr r0 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTIntStatus_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void UARTIntClear(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed:
// Preserved: sp
UARTIntClear_entry:
// DataOut: cpsr r0 r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0D8:
	Mem3[r0 + 68:word32] = r1
	return
// DataOut: cpsr r1 r4 r5
// DataOut (flags): 
// SymbolicIn: sp:fp

UARTIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void CPUcpsie()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
CPUcpsie_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0DC:
	__cps_id()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

CPUcpsie_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void CPUcpsid()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
CPUcpsid_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0E4:
	__cps_id()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

CPUcpsid_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void CPUwfi()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
CPUwfi_entry:
// DataOut: r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A0EC:
	__wait_for_interrupt()
	return
// DataOut: r4
// DataOut (flags): 
// SymbolicIn: sp:fp

CPUwfi_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CMasterInit(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r0 r1 r2
// Preserved: r3 r4 r5 sp
I2CMasterInit_entry:
// DataOut: cpsr r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A0F4:
	Mem18[r0 + 32:word32] = Mem0[r0 + 32:word32] | 0x00000010
	word32 r0_19 = SysCtlClockGet()
	word32 r3_20 = Mem18[0x0000A120:word32]
	word32 r2_21 = Mem18[0x0000A124:word32]
	branch r1 != 0x00000001 l0000A112
// DataOut: cpsr r0 r2 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A110_1:
	r3_20 = r2_21
// DataOut: cpsr r0 r3 r4
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r1 r2:<invalid> r4:r0 r3:<invalid> r0:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

l0000A112:
	Mem30[r0 + 12:word32] = (r0_19 - 0x00000001 + r3_20) /u r3_20 - 0x00000001
	return
// DataOut: cpsr
// DataOut (flags): 
// SymbolicIn: sp:fp - 16 r5:r1 r2:<invalid> r4:r0 r3:<invalid> r0:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr

I2CMasterInit_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r5:r5 r2:<invalid> r4:r4 r3:r3 r0:<invalid> r1:<invalid> -16(fp):r3 -12(fp):r4 -8(fp):r5 -4(fp):lr



void I2CSlaveInit(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: r2 r3
// Preserved: r4 sp
I2CSlaveInit_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A128:
	Mem11[r0 - 0x000007E0:word32] = Mem0[r0 - 0x000007E0:word32] | 0x00000020
	Mem12[r0 + 4:word32] = 0x00000001
	Mem14[r0:word32] = r1
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveInit_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r4:r4 r2:r0 - 0x000007E0 r3:<invalid> -4(fp):r4



void I2CMasterEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A140:
	Mem6[r0 + 32:word32] = Mem0[r0 + 32:word32] | 0x00000010
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void I2CSlaveEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r1 r2 r3
// Preserved: sp
I2CSlaveEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A14C:
	Mem8[r0 - 0x000007E0:word32] = Mem0[r0 - 0x000007E0:word32] | 0x00000020
	Mem9[r0 + 4:word32] = 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r1:0x00000001 r2:r0 - 0x000007E0 r3:<invalid>



void I2CMasterDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A160:
	Mem6[r0 + 32:word32] = Mem0[r0 + 32:word32] & ~0x00000010
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid>



void I2CSlaveDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r2 r3
// Preserved: sp
I2CSlaveDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A16C:
	Mem5[r0 + 4:word32] = 0x00000000
	Mem8[r0 - 0x000007E0:word32] = Mem5[r0 - 0x000007E0:word32] & ~0x00000020
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:r0 - 0x000007E0



void I2CIntRegister(word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r1
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr r3 sp
I2CIntRegister_entry:
// DataOut: r1
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A180:
	IntRegister(0x00000018, r1)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A18E_thunk_IntEnable:
	IntEnable(0x00000018)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000018 r3:r3 lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr

I2CIntRegister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid> r3:<invalid> lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr



void I2CIntUnregister()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: NZCV r0 r2 r3
// Preserved: lr sp
I2CIntUnregister_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A194:
	IntDisable(0x00000018)
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1A2_thunk_IntUnregister:
	IntUnregister(0x00000018)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000018 r3:r3 lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr

I2CIntUnregister_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:0x00000018 r3:<invalid> lr:lr r2:<invalid> -8(fp):r3 -4(fp):lr



void I2CMasterIntEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterIntEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1A8:
	Mem3[r0 + 16:word32] = 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000001



void I2CSlaveIntEnable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CSlaveIntEnable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1B0:
	Mem3[r0 + 12:word32] = 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveIntEnable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000001



void I2CMasterIntDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterIntDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1B8:
	Mem3[r0 + 16:word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000000



void I2CSlaveIntDisable(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CSlaveIntDisable_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1C0:
	Mem3[r0 + 12:word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveIntDisable_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000000



word32 I2CMasterIntStatus(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut: r0
// Trashed: NZCV r0
// Preserved: sp
I2CMasterIntStatus_entry:
// DataOut: cpsr r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1C8:
	branch r1 != 0x00000000 l0000A1D4
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1D4:
	word32 r0_14 = Mem0[r0 + 24:word32]
	word32 r0_15 = r0_14
	branch r0_14 == 0x00000000 l0000A1DC
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1DA_1:
	r0_15 = 0x00000001
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l0000A1DC:
	return r0_15
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l0000A1CA:
	word32 r0_8 = Mem0[r0 + 20:word32]
	word32 r0_12 = r0_8
	branch r0_8 == 0x00000000 l0000A1D2
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1D0_1:
	r0_12 = 0x00000001
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l0000A1D2:
	return r0_12
// DataOut: cpsr r0 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

I2CMasterIntStatus_exit:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void I2CSlaveIntStatus(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed: NZCV r0
// Preserved: sp
I2CSlaveIntStatus_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1E0:
	branch r1 != 0x00000000 l0000A1EC
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1EC:
	branch Mem0[r0 + 20:word32] == 0x00000000 l0000A1F4
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1F2_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l0000A1F4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l0000A1E2:
	branch Mem0[r0 + 16:word32] == 0x00000000 l0000A1EA
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1E8_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

l0000A1EA:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>

I2CSlaveIntStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void I2CMasterIntClear(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CMasterIntClear_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A1F8:
	Mem3[r0 + 28:word32] = 0x00000001
	Mem5[r0 + 24:word32] = 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000001



void I2CSlaveIntClear(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r3
// Preserved: sp
I2CSlaveIntClear_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A200:
	Mem3[r0 + 24:word32] = 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveIntClear_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:0x00000001



void I2CMasterSlaveAddrSet(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut:
// Trashed: r2
// Preserved: sp
I2CMasterSlaveAddrSet_entry:
// DataOut: cpsr r0 r1 r10 r2 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A208:
	Mem5[r0:word32] = r2 | r1 << 0x00000001
	return
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterSlaveAddrSet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r2:r2 | r1 << 0x00000001



void I2CMasterBusy(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CMasterBusy_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A210:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterBusy_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void I2CMasterBusBusy(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CMasterBusBusy_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A218:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterBusBusy_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void I2CMasterControl(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed:
// Preserved: sp
I2CMasterControl_entry:
// DataOut: cpsr r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A220:
	Mem3[r0 + 4:word32] = r1
	return
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterControl_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CMasterErr(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: NZC r0 r2 r3
// Preserved: sp
I2CMasterErr_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A224:
	word32 r3_4 = Mem0[r0 + 4:word32]
	branch r3_4 << 31 < 0x00000000 l0000A236
// DataOut: r3
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A236:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l0000A22A:
	branch (r3_4 & 0x00000002) == 0x00000000 l0000A238
// DataOut: r3
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid>

l0000A238:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>

l0000A230:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>

I2CMasterErr_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r3:<invalid> r2:<invalid> r0:<invalid>



void I2CMasterDataPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed:
// Preserved: sp
I2CMasterDataPut_entry:
// DataOut: cpsr r0 r1 r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A23C:
	Mem3[r0 + 8:word32] = r1
	return
// DataOut: cpsr r10 r4 r5 r6 r7 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterDataPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CMasterDataGet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CMasterDataGet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A240:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CMasterDataGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void I2CSlaveStatus(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CSlaveStatus_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A244:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveStatus_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



void I2CSlaveDataPut(word32 r0, word32 r1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1
// LiveOut:
// Trashed:
// Preserved: sp
I2CSlaveDataPut_entry:
// DataOut: r0 r1
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A248:
	Mem3[r0 + 8:word32] = r1
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveDataPut_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void I2CSlaveDataGet(word32 r0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0
// LiveOut:
// Trashed: r0
// Preserved: sp
I2CSlaveDataGet_entry:
// DataOut: r0
// DataOut (flags): 
// SymbolicIn: sp:fp

l0000A24C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

I2CSlaveDataGet_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp r0:<invalid>



byte memcpy(word32 r0, word32 r1, word32 r2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r0 r1 r2
// LiveOut: Z
// Trashed: NZCV r1 r2 r3
// Preserved: r4 r5 r6 r7 sp
memcpy_entry:
// DataOut: cpsr r0 r1 r2 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A5C4:
	word32 r2_125
	word32 r5_104 = r0
	r2_125 = r2
	branch r2 <=u 0x0000000F l0000A62C
// DataOut: cpsr r0 r1 r2 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(32)

l0000A5CC:
	branch (r1 | r0) << 30 != 0x00000000 l0000A642
// DataOut: cpsr r0 r1 r2 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l0000A642:
	r5_104 = r0
	r2_125 = r2
// DataOut: cpsr r1 r2 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 r3:(r1 | r0) << 30 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l0000A5D4:
	word32 r4_78 = r1
	word32 r3_79 = r0
	word32 r5_86 = r0 + ((r2 - 0x00000010 >>u 4) + 0x00000001 << 4)
// DataOut: cpsr r0 r1 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 r3:(r1 | r0) << 30 -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l0000A5E4:
	Mem90[r3_79:word32] = Mem0[r4_78:word32]
	Mem92[r3_79 + 4:word32] = Mem90[r4_78 + 4:word32]
	Mem94[r3_79 + 8:word32] = Mem92[r4_78 + 8:word32]
	Mem96[r3_79 + 12:word32] = Mem94[r4_78 + 12:word32]
	r3_79 = r3_79 + 0x00000010
	r4_78 = r4_78 + 0x00000010
	branch r5_86 != r3_79 l0000A5E4
// DataOut: cpsr r0 r1 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 + ((r2 - 0x00000010 >>u 4) + 0x00000001 << 4) r3:<invalid> r6:r2 - 0x00000010 r4:<invalid> r7:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l0000A5FC:
	word32 r6_102 = r2 - 0x00000010 & ~0x0000000F
	r5_104 = r0 + (r6_102 + 0x00000010)
	r1 = r1 + (r6_102 + 0x00000010)
	branch (r2 & 0x0000000F) <=u 0x00000003 l0000A646
// DataOut: cpsr r1 r2 r3 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 + ((r2 - 0x00000010 >>u 4) + 0x00000001 << 4) r3:<invalid> r6:r2 - 0x00000010 r4:<invalid> r7:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l0000A646:
	r2_125 = r2 & 0x0000000F
// DataOut: cpsr r1 r2 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 + ((r2 - 0x00000010 & ~0x0000000F) + 0x00000010) r3:r2 & 0x0000000F r6:(r2 - 0x00000010 & ~0x0000000F) + 0x00000010 r4:<invalid> r7:<invalid> r1:r1 + ((r2 - 0x00000010 & ~0x0000000F) + 0x00000010) -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l0000A60C:
	word32 r6_109 = (r2 & 0x0000000F) - 0x00000004
	word32 r3_110 = 0x00000000
	word32 r4_112 = (r6_109 >>u 2) + 0x00000001
// DataOut: cpsr r1 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 + ((r2 - 0x00000010 & ~0x0000000F) + 0x00000010) r3:r2 & 0x0000000F r6:(r2 - 0x00000010 & ~0x0000000F) + 0x00000010 r4:<invalid> r7:<invalid> r1:r1 + ((r2 - 0x00000010 & ~0x0000000F) + 0x00000010) -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l0000A616:
	Mem118[r5_104 + r3_110:word32] = Mem96[r1 + r3_110:word32]
	r3_110 = r3_110 + 0x00000004
	branch r3_110 != r4_112 << 2 l0000A616
// DataOut: cpsr r1 r2 r3 r4 r5 r6 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 + ((r2 - 0x00000010 & ~0x0000000F) + 0x00000010) r3:<invalid> r6:(r2 & 0x0000000F) - 0x00000004 r4:((r2 & 0x0000000F) - 0x00000004 >>u 2) + 0x00000001 << 2 r7:<invalid> r1:r1 + ((r2 - 0x00000010 & ~0x0000000F) + 0x00000010) -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l0000A620:
	word32 r6_123 = r6_109 & ~0x00000003
	r2_125 = r2 & 0x00000003
	r1 = r1 + (r6_123 + 0x00000004)
	r5_104 = r5_104 + (r6_123 + 0x00000004)
// DataOut: cpsr r1 r2 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:r0 + ((r2 - 0x00000010 & ~0x0000000F) + 0x00000010) r3:<invalid> r6:(r2 & 0x0000000F) - 0x00000004 r4:((r2 & 0x0000000F) - 0x00000004 >>u 2) + 0x00000001 << 2 r7:<invalid> r1:r1 + ((r2 - 0x00000010 & ~0x0000000F) + 0x00000010) -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l0000A62C:
	branch r2_125 == 0x00000000 l0000A63C
// DataOut: cpsr r1 r2 r5 r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp - 20 r5:<invalid> r3:<invalid> r6:<invalid> r4:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l0000A630:
	word32 r3_51 = 0x00000000
// DataOut: cpsr r1 r2 r3 r5 r8 r9
// DataOut (flags): 
// SymbolicIn: sp:fp - 20 r5:<invalid> r3:<invalid> r6:<invalid> r4:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l0000A632:
	Mem55[r5_104 + r3_51:byte] = (byte) (word32) Mem0[r1 + r3_51:byte]
	r3_51 = r3_51 + 0x00000001
	branch r3_51 != r2_125 l0000A632
// DataOut: cpsr r1 r2 r3 r5 r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp - 20 r5:<invalid> r3:<invalid> r4:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr
// LocalsOut: fp(32)

l0000A63C:
	word32 sp_27
	word32 r4_28
	word32 r5_29
	word32 r6_30
	word32 r7_31
	word32 lr_32
	word32 r0_33
	word32 r2_34
	byte NZCV_35
	byte ZC_36
	word32 r1_37
	word32 r3_38
	byte NZC_39
	byte Z_40
	call lr (retsize: 0;)
		uses: dwLoc04_12,dwLoc08_10,dwLoc0C_8,dwLoc10_6,dwLoc14_4,lr,NZCV_16,r0,r1_25,r2,r3,r4_20,r5_21,r6_22,r7_23,sp_26,ZC_17
		defs: lr_32,NZC_39,NZCV_35,r0_33,r1_37,r2_34,r3_38,r4_28,r5_29,r6_30,r7_31,sp_27,Z_40,ZC_36
	return Z_40
// DataOut: cpsr r8 r9
// DataOut (flags): Z
// SymbolicIn: sp:fp - 20 r5:<invalid> r3:<invalid> r4:<invalid> r6:<invalid> r7:<invalid> r1:<invalid> r2:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr

memcpy_exit:
// DataOut:
// DataOut (flags): Z
// SymbolicIn: sp:fp r5:r5 r4:r4 r6:r6 r7:r7 r1:lr r3:<invalid> r2:<invalid> -20(fp):r4 -16(fp):r5 -12(fp):r6 -8(fp):r7 -4(fp):lr



